VARIABLE version NUMBER
BEGIN :version := 30; END; -- CHANGE THIS TO MATCH VERSION NUMBER
/

WHENEVER SQLERROR EXIT SQL.SQLCODE
DECLARE
	v_version	version.db_version%TYPE;
BEGIN
	SELECT db_version INTO v_version FROM supplier.version;
	IF v_version >= :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' HAS ALREADY BEEN APPLIED =======');
	END IF;
	IF v_version + 1 <> :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' CANNOT BE APPLIED TO A DATABASE OF VERSION '||v_version||' =======');
	END IF;
END;
/


-- TABLE: COMPANY_PART 
--

CREATE TABLE COMPANY_PART(
    COMPANY_PART_ID    NUMBER(10, 0)    NOT NULL,
    PART_TYPE_ID       NUMBER(10, 0)    NOT NULL,
    COMPANY_SID        NUMBER(10, 0)    NOT NULL,
    PARENT_ID          NUMBER(10, 0),
    CONSTRAINT PK27_1 PRIMARY KEY (COMPANY_PART_ID)
)
;

-- 
-- TABLE: COMPANY_PART 
--

ALTER TABLE COMPANY_PART ADD CONSTRAINT RefPART_TYPE278 
    FOREIGN KEY (PART_TYPE_ID)
    REFERENCES PART_TYPE(PART_TYPE_ID)
;

ALTER TABLE COMPANY_PART ADD CONSTRAINT RefALL_COMPANY279 
    FOREIGN KEY (COMPANY_SID)
    REFERENCES ALL_COMPANY(COMPANY_SID)
;

ALTER TABLE COMPANY_PART ADD CONSTRAINT RefCOMPANY_PART280 
    FOREIGN KEY (PARENT_ID)
    REFERENCES COMPANY_PART(COMPANY_PART_ID)
;

ALTER TABLE NN_MANUFACTURING_SITE ADD CONSTRAINT RefCOMPANY_PART282 
    FOREIGN KEY (COMPANY_PART_ID)
    REFERENCES COMPANY_PART(COMPANY_PART_ID)
;

-- SEQUENCE: COMPANY_PART_ID_SEQ 
--

CREATE SEQUENCE COMPANY_PART_ID_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;

INSERT INTO part_type VALUES (6, 'NN_PART_MANUFACTURING_SITE', 'nn_manufacturing_site_pkg');
INSERT INTO part_type VALUES (7, 'NN_CUSTODY_STEP', 'nn_custody_step_pkg');

-- Update version
UPDATE supplier.version SET db_version = :version;
COMMIT;

PROMPT
PROMPT ================== UPDATED OK ========================
EXIT
