VARIABLE version NUMBER
BEGIN :version := 2; END; -- CHANGE THIS TO MATCH VERSION NUMBER
/

WHENEVER SQLERROR EXIT SQL.SQLCODE
DECLARE
	v_version	version.db_version%TYPE;
BEGIN
	SELECT db_version INTO v_version FROM supplier.version;
	IF v_version >= :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' HAS ALREADY BEEN APPLIED =======');
	END IF;
	IF v_version + 1 <> :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' CANNOT BE APPLIED TO A DATABASE OF VERSION '||v_version||' =======');
	END IF;
END;
/

ALTER TABLE SUPPLIER.ALL_PRODUCT
ADD (DATA_PROVIDER_COMPANY_SID NUMBER(10));

UPDATE SUPPLIER.ALL_PRODUCT 
SET DATA_PROVIDER_COMPANY_SID = SUPPLIER_COMPANY_SID;

CREATE OR REPLACE VIEW SUPPLIER.PRODUCT
(PRODUCT_ID, CSR_ROOT_SID, PRODUCT_CODE, DESCRIPTION, SUPPLIER_COMPANY_SID, DATA_PROVIDER_COMPANY_SID,
 DATA_PROVIDER_SID, OWNER_COMPANY_SID, DATA_APPROVER_SID, PRODUCT_STATUS_ID, DUE_DATE, 
 ACTIVE, DELETED, STATUS_CHANGED_DTM, DECLARATION_MADE_BY_SID)
AS 
SELECT AL.PRODUCT_ID, AL.CSR_ROOT_SID, AL.PRODUCT_CODE, AL.DESCRIPTION, AL.SUPPLIER_COMPANY_SID, AL.DATA_PROVIDER_COMPANY_SID, AL.DATA_PROVIDER_SID, AL.OWNER_COMPANY_SID, AL.DATA_APPROVER_SID, AL.PRODUCT_STATUS_ID, AL.DUE_DATE, AL.ACTIVE, AL.DELETED, AL.STATUS_CHANGED_DTM, AL.DECLARATION_MADE_BY_SID
FROM ALL_PRODUCT AL
WHERE DELETED = 0;

/


UPDATE supplier.version SET db_version = :version;
COMMIT;

PROMPT
PROMPT ================== UPDATED OK ========================
EXIT