VARIABLE version NUMBER
BEGIN :version := 4; END; -- CHANGE THIS TO MATCH VERSION NUMBER
/

WHENEVER SQLERROR EXIT SQL.SQLCODE
DECLARE
	v_version	version.db_version%TYPE;
BEGIN
	SELECT db_version INTO v_version FROM supplier.version;
	IF v_version >= :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' HAS ALREADY BEEN APPLIED =======');
	END IF;
	IF v_version + 1 <> :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' CANNOT BE APPLIED TO A DATABASE OF VERSION '||v_version||' =======');
	END IF;
END;
/


-- 
-- TABLE: NP_COMPONENT_DESCRIPTION 
--

CREATE TABLE NP_COMPONENT_DESCRIPTION(
    PRODUCT_PART_ID               NUMBER(10, 0)     NOT NULL,
    COMMON_NAME                   VARCHAR2(1024)    NOT NULL,
    SPECIES                       VARCHAR2(255)     NOT NULL,
    GENUS                         VARCHAR2(255)     NOT NULL,
    DESCRIPTION                   VARCHAR2(1024)    NOT NULL,
    COUNTRY_OF_ORIGIN             VARCHAR2(8)       NOT NULL,
    REGION                        VARCHAR2(255),
    NP_KINGDOM_ID                 NUMBER(10, 0)     NOT NULL,
    NATURAL_CLAIM                 NUMBER(1, 0)       DEFAULT 0 NOT NULL,
    COMPONENT_CODE                VARCHAR2(255),
    COLLECTION_DESCRIPTION        CLOB              NOT NULL,
    ENV_HARVEST_SAFEGUARD_DESC    VARCHAR2(10)      NOT NULL,
    NP_PRODUCTION_PROCESS_ID      NUMBER(10, 0),
    ENV_PROCESS_SAFEGUARD_DESC    CLOB,
    CONSTRAINT PK119 PRIMARY KEY (PRODUCT_PART_ID)
)
;

-- 
-- TABLE: NP_EVIDENCE_CLASS 
--

CREATE TABLE NP_EVIDENCE_CLASS(
    NP_EVIDENCE_CLASS_ID    NUMBER(10, 0)     NOT NULL,
    NAME                    VARCHAR2(255)     NOT NULL,
    DESCRIPTION             VARCHAR2(1024)    NOT NULL,
    CONSTRAINT PK114 PRIMARY KEY (NP_EVIDENCE_CLASS_ID)
)
;

-- 
-- TABLE: NP_EVIDENCE_TYPE 
--

CREATE TABLE NP_EVIDENCE_TYPE(
    NP_EVIDENCE_TYPE_ID    NUMBER(10, 0)     NOT NULL,
    NAME                   VARCHAR2(255)     NOT NULL,
    DESCRIPTION            VARCHAR2(1024)    NOT NULL,
    CONSTRAINT PK118 PRIMARY KEY (NP_EVIDENCE_TYPE_ID)
)
;

-- 
-- TABLE: NP_KINGDOM 
--

CREATE TABLE NP_KINGDOM(
    NP_KINGDOM_ID    NUMBER(10, 0)     NOT NULL,
    NAME             VARCHAR2(255)     NOT NULL,
    DESCRIPTION      VARCHAR2(1024)    NOT NULL,
    CONSTRAINT PK120 PRIMARY KEY (NP_KINGDOM_ID)
)
;

-- 
-- TABLE: NP_PART_DESCRIPTION 
--

CREATE TABLE NP_PART_DESCRIPTION(
    PRODUCT_PART_ID    NUMBER(10, 0)     NOT NULL,
    DESCRIPTION        VARCHAR2(1024)    NOT NULL,
    PART_CODE          VARCHAR2(255),
    NATURAL_CLAIM      NUMBER(1, 0)       DEFAULT 0 NOT NULL,
    CONSTRAINT PK30_1 PRIMARY KEY (PRODUCT_PART_ID)
)
;

-- 
-- TABLE: NP_PART_EVIDENCE 
--

CREATE TABLE NP_PART_EVIDENCE(
    PRODUCT_PART_ID         NUMBER(10, 0)    NOT NULL,
    DETAILS                 CLOB             NOT NULL,
    DOCUMENT_GROUP_ID       NUMBER(10, 0),
    NP_EVIDENCE_CLASS_ID    NUMBER(10, 0)    NOT NULL,
    NP_EVIDENCE_TYPE_ID     NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK116 PRIMARY KEY (PRODUCT_PART_ID)
)
;

-- 
-- TABLE: NP_PP_GROUP_MEMBER 
--

CREATE TABLE NP_PP_GROUP_MEMBER(
    NP_PRODUCTION_PROCESS_ID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK125 PRIMARY KEY (NP_PRODUCTION_PROCESS_ID)
)
;

-- 
-- TABLE: NP_PRODUCT_ANSWERS 
--

CREATE TABLE NP_PRODUCT_ANSWERS(
    PRODUCT_ID    NUMBER(10, 0)    NOT NULL,
    NOTE          CLOB,
    CONSTRAINT PK56_1 PRIMARY KEY (PRODUCT_ID)
)
;

-- 
-- TABLE: NP_PRODUCTION_PROCESS 
--

CREATE TABLE NP_PRODUCTION_PROCESS(
    NP_PRODUCTION_PROCESS_ID    NUMBER(10, 0)     NOT NULL,
    NAME                        VARCHAR2(255)     NOT NULL,
    DESCRIPTION                 VARCHAR2(1024),
    CONSTRAINT PK117 PRIMARY KEY (NP_PRODUCTION_PROCESS_ID)
)
;

-- 
-- TABLE: NP_PRODUCTION_PROCESS_GROUP 
--

CREATE TABLE NP_PRODUCTION_PROCESS_GROUP(
    NP_PRODUCTION_PROCESS_ID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK117_1 PRIMARY KEY (NP_PRODUCTION_PROCESS_ID)
)
;

-- 
-- TABLE: NP_COMPONENT_DESCRIPTION 
--

ALTER TABLE NP_COMPONENT_DESCRIPTION ADD CONSTRAINT RefCOUNTRY193 
    FOREIGN KEY (COUNTRY_OF_ORIGIN)
    REFERENCES COUNTRY(COUNTRY_CODE)
;

ALTER TABLE NP_COMPONENT_DESCRIPTION ADD CONSTRAINT RefNP_KINGDOM194 
    FOREIGN KEY (NP_KINGDOM_ID)
    REFERENCES NP_KINGDOM(NP_KINGDOM_ID)
;

ALTER TABLE NP_COMPONENT_DESCRIPTION ADD CONSTRAINT RefNP_PRODUCTION_PROCESS_GR195 
    FOREIGN KEY (NP_PRODUCTION_PROCESS_ID)
    REFERENCES NP_PRODUCTION_PROCESS_GROUP(NP_PRODUCTION_PROCESS_ID)
;

ALTER TABLE NP_COMPONENT_DESCRIPTION ADD CONSTRAINT RefPRODUCT_PART196 
    FOREIGN KEY (PRODUCT_PART_ID)
    REFERENCES PRODUCT_PART(PRODUCT_PART_ID)
;


-- 
-- TABLE: NP_PART_DESCRIPTION 
--

ALTER TABLE NP_PART_DESCRIPTION ADD CONSTRAINT RefPRODUCT_PART197 
    FOREIGN KEY (PRODUCT_PART_ID)
    REFERENCES PRODUCT_PART(PRODUCT_PART_ID)
;


-- 
-- TABLE: NP_PART_EVIDENCE 
--

ALTER TABLE NP_PART_EVIDENCE ADD CONSTRAINT RefPRODUCT_PART198 
    FOREIGN KEY (PRODUCT_PART_ID)
    REFERENCES PRODUCT_PART(PRODUCT_PART_ID)
;

ALTER TABLE NP_PART_EVIDENCE ADD CONSTRAINT RefNP_EVIDENCE_CLASS199 
    FOREIGN KEY (NP_EVIDENCE_CLASS_ID)
    REFERENCES NP_EVIDENCE_CLASS(NP_EVIDENCE_CLASS_ID)
;

ALTER TABLE NP_PART_EVIDENCE ADD CONSTRAINT RefNP_EVIDENCE_TYPE200 
    FOREIGN KEY (NP_EVIDENCE_TYPE_ID)
    REFERENCES NP_EVIDENCE_TYPE(NP_EVIDENCE_TYPE_ID)
;

ALTER TABLE NP_PART_EVIDENCE ADD CONSTRAINT RefDOCUMENT_GROUP201 
    FOREIGN KEY (DOCUMENT_GROUP_ID)
    REFERENCES DOCUMENT_GROUP(DOCUMENT_GROUP_ID)
;


-- 
-- TABLE: NP_PP_GROUP_MEMBER 
--

ALTER TABLE NP_PP_GROUP_MEMBER ADD CONSTRAINT RefNP_PRODUCTION_PROCESS202 
    FOREIGN KEY (NP_PRODUCTION_PROCESS_ID)
    REFERENCES NP_PRODUCTION_PROCESS(NP_PRODUCTION_PROCESS_ID)
;

ALTER TABLE NP_PP_GROUP_MEMBER ADD CONSTRAINT RefNP_PRODUCTION_PROCESS_GR203 
    FOREIGN KEY (NP_PRODUCTION_PROCESS_ID)
    REFERENCES NP_PRODUCTION_PROCESS_GROUP(NP_PRODUCTION_PROCESS_ID)
;


-- 
-- TABLE: NP_PRODUCT_ANSWERS 
--

ALTER TABLE NP_PRODUCT_ANSWERS ADD CONSTRAINT RefALL_PRODUCT204 
    FOREIGN KEY (PRODUCT_ID)
    REFERENCES ALL_PRODUCT(PRODUCT_ID)
;

------------------------------------

UPDATE supplier.version SET db_version = :version;
COMMIT;

PROMPT
PROMPT ================== UPDATED OK ========================
EXIT