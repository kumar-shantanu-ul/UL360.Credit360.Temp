-- Please update version.sql too -- this keeps clean builds in sync
define version=105
@update_header

VARIABLE version NUMBER
BEGIN :version := 105; END; -- CHANGE THIS TO MATCH VERSION NUMBER
/

DROP TABLE DELIVERABLE CASCADE CONSTRAINTS;
DROP TABLE PROGRESSION_METHOD CASCADE CONSTRAINTS;
DROP TABLE APPROVAL_STEP_MILESTONE CASCADE CONSTRAINTS;
DROP TABLE MILESTONE_ISSUE CASCADE CONSTRAINTS;
DROP TABLE ISSUE CASCADE CONSTRAINTS;
DROP TABLE ISSUE_LOG CASCADE CONSTRAINTS;
DROP TABLE ISSUE_LOG_READ CASCADE CONSTRAINTS;
DROP TABLE ISSUE_LOG_ALERT_BATCH CASCADE CONSTRAINTS;
DROP TABLE ISSUE_PENDING_VAL CASCADE CONSTRAINTS;
DROP TABLE ISSUE_USER CASCADE CONSTRAINTS;
DROP TABLE ISSUE_LOG_ALERT_BATCH;
DROP TABLE ISSUE_LOG_ALERT_BATCH_RUN;
DROP TABLE MILESTONE CASCADE CONSTRAINTS;

DROP SEQUENCE ISSUE_LOG_ID_SEQ;
DROP SEQUENCE ISSUE_ID_SEQ;
DROP SEQUENCE ISSUE_URL_ID_SEQ;


WHENEVER SQLERROR EXIT SQL.SQLCODE
DECLARE
	v_version	version.db_version%TYPE;
BEGIN
	SELECT db_version INTO v_version FROM version;
	IF v_version >= :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' HAS ALREADY BEEN APPLIED =======');
	END IF;
	IF v_version + 1 <> :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' CANNOT BE APPLIED TO A DATABASE OF VERSION '||v_version||' =======');
	END IF;
END;
/




-- 
-- SEQUENCE: ISSUE_ID_SEQ 
--

CREATE SEQUENCE ISSUE_ID_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;

-- 
-- SEQUENCE: ISSUE_LOG_ID_SEQ 
--

CREATE SEQUENCE ISSUE_LOG_ID_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;

-- 
-- SEQUENCE: ISSUE_URL_ID_SEQ 
--

CREATE SEQUENCE ISSUE_URL_ID_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;

-- 
-- TABLE: APPROVAL_STEP_MILESTONE 
--

CREATE TABLE APPROVAL_STEP_MILESTONE(
    APPROVAL_STEP_ID    NUMBER(10, 0)    NOT NULL,
    MILESTONE_SID       NUMBER(10, 0),
    CONSTRAINT PK_APPROVAL_STEP_MILESTONE PRIMARY KEY (APPROVAL_STEP_ID)
)
;



-- 
-- TABLE: DELIVERABLE 
--

CREATE TABLE DELIVERABLE(
    DELIVERABLE_SID         NUMBER(10, 0)    NOT NULL,
    LABEL                   VARCHAR2(255)    NOT NULL,
    CSR_ROOT_SID            NUMBER(10, 0),
    PERIOD_START_DTM        DATE             NOT NULL,
    PERIOD_END_DTM          DATE             NOT NULL,
    ACTIVE_MILESTONE_SID    NUMBER(10, 0),
    CONSTRAINT PK_DELIVERABLE PRIMARY KEY (DELIVERABLE_SID)
)
;



-- 
-- TABLE: ISSUE 
--

CREATE TABLE ISSUE(
    ISSUE_ID                NUMBER(10, 0)    NOT NULL,
    DELIVERABLE_SID         NUMBER(10, 0),
    LABEL                   VARCHAR2(255)    NOT NULL,
    RAISED_BY_USER_SID      NUMBER(10, 0)    NOT NULL,
    RAISED_DTM              DATE             NOT NULL,
    RESOLVED_BY_USER_SID    NUMBER(10, 0),
    RESOLVED_DTM            DATE,
    NOTE                    CLOB,
    CONSTRAINT PK_ISSUE PRIMARY KEY (ISSUE_ID),
    UNIQUE (ISSUE_ID, DELIVERABLE_SID)
)
;



-- 
-- TABLE: ISSUE_LOG 
--

CREATE TABLE ISSUE_LOG(
    ISSUE_LOG_ID           NUMBER(10, 0)     NOT NULL,
    ISSUE_ID               NUMBER(10, 0),
    MESSAGE                VARCHAR2(2047)    NOT NULL,
    LOGGED_BY_USER_SID     NUMBER(10, 0)     NOT NULL,
    LOGGED_DTM             DATE               DEFAULT SYSDATE NOT NULL,
    IS_SYSTEM_GENERATED    NUMBER(1, 0)       DEFAULT 0 NOT NULL,
    CONSTRAINT PK_ISSUE_LOG PRIMARY KEY (ISSUE_LOG_ID)
)
;



-- 
-- TABLE: ISSUE_LOG_ALERT_BATCH 
--

CREATE TABLE ISSUE_LOG_ALERT_BATCH(
    CSR_ROOT_SID    NUMBER(10, 0)    NOT NULL,
    RUN_AT          TIMESTAMP(6)     NOT NULL,
    CONSTRAINT PK_ISSUE_LOG_ALERT_BATCH PRIMARY KEY (CSR_ROOT_SID)
)
;



-- 
-- TABLE: ISSUE_LOG_ALERT_BATCH_RUN 
--

CREATE TABLE ISSUE_LOG_ALERT_BATCH_RUN(
    CSR_ROOT_SID    NUMBER(10, 0)    NOT NULL,
    LAST_RAN_AT     DATE             NOT NULL,
    CONSTRAINT PK_ISSUE_LOG_ALERT_BATCH_RUN PRIMARY KEY (CSR_ROOT_SID)
)
;



-- 
-- TABLE: ISSUE_LOG_READ 
--

CREATE TABLE ISSUE_LOG_READ(
    ISSUE_LOG_ID    NUMBER(10, 0)    NOT NULL,
    CSR_USER_SID    NUMBER(10, 0)    NOT NULL,
    READ_DTM        TIMESTAMP(6)      DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_ISSUE_LOG_READ PRIMARY KEY (ISSUE_LOG_ID, CSR_USER_SID)
)
;



-- 
-- TABLE: ISSUE_PENDING_VAL 
--

CREATE TABLE ISSUE_PENDING_VAL(
    PENDING_IND_ID       NUMBER(10, 0)    NOT NULL,
    PENDING_REGION_ID    NUMBER(10, 0)    NOT NULL,
    PENDING_PERIOD_ID    NUMBER(10, 0)    NOT NULL,
    ISSUE_ID             NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ISSUE_PENDING_VAL PRIMARY KEY (PENDING_IND_ID, PENDING_REGION_ID, PENDING_PERIOD_ID, ISSUE_ID)
)
;



-- 
-- TABLE: ISSUE_USER 
--

CREATE TABLE ISSUE_USER(
    ISSUE_ID       NUMBER(10, 0)    NOT NULL,
    USER_SID       NUMBER(10, 0)    NOT NULL,
    IS_AN_OWNER    NUMBER(1, 0)      DEFAULT 0 NOT NULL,
    CONSTRAINT PK_ISSUE_USER PRIMARY KEY (ISSUE_ID, USER_SID)
)
;



-- 
-- TABLE: MILESTONE 
--

CREATE TABLE MILESTONE(
    MILESTONE_SID            NUMBER(10, 0)    NOT NULL,
    DELIVERABLE_SID          NUMBER(10, 0),
    LABEL                    VARCHAR2(255)    NOT NULL,
    MILESTONE_DTM            DATE             NOT NULL,
    AUTO_LOG_FLAGS           NUMBER(10, 0)     DEFAULT 0 NOT NULL,
    PROGRESSION_METHOD_ID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_MILESTONE PRIMARY KEY (MILESTONE_SID),
    UNIQUE (MILESTONE_SID, DELIVERABLE_SID)
)
;



-- 
-- TABLE: MILESTONE_ISSUE 
--

CREATE TABLE MILESTONE_ISSUE(
    MILESTONE_SID      NUMBER(10, 0)    NOT NULL,
    ISSUE_ID           NUMBER(10, 0)    NOT NULL,
    DELIVERABLE_SID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_MILESTONE_ISSUE PRIMARY KEY (MILESTONE_SID, ISSUE_ID, DELIVERABLE_SID)
)
;



-- 
-- TABLE: PROGRESSION_METHOD 
--

CREATE TABLE PROGRESSION_METHOD(
    PROGRESSION_METHOD_ID    NUMBER(10, 0)    NOT NULL,
    LABEL                    VARCHAR2(255)    NOT NULL,
    CONSTRAINT PK_PROGRESSION_METHOD PRIMARY KEY (PROGRESSION_METHOD_ID)
)
;



-- 
-- TABLE: APPROVAL_STEP_MILESTONE 
--

ALTER TABLE APPROVAL_STEP_MILESTONE ADD CONSTRAINT FK_AP_MILESTONE_AP 
    FOREIGN KEY (APPROVAL_STEP_ID)
    REFERENCES APPROVAL_STEP(APPROVAL_STEP_ID)
;

ALTER TABLE APPROVAL_STEP_MILESTONE ADD CONSTRAINT FK_MILESTONE_AP 
    FOREIGN KEY (MILESTONE_SID)
    REFERENCES MILESTONE(MILESTONE_SID)
;


-- 
-- TABLE: ISSUE 
--

ALTER TABLE ISSUE ADD CONSTRAINT FK_ISSUE_CSR_USER 
    FOREIGN KEY (RAISED_BY_USER_SID)
    REFERENCES CSR_USER(CSR_USER_SID)
;

ALTER TABLE ISSUE ADD CONSTRAINT FK_ISSUE_DELIVERABLE 
    FOREIGN KEY (DELIVERABLE_SID)
    REFERENCES DELIVERABLE(DELIVERABLE_SID)
;

ALTER TABLE ISSUE ADD CONSTRAINT FK_ISSUE_RES_CSR_USER 
    FOREIGN KEY (RESOLVED_BY_USER_SID)
    REFERENCES CSR_USER(CSR_USER_SID)
;


-- 
-- TABLE: ISSUE_LOG 
--

ALTER TABLE ISSUE_LOG ADD CONSTRAINT FK_ISSUE_LOG_CSR_USER 
    FOREIGN KEY (LOGGED_BY_USER_SID)
    REFERENCES CSR_USER(CSR_USER_SID)
;

ALTER TABLE ISSUE_LOG ADD CONSTRAINT FK_ISSUE_LOG_ISSUE 
    FOREIGN KEY (ISSUE_ID)
    REFERENCES ISSUE(ISSUE_ID)
;


-- 
-- TABLE: ISSUE_LOG_ALERT_BATCH 
--

ALTER TABLE ISSUE_LOG_ALERT_BATCH ADD CONSTRAINT RefCUSTOMER78 
    FOREIGN KEY (CSR_ROOT_SID)
    REFERENCES CUSTOMER(CSR_ROOT_SID)
;


-- 
-- TABLE: ISSUE_LOG_ALERT_BATCH_RUN 
--

ALTER TABLE ISSUE_LOG_ALERT_BATCH_RUN ADD CONSTRAINT RefCUSTOMER80 
    FOREIGN KEY (CSR_ROOT_SID)
    REFERENCES CUSTOMER(CSR_ROOT_SID)
;


-- 
-- TABLE: ISSUE_LOG_READ 
--

ALTER TABLE ISSUE_LOG_READ ADD CONSTRAINT RefCSR_USER75 
    FOREIGN KEY (CSR_USER_SID)
    REFERENCES CSR_USER(CSR_USER_SID)
;

ALTER TABLE ISSUE_LOG_READ ADD CONSTRAINT RefISSUE_LOG76 
    FOREIGN KEY (ISSUE_LOG_ID)
    REFERENCES ISSUE_LOG(ISSUE_LOG_ID)
;


-- 
-- TABLE: ISSUE_PENDING_VAL 
--

ALTER TABLE ISSUE_PENDING_VAL ADD CONSTRAINT FK_ISSUE_PEND_PENDING 
    FOREIGN KEY (PENDING_IND_ID)
    REFERENCES PENDING_IND(PENDING_IND_ID)
;

ALTER TABLE ISSUE_PENDING_VAL ADD CONSTRAINT FK_ISSUE_PEND_PERIOD 
    FOREIGN KEY (PENDING_PERIOD_ID)
    REFERENCES PENDING_PERIOD(PENDING_PERIOD_ID)
;

ALTER TABLE ISSUE_PENDING_VAL ADD CONSTRAINT FK_ISSUE_PEND_REGION 
    FOREIGN KEY (PENDING_REGION_ID)
    REFERENCES PENDING_REGION(PENDING_REGION_ID)
;

ALTER TABLE ISSUE_PENDING_VAL ADD CONSTRAINT FK_ISSUE_PENDVAL_ISSUE 
    FOREIGN KEY (ISSUE_ID)
    REFERENCES ISSUE(ISSUE_ID)
;


-- 
-- TABLE: ISSUE_USER 
--

ALTER TABLE ISSUE_USER ADD CONSTRAINT FK_ISSUE_USER_CSR_USER 
    FOREIGN KEY (USER_SID)
    REFERENCES CSR_USER(CSR_USER_SID)
;

ALTER TABLE ISSUE_USER ADD CONSTRAINT FK_ISSUE_USER_ISSUE 
    FOREIGN KEY (ISSUE_ID)
    REFERENCES ISSUE(ISSUE_ID)
;


-- 
-- TABLE: MILESTONE 
--

ALTER TABLE MILESTONE ADD CONSTRAINT FK_MILESTONE_DELIVERABLE 
    FOREIGN KEY (DELIVERABLE_SID)
    REFERENCES DELIVERABLE(DELIVERABLE_SID)
;

ALTER TABLE MILESTONE ADD CONSTRAINT FK_MILESTONE_PROG_METH 
    FOREIGN KEY (PROGRESSION_METHOD_ID)
    REFERENCES PROGRESSION_METHOD(PROGRESSION_METHOD_ID)
;


-- 
-- TABLE: MILESTONE_ISSUE 
--

ALTER TABLE MILESTONE_ISSUE ADD CONSTRAINT FK_ISSUE_MILE_ISSUE 
    FOREIGN KEY (ISSUE_ID, DELIVERABLE_SID)
    REFERENCES ISSUE(ISSUE_ID, DELIVERABLE_SID)
;

ALTER TABLE MILESTONE_ISSUE ADD CONSTRAINT FK_MILE_ISS_MILESTONE 
    FOREIGN KEY (MILESTONE_SID, DELIVERABLE_SID)
    REFERENCES MILESTONE(MILESTONE_SID, DELIVERABLE_SID)
;

CREATE OR REPLACE VIEW v$issue_pending AS
	SELECT milestone_sid, pending_region_id, pending_ind_id, mi.deliverable_sid, approval_step_id, i.issue_id, resolved_dtm 
	  FROM issue_pending_val v, 
		(SELECT aps.approval_step_id, p.pending_period_id
		   FROM approval_step aps, pending_period p
		  WHERE aps.pending_dataset_id = p.pending_dataset_id) p,
		milestone_issue mi, issue i
	 WHERE p.pending_period_id = v.pending_period_id AND 
		 mi.issue_id = v.issue_id AND
		 mi.issue_id = i.issue_id;

create or replace view v$issue_log_alert_batch as
  select ilab.csr_root_sid, ilab.run_at, ilabr.last_ran_at
    from issue_log_alert_batch ilab, issue_log_alert_batch_run ilabr
   where ilab.csr_root_sid = ilabr.csr_root_sid;



DECLARE
	new_class_id 	security_pkg.T_SID_ID;
	v_act 			security_pkg.T_ACT_ID;
	v_attribute_id	security_pkg.T_ATTRIBUTE_ID;
BEGIN
	user_pkg.LogonAuthenticated(security_pkg.SID_BUILTIN_ADMINISTRATOR, NULL, v_ACT);	
	-- create deliverable class
	BEGIN	
		class_pkg.CreateClass(v_act, null, 'CSRDeliverable', 'csr.deliverable_pkg', null, new_class_id);
	EXCEPTION
		WHEN security_pkg.DUPLICATE_OBJECT_NAME THEN
			new_class_id:=class_pkg.GetClassId('CSRDeliverable');
	END;	
	-- create milestone class 
	BEGIN	
		class_pkg.CreateClass(v_act, null, 'CSRMilestone', 'csr.milestone_pkg', null, new_class_id);
	EXCEPTION
		WHEN security_pkg.DUPLICATE_OBJECT_NAME THEN
			new_class_id:=class_pkg.GetClassId('CSRMilestone');
	END;	
	user_pkg.LOGOFF(v_ACT);
END;
/
commit;







UPDATE csr.version SET db_version = :version;
COMMIT;

PROMPT
PROMPT ================== UPDATED OK ========================
EXIT



@update_tail
