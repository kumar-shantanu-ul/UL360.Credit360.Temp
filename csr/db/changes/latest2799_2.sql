-- Please update version.sql too -- this keeps clean builds in sync
define version=2799
define minor_version=2
define is_combined=0
@update_header

-- *** DDL ***
-- Create tables
CREATE TABLE CSRIMP.METER_DATA_PRIORITY(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRIORITY				NUMBER(10, 0)		NOT NULL,
	LABEL					VARCHAR2(1024)		NOT NULL,
	LOOKUP_KEY				VARCHAR2(256),
	IS_INPUT				NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	IS_OUTPUT				NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	IS_PATCH				NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	IS_AUTO_PATCH			NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	CHECK (IS_INPUT IN(0,1)),
	CHECK (IS_OUTPUT IN(0,1)),
	CHECK (IS_PATCH IN(0,1)),
	CHECK (IS_AUTO_PATCH IN(0,1)),
	CONSTRAINT PK_METER_DATA_PRIORITY PRIMARY KEY (CSRIMP_SESSION_ID, PRIORITY),
	CONSTRAINT FK_METER_DATA_PRIORITY FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

CREATE TABLE CSRIMP.METER_PATCH_DATA(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	REGION_SID				NUMBER(10, 0)		NOT NULL,
	METER_INPUT_ID			NUMBER(10, 0)		NOT NULL,
	PRIORITY				NUMBER(10, 0)		NOT NULL,
	START_DTM				DATE				NOT NULL,
	END_DTM					DATE				NOT NULL,
	CONSUMPTION				NUMBER(24, 10),
	UPDATED_DTM				DATE				DEFAULT SYSDATE NOT NULL,
	CONSTRAINT PK_METER_PATCH_DATA PRIMARY KEY (CSRIMP_SESSION_ID, REGION_SID, METER_INPUT_ID, PRIORITY, START_DTM),
	CONSTRAINT FK_METER_PATCH_DATA FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

CREATE TABLE CSRIMP.METER_INPUT(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	METER_INPUT_ID			NUMBER(10, 0)		NOT NULL,
	LABEL					VARCHAR2(1024)		NOT NULL,
	LOOKUP_KEY				VARCHAR2(256)		NOT NULL,
	IS_CONSUMPTION_BASED	NUMBER(1, 0)		DEFAULT 1 NOT NULL,
	PATCH_HELPER			VARCHAR2(256),
	GAP_FINDER				VARCHAR2(256),
	CHECK (IS_CONSUMPTION_BASED IN(0,1)),
	CONSTRAINT PK_METER_INPUT PRIMARY KEY (CSRIMP_SESSION_ID, METER_INPUT_ID),
	CONSTRAINT FK_METER_INPUT FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);
CREATE UNIQUE INDEX CSRIMP.UK_INPUT_LOOKUP_KEY ON CSRIMP.METER_INPUT(CSRIMP_SESSION_ID, LOOKUP_KEY);

CREATE TABLE CSRIMP.METER_INPUT_AGGR_IND(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	REGION_SID				NUMBER(10, 0)		NOT NULL,
	METER_INPUT_ID			NUMBER(10, 0)		NOT NULL,
	AGGREGATOR				VARCHAR2(32)		NOT NULL,
	IND_SID					NUMBER(10, 0),
	MEASURE_SID				NUMBER(10, 0),
	MEASURE_CONVERSION_ID	NUMBER(10, 0),
	CONSTRAINT PK_METER_INPUT_AGGR_IND PRIMARY KEY (CSRIMP_SESSION_ID, REGION_SID, METER_INPUT_ID, AGGREGATOR),
	CONSTRAINT FK_METER_INPUT_AGGR_IND FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

CREATE TABLE CSRIMP.METER_INPUT_AGGREGATOR(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	METER_INPUT_ID			NUMBER(10, 0)		NOT NULL,
	AGGREGATOR				VARCHAR2(32)		NOT NULL,
	AGGR_PROC				VARCHAR2(256),
	CONSTRAINT PK_METER_INPUT_AGGREGATOR PRIMARY KEY (CSRIMP_SESSION_ID, METER_INPUT_ID, AGGREGATOR),
	CONSTRAINT FK_METER_INPUT_AGGREGATOR FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

CREATE TABLE CSRIMP.METER_PATCH_JOB(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	REGION_SID				NUMBER(10, 0)		NOT NULL,
	METER_INPUT_ID			NUMBER(10, 0)		NOT NULL,
	START_DTM				DATE				NOT NULL,
	END_DTM					DATE				NOT NULL,
	CREATED_DTM				DATE				DEFAULT SYSDATE NOT NULL,
	CONSTRAINT PK_METER_PATCH_JOB PRIMARY KEY (CSRIMP_SESSION_ID, REGION_SID, METER_INPUT_ID),
	CONSTRAINT FK_METER_PATCH_JOB FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

CREATE TABLE CSRIMP.METER_PATCH_BATCH_JOB(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	BATCH_JOB_ID			NUMBER(10, 0)		NOT NULL,
	REGION_SID				NUMBER(10, 0)		NOT NULL,
	IS_REMOVE				NUMBER(1, 0)		DEFAULT 0,
	CREATED_DTM				DATE				DEFAULT SYSDATE NOT NULL,
	CHECK(IS_REMOVE IN (0,1)),
	CONSTRAINT PK_METER_PATCH_BATCH_JOB PRIMARY KEY (CSRIMP_SESSION_ID, BATCH_JOB_ID),
	CONSTRAINT FK_METER_PATCH_BATCH_JOB FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

CREATE TABLE CSRIMP.METER_PATCH_BATCH_DATA(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	BATCH_JOB_ID			NUMBER(10, 0)		NOT NULL,
	METER_INPUT_ID			NUMBER(10, 0)		NOT NULL,
	PRIORITY				NUMBER(10, 0)		NOT NULL,
	START_DTM				DATE				NOT NULL,
	END_DTM					DATE				NOT NULL,
	PERIOD_TYPE				VARCHAR2(32),
	CONSUMPTION				NUMBER(24, 10),
	CONSTRAINT PK_METER_PATCH_BATCH_DATA PRIMARY KEY (CSRIMP_SESSION_ID, BATCH_JOB_ID, METER_INPUT_ID, PRIORITY, START_DTM),
	CONSTRAINT FK_METER_PATCH_BATCH_DATA FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

CREATE TABLE CSRIMP.METER_DATA_COVERAGE_IND(
	CSRIMP_SESSION_ID		NUMBER(10)			DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	METER_INPUT_ID			NUMBER(10, 0)		NOT NULL,
	PRIORITY				NUMBER(10, 0)		NOT NULL,
	IND_SID					NUMBER(10, 0)		NOT NULL,
	CONSTRAINT PK_METER_DATA_COVERAGE_IND PRIMARY KEY (CSRIMP_SESSION_ID, METER_INPUT_ID, PRIORITY),
	CONSTRAINT FK_METER_DATA_COVERAGE_IND FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);

-- Alter tables
ALTER TABLE CSRIMP.LIVE_DATA_DURATION RENAME TO METER_BUCKET;
ALTER TABLE CSRIMP.METER_BUCKET RENAME COLUMN IS_SYSTEM_PERIOD TO IS_EXPORT_PERIOD;
ALTER TABLE CSRIMP.METER_BUCKET RENAME COLUMN LIVE_DATA_DURATION_ID TO METER_BUCKET_ID;
ALTER TABLE CSRIMP.METER_LIVE_DATA RENAME COLUMN LIVE_DATA_DURATION_ID TO METER_BUCKET_ID;

DECLARE
	v_cons_name				VARCHAR2(30);
BEGIN
	-- Replace check constraints
	FOR r IN (
		SELECT constraint_name
		  FROM all_constraints
		 WHERE owner = 'CSRIMP'
		   AND table_name = 'METER_BUCKET'
		   AND constraint_type = 'C'
	) LOOP
		EXECUTE IMMEDIATE('ALTER TABLE CSRIMP.METER_BUCKET DROP CONSTRAINT  '||r.constraint_name);
	END LOOP;
END;
/

ALTER TABLE CSRIMP.METER_BUCKET ADD(
	PERIOD_SET_ID			NUMBER(10),
	PERIOD_INTERVAL_ID		NUMBER(10),
	IS_MINUTES				NUMBER(1),
	HIGH_RESOLUTION_ONLY	NUMBER(1) DEFAULT 0 NOT NULL,
	CHECK (IS_HOURS = 0 OR (IS_HOURS  = 1 AND IS_MINUTES = 0 AND IS_WEEKS = 0 AND IS_MONTHS = 0 AND PERIOD_SET_ID IS NULL AND PERIOD_INTERVAL_ID IS NULL)),
	CHECK (IS_WEEKS = 0 OR (IS_WEEKS = 1 AND IS_MINUTES = 0 AND IS_HOURS = 0 AND IS_MONTHS = 0 AND PERIOD_SET_ID IS NULL AND PERIOD_INTERVAL_ID IS NULL)),
	CHECK (IS_MINUTES = 0 OR (IS_MINUTES  = 1 AND IS_HOURS = 0 AND IS_WEEKS = 0 AND IS_MONTHS = 0 AND PERIOD_SET_ID IS NULL AND PERIOD_INTERVAL_ID IS NULL)),
	CHECK (WEEK_START_DAY IS NULL OR IS_WEEKS = 1),
	CHECK (START_MONTH IS NULL OR IS_MONTHS = 1),
	CHECK ((PERIOD_SET_ID IS NULL AND PERIOD_INTERVAL_ID IS NULL) OR (PERIOD_SET_ID IS NOT NULL AND PERIOD_INTERVAL_ID IS NOT NULL AND IS_MINUTES = 0 AND IS_HOURS = 0 AND IS_WEEKS = 0)),
	CHECK (HIGH_RESOLUTION_ONLY IN (0,1))
);

BEGIN
	-- All export buckets must have period set and interval
	UPDATE csrimp.meter_bucket
	   SET period_set_id = 1,
	       period_interval_id = 1
	 WHERE is_export_period = 1
	   AND period_set_id IS NULL;
END;
/

ALTER TABLE CSRIMP.METER_BUCKET ADD(
	CHECK (IS_MONTHS = 0 OR (IS_MONTHS = 1 AND IS_MINUTES = 0 AND IS_HOURS = 0 AND IS_WEEKS = 0 AND (IS_EXPORT_PERIOD = 0 OR (PERIOD_SET_ID = 1 AND PERIOD_INTERVAL_ID = 1)))),
	CHECK (IS_EXPORT_PERIOD IN (0,1) AND (IS_EXPORT_PERIOD = 0 OR (PERIOD_SET_ID IS NOT NULL AND PERIOD_INTERVAL_ID IS NOT NULL)))
);

ALTER TABLE CSRIMP.MAP_LIVE_DATA_DURATION RENAME TO MAP_METER_BUCKET;
ALTER TABLE CSRIMP.MAP_METER_BUCKET RENAME COLUMN OLD_LIVE_DATA_DURATION_ID TO OLD_METER_BUCKET_ID;
ALTER TABLE CSRIMP.MAP_METER_BUCKET RENAME COLUMN NEW_LIVE_DATA_DURATION_ID TO NEW_METER_BUCKET_ID;

ALTER TABLE CSRIMP.METER_ORPHAN_DATA ADD(
	METER_INPUT_ID			NUMBER(10, 0)	NOT NULL,
	PRIORITY				NUMBER(10, 0)	NOT NULL
);
--DROP INDEX CSRIMP.UK_METER_ORPHAN_DATA;
CREATE UNIQUE INDEX CSRIMP.UK_METER_ORPHAN_DATA ON CSRIMP.METER_ORPHAN_DATA(CSRIMP_SESSION_ID, SERIAL_ID, METER_INPUT_ID, PRIORITY, START_DTM);

ALTER TABLE CSRIMP.METER_READING_DATA ADD(
	METER_INPUT_ID			NUMBER(10, 0)	NOT NULL,
	PRIORITY				NUMBER(10, 0)	NOT NULL
);
--DROP INDEX CSRIMP.UK_METER_READING_DATA;
CREATE UNIQUE INDEX CSRIMP.UK_METER_READING_DATA ON CSRIMP.METER_READING_DATA(CSRIMP_SESSION_ID, REGION_SID, METER_INPUT_ID, PRIORITY, READING_DTM);


ALTER TABLE CSRIMP.METER_SOURCE_DATA ADD(
	METER_INPUT_ID			NUMBER(10, 0)	NOT NULL,
	PRIORITY				NUMBER(10, 0)	NOT NULL
);
--DROP INDEX CSRIMP.UK_METER_SOURCE_DATA;
CREATE UNIQUE INDEX CSRIMP.UK_METER_SOURCE_DATA ON CSRIMP.METER_SOURCE_DATA(CSRIMP_SESSION_ID, REGION_SID, METER_INPUT_ID, PRIORITY, START_DTM);


BEGIN
	-- Remove existing PK
	FOR r IN (
		SELECT constraint_name
		  FROM all_constraints
		 WHERE owner = 'CSRIMP'
		   AND table_name = 'METER_LIVE_DATA'
		   AND constraint_type = 'P'
	) LOOP
		EXECUTE IMMEDIATE('ALTER TABLE CSRIMP.METER_LIVE_DATA DROP CONSTRAINT  '||r.constraint_name);
	END LOOP;
END;
/
--DROP INDEX CSRIMP.PK_METER_LIVE_DATA;
ALTER TABLE CSRIMP.METER_LIVE_DATA ADD(
	METER_INPUT_ID			NUMBER(10, 0)	NOT NULL,
	AGGREGATOR				VARCHAR2(32)	NOT NULL,
	PRIORITY				NUMBER(10)		NOT NULL
);
ALTER TABLE CSRIMP.METER_LIVE_DATA ADD(
	CONSTRAINT PK_METER_LIVE_DATA PRIMARY KEY (CSRIMP_SESSION_ID, REGION_SID, METER_BUCKET_ID, METER_INPUT_ID, AGGREGATOR, PRIORITY, START_DTM)
);

ALTER TABLE CSRIMP.METER_READING_DATA ADD (
	VAL						NUMBER(24, 10)
);


ALTER TABLE CSRIMP.METER_ALARM_STATISTIC ADD (
	METER_INPUT_ID			NUMBER(10, 0)	NOT NULL,
	AGGREGATOR				VARCHAR2(32)	NOT NULL,
	METER_BUCKET_ID			NUMBER(10, 0)	NOT NULL,
	LOOKUP_KEY				VARCHAR2(256)
);
CREATE UNIQUE INDEX CSRIMP.UK_LOOKUP_KEY ON CSRIMP.METER_ALARM_STATISTIC(CSRIMP_SESSION_ID, NVL(LOOKUP_KEY, STATISTIC_ID));

ALTER TABLE CSRIMP.METER_ALARM_STATISTIC_JOB ADD (
	START_DTM				DATE	NOT NULL,
	END_DTM					DATE	NOT NULL
);

ALTER TABLE CSRIMP.METER_SOURCE_TYPE ADD (
	AUTO_PATCH				NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	CHECK (AUTO_PATCH IN(0,1))
);


-- *** Grants ***
GRANT SELECT ON CSR.METER_BUCKET_ID_SEQ TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_DATA_PRIORITY TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_PATCH_DATA TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_INPUT TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_INPUT_AGGR_IND TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_INPUT_AGGREGATOR TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_PATCH_JOB TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_PATCH_BATCH_JOB TO CSRIMP;
GRANT SELECT,INSERT,UPDATE ON CSR.METER_DATA_COVERAGE_IND TO CSRIMP;

GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_DATA_PRIORITY TO WEB_USER;
GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_PATCH_DATA TO WEB_USER;
GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_INPUT TO WEB_USER;
GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_INPUT_AGGR_IND TO WEB_USER;
GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_INPUT_AGGREGATOR TO WEB_USER;
GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_PATCH_JOB TO WEB_USER;
GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_PATCH_BATCH_JOB TO WEB_USER;
GRANT SELECT,INSERT,UPDATE,DELETE ON CSRIMP.METER_DATA_COVERAGE_IND TO WEB_USER;

-- ** Cross schema constraints ***

-- *** Views ***
-- Please add the path to the create_views file which will contain your view changes.  I will use this version when making the major scripts.

-- *** Data changes ***
-- RLS
DECLARE
	FEATURE_NOT_ENABLED EXCEPTION;
	PRAGMA EXCEPTION_INIT(FEATURE_NOT_ENABLED, -439);
    POLICY_ALREADY_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT(POLICY_ALREADY_EXISTS, -28101);
BEGIN
 	FOR r IN (
		SELECT c.owner, c.table_name, c.nullable, (SUBSTR(c.table_name, 1, 26) || '_POL') policy_name
		  FROM all_tables t
		  JOIN all_tab_columns c ON t.owner = c.owner AND t.table_name = c.table_name
		 WHERE t.owner IN ('CSRIMP') AND (t.dropped = 'NO' OR t.dropped IS NULL) AND c.column_name = 'CSRIMP_SESSION_ID'
		   AND t.table_name IN (
				'METER_INPUT',
				'METER_AGGREGATOR',
				'METER_INPUT_AGGREGATOR',
				'METER_INPUT_AGGR_IND',
				'METER_DATA_PRIORITY',
				'METER_PATCH_DATA',
				'METER_PATCH_JOB',
				'METER_PATCH_BATCH_JOB',
				'METER_PATCH_BATCH_DATA',
				'METER_DATA_COVERAGE_IND'
		   )
 	)
 	LOOP
		dbms_output.put_line('Writing policy '||r.policy_name);
		dbms_rls.add_policy(
			object_schema   => r.owner,
			object_name     => r.table_name,
			policy_name     => r.policy_name, 
			function_schema => 'CSRIMP',
			policy_function => 'SessionIDCheck',
			statement_types => 'select, insert, update, delete',
			update_check	=> true,
			policy_type     => dbms_rls.context_sensitive);
	END LOOP;
EXCEPTION
	WHEN POLICY_ALREADY_EXISTS THEN
		DBMS_OUTPUT.PUT_LINE('Policy exists');
	WHEN FEATURE_NOT_ENABLED THEN
		DBMS_OUTPUT.PUT_LINE('RLS policies not applied as feature not enabled');
END;
/

-- Data

-- ** New package grants **


-- *** Packages ***
@../schema_pkg

@../schema_body
@../csrimp/imp_body

@update_tail
