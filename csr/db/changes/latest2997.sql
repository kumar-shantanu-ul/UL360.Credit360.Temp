define version=2997
define minor_version=0
define is_combined=1
@update_header

-- clean out junk in csrimp
begin
for r in (select table_name from all_tables where owner='CSRIMP' and table_name!='CSRIMP_SESSION') loop
execute immediate 'truncate table csrimp.'||r.table_name;
end loop;
delete from csrimp.csrimp_session;
commit;
end;
/
CREATE TABLE CSR.INTERNAL_AUDIT_TYPE_REPORT (
	APP_SID 						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	INTERNAL_AUDIT_TYPE_ID 			NUMBER(10) NOT NULL,
	INTERNAL_AUDIT_TYPE_REPORT_ID 	NUMBER(10) NOT NULL,
	WORD_DOC						BLOB NOT NULL,
	REPORT_FILENAME					VARCHAR(255) NOT NULL,
	LABEL 							VARCHAR(255) NOT NULL,
	CONSTRAINT PK_AUDIT_TYPE_REPORT PRIMARY KEY (APP_SID, INTERNAL_AUDIT_TYPE_REPORT_ID),
	CONSTRAINT UK_AUDIT_TYPE_REPORT_LABEL UNIQUE (APP_SID, INTERNAL_AUDIT_TYPE_ID, LABEL),
	CONSTRAINT FK_AUDIT_TYPE_ID FOREIGN KEY (APP_SID, INTERNAL_AUDIT_TYPE_ID) REFERENCES CSR.INTERNAL_AUDIT_TYPE (APP_SID, INTERNAL_AUDIT_TYPE_ID)
);
CREATE SEQUENCE CSR.INTERNAL_AUDIT_TYPE_REPORT_SEQ CACHE 5;
CREATE TABLE CSRIMP.INTERNAL_AUDIT_TYPE_REPORT (
    CSRIMP_SESSION_ID               NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    INTERNAL_AUDIT_TYPE_ID          NUMBER(10) NOT NULL,
    INTERNAL_AUDIT_TYPE_REPORT_ID   NUMBER(10) NOT NULL,
    WORD_DOC                        BLOB NOT NULL,
    REPORT_FILENAME                 VARCHAR(255) NOT NULL,
    LABEL 							VARCHAR(255) NOT NULL,
    CONSTRAINT PK_AUDIT_TYPE_REPORT PRIMARY KEY (CSRIMP_SESSION_ID, INTERNAL_AUDIT_TYPE_REPORT_ID),
    CONSTRAINT UK_AUDIT_TYPE_REPORT_LABEL UNIQUE (CSRIMP_SESSION_ID, INTERNAL_AUDIT_TYPE_ID, LABEL),
    CONSTRAINT FK_INTERNAL_AUDIT_TYPE_REP_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_INTERNAL_AUDIT_TYPE_REPORT (
	CSRIMP_SESSION_ID				NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_INTERNAL_AUDIT_TYPE_REP_ID		NUMBER(10)	NOT NULL,
	NEW_INTERNAL_AUDIT_TYPE_REP_ID		NUMBER(10)	NOT NULL,
	CONSTRAINT PK_MAP_INTERNAL_AUDIT_TYPE_REP PRIMARY KEY (CSRIMP_SESSION_ID, OLD_INTERNAL_AUDIT_TYPE_REP_ID) USING INDEX,
	CONSTRAINT UK_MAP_INTERNAL_AUDIT_TYPE_REP UNIQUE (CSRIMP_SESSION_ID, NEW_INTERNAL_AUDIT_TYPE_REP_ID) USING INDEX,
	CONSTRAINT FK_MAP_INTENAL_AUDIT_TYPE_REP FOREIGN KEY
		(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
		ON DELETE CASCADE
);
CREATE GLOBAL TEMPORARY TABLE chain.tt_dedupe_cms_data (
	processed_record_id				NUMBER(10) NOT NULL,
	oracle_schema					VARCHAR2(30) NOT NULL,
	source_table					VARCHAR2(30) NOT NULL,
	source_tab_sid					NUMBER(10) NOT NULL,
	source_column					VARCHAR2(30) NOT NULL,
	source_col_sid					NUMBER(10) NOT NULL,
	source_col_type					NUMBER(10) NOT NULL,
	source_data_type				VARCHAR2(255) NULL,
	destination_table				VARCHAR2(30) NOT NULL,
	destination_tab_sid				NUMBER(10) NOT NULL,
	destination_column				VARCHAR2(30) NOT NULL,
	destination_col_sid				NUMBER(10) NOT NULL,
	destination_col_type			NUMBER(10) NOT NULL,
	destination_data_type			VARCHAR2(255) NULL,
	current_str_value				VARCHAR2(4000) NULL,
	new_str_value					VARCHAR2(4000) NULL,
	current_date_value				DATE NULL,
	new_date_value					DATE NULL,
	current_desc_val				VARCHAR2(4000) NULL,
	new_raw_value					VARCHAR2(4000) NULL,
	new_translated_value			VARCHAR2(4000) NULL
) ON COMMIT DELETE ROWS;
CREATE TABLE csr.forecasting_email_sub (
	app_sid				NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	forecasting_sid		NUMBER(10, 0) NOT NULL,
	csr_user_sid		NUMBER(10, 0) NOT NULL,
	CONSTRAINT PK_FRCSTNG_EMAIL				PRIMARY KEY (APP_SID, FORECASTING_SID, CSR_USER_SID),
	CONSTRAINT FK_FRCSTNG_EMAIL_FRCSTNG_SID	FOREIGN KEY (APP_SID, FORECASTING_SID) REFERENCES CSR.FORECASTING_SLOT(APP_SID, FORECASTING_SID),
	CONSTRAINT FK_FRCSTNG_USER_SID			FOREIGN KEY (APP_SID, CSR_USER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID)
);
CREATE TABLE csrimp.forecasting_email_sub (
	csrimp_session_id		NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	forecasting_sid			NUMBER(10, 0) NOT NULL,
	csr_user_sid			NUMBER(10, 0) NOT NULL,
	CONSTRAINT PK_FRCSTNG_EMAIL				PRIMARY KEY (CSRIMP_SESSION_ID, FORECASTING_SID, CSR_USER_SID),
	CONSTRAINT FK_FRCSTNG_EMAIL_SESSION		FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_FOLDER_SEARCH_EXTENSION (
  SID_ID       			NUMBER(10, 0)	NOT NULL,
  PARENT_SID			NUMBER(10, 0)	NOT NULL,
  SEARCH_RESULT_TEXT	VARCHAR2(255)
) ON COMMIT DELETE ROWS;
GRANT REFERENCES ON mail.mailbox TO CSR;
CREATE TABLE csr.auto_imp_mailbox (
	app_sid								NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	address								VARCHAR2(255) NOT NULL,
	mailbox_sid							NUMBER(10) NOT NULL,
	body_validator_plugin				VARCHAR2(1024),
	use_full_mail_logging				NUMBER(1) DEFAULT 0 NOT NULL,
	matched_imp_class_sid_for_body		NUMBER(10),
	deactivated_dtm						DATE,
	CONSTRAINT pk_auto_imp_mailbox PRIMARY KEY (app_sid, mailbox_sid),
	CONSTRAINT fk_auto_imp_mailbox_box FOREIGN KEY (mailbox_sid) REFERENCES mail.mailbox (mailbox_sid),
	CONSTRAINT fk_auto_imp_mailbox_bdy_cls FOREIGN KEY (app_sid, matched_imp_class_sid_for_body) REFERENCES csr.automated_import_class(app_sid, automated_import_class_sid),
	CONSTRAINT ck_auto_imp_mailbox_logging CHECK (use_full_mail_logging IN (0, 1))
);
CREATE TABLE csr.auto_imp_mail_sender_filter (
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	mailbox_sid					NUMBER(10) NOT NULL,
	filter_string				VARCHAR2(1024) NOT NULL,
	is_wildcard					NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT pk_auto_imp_mail_sndr_filter PRIMARY KEY (app_sid, mailbox_sid, filter_string),
	CONSTRAINT fk_auto_imp_mail_sndr_fltr_bx FOREIGN KEY (mailbox_sid) REFERENCES mail.mailbox (mailbox_sid),
	CONSTRAINT fk_auto_imp_mail_sndr_ftr_sid FOREIGN KEY (app_sid, mailbox_sid) REFERENCES csr.auto_imp_mailbox(app_sid, mailbox_sid),
	CONSTRAINT ck_auto_imp_mail_sndr_fltr_wc CHECK (is_wildcard IN (0, 1))
);
CREATE TABLE csr.auto_imp_mail_subject_filter (
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	mailbox_sid					NUMBER(10) NOT NULL,
	filter_string				VARCHAR2(1024) NOT NULL,
	is_wildcard					NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT pk_auto_imp_mail_sbject_filter PRIMARY KEY (app_sid, mailbox_sid, filter_string),
	CONSTRAINT fk_auto_imp_mail_sbjct_fltr_bx FOREIGN KEY (mailbox_sid) REFERENCES mail.mailbox (mailbox_sid),
	CONSTRAINT fk_auto_imp_mail_sbjt_fltr_sid FOREIGN KEY (app_sid, mailbox_sid) REFERENCES csr.auto_imp_mailbox(app_sid, mailbox_sid),
	CONSTRAINT ck_auto_imp_mail_sbjct_fltr_wc CHECK (is_wildcard IN (0, 1))
);
CREATE TABLE csr.auto_imp_mail_attach_filter (
	app_sid							NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	mailbox_sid						NUMBER(10) NOT NULL,
	filter_string					VARCHAR2(1024) NOT NULL,
	is_wildcard						NUMBER(1) DEFAULT 0 NOT NULL,
	pos								NUMBER(2) NOT NULL,
	matched_import_class_sid		NUMBER(10) NOT NULL,
	required_mimetype				VARCHAR2(1024),
	CONSTRAINT pk_auto_imp_mail_attach_filter PRIMARY KEY (app_sid, mailbox_sid, pos),
	CONSTRAINT fk_auto_imp_mail_atch_fltr_box FOREIGN KEY (mailbox_sid) REFERENCES mail.mailbox (mailbox_sid),
	CONSTRAINT fk_auto_imp_mail_att_fltr_sid FOREIGN KEY (app_sid, mailbox_sid) REFERENCES csr.auto_imp_mailbox(app_sid, mailbox_sid),
	CONSTRAINT fk_auto_imp_mail_att_fltr_cls FOREIGN KEY (app_sid, matched_import_class_sid) REFERENCES csr.automated_import_class(app_sid, automated_import_class_sid),
	CONSTRAINT ck_auto_imp_mail_att_fltr_wc CHECK (is_wildcard IN (0, 1))
);
CREATE TABLE csr.auto_imp_mail (
	app_sid					NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	mailbox_sid				NUMBER(10) NOT NULL,
	mail_message_uid		NUMBER(10) NOT NULL,
	subject					VARCHAR2(4000),
	recieved_dtm			DATE,
	sender_address			VARCHAR2(255) NOT NULL,
	sender_name				VARCHAR2(255),
	number_attachments		NUMBER(10) DEFAULT 0 NOT NULL,
	CONSTRAINT pk_auto_imp_mail PRIMARY KEY (app_sid, mailbox_sid, mail_message_uid),
	CONSTRAINT fk_auto_imp_mail_box FOREIGN KEY (mailbox_sid) REFERENCES mail.mailbox (mailbox_sid),
	CONSTRAINT fk_auto_imp_mail_box_sid FOREIGN KEY (app_sid, mailbox_sid) REFERENCES csr.auto_imp_mailbox(app_sid, mailbox_sid)
);
CREATE TABLE csr.auto_imp_mail_file (
	app_sid							NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	mailbox_sid						NUMBER(10) NOT NULL,
	mail_message_uid				NUMBER(10) NOT NULL,
	file_blob						BLOB NOT NULL,
	file_name						VARCHAR2(255) NOT NULL,
	made_from_body					NUMBER(1) DEFAULT 0 NOT NULL,
	automated_import_instance_id	NUMBER(10) NOT NULL,
	CONSTRAINT pk_auto_imp_mail_file PRIMARY KEY (app_sid, automated_import_instance_id),
	CONSTRAINT fk_auto_imp_mail_file_box FOREIGN KEY (mailbox_sid) REFERENCES mail.mailbox (mailbox_sid),
	CONSTRAINT fk_auto_imp_mail_file_instance FOREIGN KEY (app_sid, automated_import_instance_id) REFERENCES csr.automated_import_instance (app_sid, automated_import_instance_id),
	CONSTRAINT ck_auto_imp_mail_file_frm_body CHECK (made_from_body IN (0, 1))
);
CREATE TABLE csr.auto_imp_mail_msg (
	app_sid							NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	mailbox_sid						NUMBER(10) NOT NULL,
	mail_message_uid				NUMBER(10) NOT NULL,
	message							VARCHAR2(1024) NOT NULL,
	pos								NUMBER(10) NOT NULL,
	CONSTRAINT pk_auto_imp_mail_msg PRIMARY KEY (app_sid, mailbox_sid, mail_message_uid, pos),
	CONSTRAINT fk_auto_imp_mail_msg_box FOREIGN KEY (mailbox_sid) REFERENCES mail.mailbox (mailbox_sid)
);
CREATE TABLE CSRIMP.AGGREGATE_IND_VAL_DETAIL (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	AGGREGATE_IND_GROUP_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(4000) NOT NULL,
	DTM DATE,
	IND_SID NUMBER(10,0) NOT NULL,
	LINK_URL VARCHAR2(256),
	PERIOD_END_DTM DATE NOT NULL,
	PERIOD_START_DTM DATE NOT NULL,
	REGION_SID NUMBER(10,0) NOT NULL,
	SRC_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT FK_AGGREGATE_IND_VAL_DETAIL_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_TPL_DELEGATION (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	TPL_DELEGATION_SID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_TPL_DELEGATION PRIMARY KEY (CSRIMP_SESSION_ID, TPL_DELEGATION_SID),
	CONSTRAINT FK_CHAIN_TPL_DELEGATION_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CUSTOMER_FLOW_ALERT_CLASS (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	FLOW_ALERT_CLASS VARCHAR2(256) NOT NULL,
	CONSTRAINT PK_CUSTOMER_FLOW_ALERT_CLASS PRIMARY KEY (CSRIMP_SESSION_ID, FLOW_ALERT_CLASS),
	CONSTRAINT FK_CUSTOME_FLOW_ALERT_CLASS_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CUSTOMER_GEO_MAP_TAB_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	GEO_MAP_TAB_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CUSTOMER_GEO_MAP_TAB_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, GEO_MAP_TAB_TYPE_ID),
	CONSTRAINT FK_CUSTOME_GEO_MAP_TAB_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CUSTOMER_HELP_LANG (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	HELP_LANG_ID NUMBER(10,0) NOT NULL,
	IS_DEFAULT NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CUSTOMER_HELP_LANG PRIMARY KEY (CSRIMP_SESSION_ID, HELP_LANG_ID),
	CONSTRAINT FK_CUSTOMER_HELP_LANG_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.IMG_CHART_REGION (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	IMG_CHART_SID NUMBER(10,0) NOT NULL,
	REGION_SID NUMBER(10,0) NOT NULL,
	BACKGROUND_COLOR NUMBER(10,0) NOT NULL,
	BORDER_COLOR NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(1023),
	X NUMBER(10,0) NOT NULL,
	Y NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_IMG_CHART_REGION PRIMARY KEY (CSRIMP_SESSION_ID, IMG_CHART_SID, REGION_SID),
	CONSTRAINT FK_IMG_CHART_REGION_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.IND_SET (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	IND_SET_ID NUMBER(10,0) NOT NULL,
	DISPOSAL_DTM DATE,
	NAME VARCHAR2(255) NOT NULL,
	OWNER_SID NUMBER(10,0),
	CONSTRAINT PK_IND_SET PRIMARY KEY (CSRIMP_SESSION_ID, IND_SET_ID),
	CONSTRAINT FK_IND_SET_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.IND_SET_IND (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	IND_SET_ID NUMBER(10,0) NOT NULL,
	IND_SID NUMBER(10,0) NOT NULL,
	POS NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_IND_SET_IND PRIMARY KEY (CSRIMP_SESSION_ID, IND_SET_ID, IND_SID),
	CONSTRAINT FK_IND_SET_IND_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.IND_WINDOW (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	IND_SID NUMBER(10,0) NOT NULL,
	PERIOD CHAR(1) NOT NULL,
	COMPARISON_OFFSET NUMBER(10,0) NOT NULL,
	LOWER_BRACKET NUMBER(10,4) NOT NULL,
	UPPER_BRACKET NUMBER(10,4) NOT NULL,
	CONSTRAINT PK_IND_WINDOW PRIMARY KEY (CSRIMP_SESSION_ID, IND_SID, PERIOD),
	CONSTRAINT FK_IND_WINDOW_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.ISSUE_ALERT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ISSUE_ID NUMBER(10,0) NOT NULL,
	CSR_USER_SID NUMBER(10,0) NOT NULL,
	OVERDUE_SENT_DTM DATE,
	REMINDER_SENT_DTM DATE,
	CONSTRAINT PK_ISSUE_ALERT PRIMARY KEY (CSRIMP_SESSION_ID, ISSUE_ID, CSR_USER_SID),
	CONSTRAINT FK_ISSUE_ALERT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.ISSUE_METER_MISSING_DATA (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ISSUE_METER_MISSING_DATA_ID NUMBER(10,0) NOT NULL,
	END_DTM DATE NOT NULL,
	REGION_SID NUMBER(10,0) NOT NULL,
	START_DTM DATE NOT NULL,
	CONSTRAINT PK_ISSUE_METER_MISSING_DATA PRIMARY KEY (CSRIMP_SESSION_ID, ISSUE_METER_MISSING_DATA_ID),
	CONSTRAINT FK_ISSUE_METER_MISSING_DATA_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.ROUTE_LOG (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ROUTE_LOG_ID NUMBER(10,0) NOT NULL,
	CSR_USER_SID NUMBER(10,0) NOT NULL,
	DESCRIPTION CLOB,
	LOG_DATE DATE NOT NULL,
	PARAM_1 VARCHAR2(2048),
	PARAM_2 VARCHAR2(2048),
	PARAM_3 VARCHAR2(2048),
	ROUTE_ID NUMBER(10,0) NOT NULL,
	ROUTE_STEP_ID NUMBER(10,0) NOT NULL,
	SUMMARY VARCHAR2(1023) NOT NULL,
	CONSTRAINT PK_ROUTE_LOG PRIMARY KEY (CSRIMP_SESSION_ID, ROUTE_LOG_ID),
	CONSTRAINT FK_ROUTE_LOG_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.ROUTE_STEP_VOTE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ROUTE_STEP_ID NUMBER(10,0) NOT NULL,
	USER_SID NUMBER(10,0) NOT NULL,
	DEST_FLOW_STATE_ID NUMBER(10,0),
	DEST_ROUTE_STEP_ID NUMBER(10,0),
	IS_RETURN NUMBER(1,0) NOT NULL,
	VOTE_DIRECTION NUMBER(10,0) NOT NULL,
	VOTE_DTM DATE NOT NULL,
	CONSTRAINT PK_ROUTE_STEP_VOTE PRIMARY KEY (CSRIMP_SESSION_ID, ROUTE_STEP_ID, USER_SID),
	CONSTRAINT FK_ROUTE_STEP_VOTE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.SHEET_CHANGE_REQ (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	SHEET_CHANGE_REQ_ID NUMBER(10,0) NOT NULL,
	ACTIVE_SHEET_ID NUMBER(10,0) NOT NULL,
	IS_APPROVED NUMBER(1,0),
	PROCESSED_BY_SID NUMBER(10,0),
	PROCESSED_DTM DATE,
	PROCESSED_NOTE CLOB,
	RAISED_BY_SID NUMBER(10,0) NOT NULL,
	RAISED_DTM DATE NOT NULL,
	RAISED_NOTE CLOB,
	REQ_TO_CHANGE_SHEET_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_SHEET_CHANGE_REQ PRIMARY KEY (CSRIMP_SESSION_ID, SHEET_CHANGE_REQ_ID),
	CONSTRAINT FK_SHEET_CHANGE_REQ_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.SHEET_CHANGE_REQ_ALERT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	SHEET_CHANGE_REQ_ALERT_ID NUMBER(10,0) NOT NULL,
	ACTION_TYPE VARCHAR2(1) NOT NULL,
	NOTIFY_USER_SID NUMBER(10,0) NOT NULL,
	RAISED_BY_USER_SID NUMBER(10,0) NOT NULL,
	SHEET_CHANGE_REQ_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_SHEET_CHANGE_REQ_ALERT PRIMARY KEY (CSRIMP_SESSION_ID, SHEET_CHANGE_REQ_ALERT_ID),
	CONSTRAINT FK_SHEET_CHANGE_REQ_ALERT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.SHEET_VALUE_CHANGE_FILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	SHEET_VALUE_CHANGE_ID NUMBER(10,0) NOT NULL,
	FILE_UPLOAD_SID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_SHEET_VALUE_CHANGE_FILE PRIMARY KEY (CSRIMP_SESSION_ID, SHEET_VALUE_CHANGE_ID, FILE_UPLOAD_SID),
	CONSTRAINT FK_SHEET_VALUE_CHANGE_FILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.SUPPLIER_DELEGATION (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	SUPPLIER_SID NUMBER(10,0) NOT NULL,
	TPL_DELEGATION_SID NUMBER(10,0) NOT NULL,
	DELEGATION_SID NUMBER(10,0),
	CONSTRAINT PK_SUPPLIER_DELEGATION PRIMARY KEY (CSRIMP_SESSION_ID, SUPPLIER_SID, TPL_DELEGATION_SID),
	CONSTRAINT FK_SUPPLIER_DELEGATION_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.USER_MSG_FILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	USER_MSG_FILE_ID NUMBER(10,0) NOT NULL,
	DATA BLOB NOT NULL,
	FILENAME VARCHAR2(2000) NOT NULL,
	MIME_TYPE VARCHAR2(2000) NOT NULL,
	SHA1 RAW(20) NOT NULL,
	USER_MSG_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_USER_MSG_FILE PRIMARY KEY (CSRIMP_SESSION_ID, USER_MSG_FILE_ID),
	CONSTRAINT FK_USER_MSG_FILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.VAL_FILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	VAL_ID NUMBER(20,0) NOT NULL,
	FILE_UPLOAD_SID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_VAL_FILE PRIMARY KEY (CSRIMP_SESSION_ID, VAL_ID, FILE_UPLOAD_SID),
	CONSTRAINT FK_VAL_FILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.VAL_NOTE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	VAL_NOTE_ID NUMBER(10,0) NOT NULL,
	ENTERED_BY_SID NUMBER(10,0) NOT NULL,
	ENTERED_DTM DATE,
	IND_SID NUMBER(10,0) NOT NULL,
	NOTE CLOB,
	PERIOD_END_DTM DATE,
	PERIOD_START_DTM DATE NOT NULL,
	REGION_SID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_VAL_NOTE PRIMARY KEY (CSRIMP_SESSION_ID, VAL_NOTE_ID),
	CONSTRAINT FK_VAL_NOTE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_IND_SET (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_IND_SET_ID NUMBER(10) NOT NULL,
	NEW_IND_SET_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_IND_SET PRIMARY KEY (CSRIMP_SESSION_ID, OLD_IND_SET_ID) USING INDEX,
	CONSTRAINT UK_MAP_IND_SET UNIQUE (CSRIMP_SESSION_ID, NEW_IND_SET_ID) USING INDEX,
	CONSTRAINT FK_MAP_IND_SET_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_ISSU_METE_MISSI_DATA (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ISSUE_METER_MISSIN_DATA_ID NUMBER(10) NOT NULL,
	NEW_ISSUE_METER_MISSIN_DATA_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_ISSU_METE_MISSI_DATA PRIMARY KEY (CSRIMP_SESSION_ID, OLD_ISSUE_METER_MISSIN_DATA_ID) USING INDEX,
	CONSTRAINT UK_MAP_ISSU_METE_MISSI_DATA UNIQUE (CSRIMP_SESSION_ID, NEW_ISSUE_METER_MISSIN_DATA_ID) USING INDEX,
	CONSTRAINT FK_MAP_ISSU_METE_MISSI_DATA_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_ROUTE_LOG (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ROUTE_LOG_ID NUMBER(10) NOT NULL,
	NEW_ROUTE_LOG_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_ROUTE_LOG PRIMARY KEY (CSRIMP_SESSION_ID, OLD_ROUTE_LOG_ID) USING INDEX,
	CONSTRAINT UK_MAP_ROUTE_LOG UNIQUE (CSRIMP_SESSION_ID, NEW_ROUTE_LOG_ID) USING INDEX,
	CONSTRAINT FK_MAP_ROUTE_LOG_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_SHEET_CHANGE_REQ (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_SHEET_CHANGE_REQ_ID NUMBER(10) NOT NULL,
	NEW_SHEET_CHANGE_REQ_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_SHEET_CHANGE_REQ PRIMARY KEY (CSRIMP_SESSION_ID, OLD_SHEET_CHANGE_REQ_ID) USING INDEX,
	CONSTRAINT UK_MAP_SHEET_CHANGE_REQ UNIQUE (CSRIMP_SESSION_ID, NEW_SHEET_CHANGE_REQ_ID) USING INDEX,
	CONSTRAINT FK_MAP_SHEET_CHANGE_REQ_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_SHEE_CHANG_REQ_ALERT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_SHEET_CHANGE_REQ_ALERT_ID NUMBER(10) NOT NULL,
	NEW_SHEET_CHANGE_REQ_ALERT_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_SHEE_CHANG_REQ_ALERT PRIMARY KEY (CSRIMP_SESSION_ID, OLD_SHEET_CHANGE_REQ_ALERT_ID) USING INDEX,
	CONSTRAINT UK_MAP_SHEE_CHANG_REQ_ALERT UNIQUE (CSRIMP_SESSION_ID, NEW_SHEET_CHANGE_REQ_ALERT_ID) USING INDEX,
	CONSTRAINT FK_MAP_SHEE_CHANG_REQ_ALERT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_USER_MSG_FILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_USER_MSG_FILE_ID NUMBER(10) NOT NULL,
	NEW_USER_MSG_FILE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_USER_MSG_FILE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_USER_MSG_FILE_ID) USING INDEX,
	CONSTRAINT UK_MAP_USER_MSG_FILE UNIQUE (CSRIMP_SESSION_ID, NEW_USER_MSG_FILE_ID) USING INDEX,
	CONSTRAINT FK_MAP_USER_MSG_FILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_VAL_NOTE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_VAL_NOTE_ID NUMBER(10) NOT NULL,
	NEW_VAL_NOTE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_VAL_NOTE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_VAL_NOTE_ID) USING INDEX,
	CONSTRAINT UK_MAP_VAL_NOTE UNIQUE (CSRIMP_SESSION_ID, NEW_VAL_NOTE_ID) USING INDEX,
	CONSTRAINT FK_MAP_VAL_NOTE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
DROP TABLE csr.recent_teamroom;
DROP TABLE csr.user_follower;
DROP TABLE csr.unapproved_val;
DROP TABLE csr.user_survey_response;
DROP TABLE csr.pending_ind_rule;
DROP TABLE csr.validation_rule;
DROP SEQUENCE csr.validation_rule_id_seq;
DROP TABLE csr.val_accuracy;
DROP TABLE csr.val_trigger_fired;
DROP TABLE csr.val_trigger_region;
DROP TABLE csr.val_trigger;
DROP SEQUENCE csr.val_trigger_id_seq;


BEGIN
	security.user_pkg.logonadmin();
	INSERT INTO csr.internal_audit_type_report(app_sid, internal_audit_type_report_id, internal_audit_type_id, word_doc, report_filename, label)
		 SELECT app_sid, csr.internal_audit_type_report_seq.nextval, internal_audit_type_id, word_doc, filename, 'Report'
		   FROM csr.internal_audit_type
		  WHERE filename IS NOT NULL;
 END;
 /
ALTER TABLE CSR.INTERNAL_AUDIT_TYPE DROP COLUMN WORD_DOC;
ALTER TABLE CSR.INTERNAL_AUDIT_TYPE DROP COLUMN FILENAME;
ALTER TABLE CSRIMP.INTERNAL_AUDIT_TYPE DROP COLUMN WORD_DOC;
ALTER TABLE CSRIMP.INTERNAL_AUDIT_TYPE DROP COLUMN FILENAME;
ALTER TABLE chain.dedupe_mapping ADD (
	destination_tab_sid				NUMBER(10, 0),
	destination_col_sid				NUMBER(10, 0),
	CONSTRAINT chk_dedupe_field_one_value_set
	CHECK ((CASE WHEN dedupe_field_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN reference_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN tag_group_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN destination_col_sid IS NOT NULL THEN 1 ELSE 0 END
		) = 1)
);
ALTER TABLE chain.dedupe_mapping DROP CONSTRAINT chk_dedupe_field_or_ref_or_tag;
ALTER TABLE chain.dedupe_merge_log ADD DESTINATION_TAB_SID	NUMBER(10, 0);
ALTER TABLE chain.dedupe_merge_log ADD DESTINATION_COL_SID	NUMBER(10, 0);
ALTER TABLE chain.dedupe_merge_log ADD error_message		VARCHAR2(255);
ALTER TABLE chain.dedupe_merge_log ADD current_desc_val		VARCHAR2(4000);
ALTER TABLE chain.dedupe_merge_log ADD new_raw_val			VARCHAR2(4000);
ALTER TABLE chain.dedupe_merge_log ADD new_translated_val	VARCHAR2(4000);
ALTER TABLE chain.dedupe_merge_log ADD CONSTRAINT CHK_DEDUPE_MERGE_ONE_VALUE_SET 
	CHECK ((CASE WHEN dedupe_field_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN reference_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN tag_group_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN destination_col_sid IS NOT NULL THEN 1 ELSE 0 END
		) = 1);
		
ALTER TABLE chain.dedupe_merge_log ADD CONSTRAINT CHK_DEDUPE_MERGE_LOG_VAL
	CHECK (new_val IS NOT NULL OR old_val IS NOT NULL OR error_message IS NOT NULL);
ALTER TABLE chain.dedupe_merge_log DROP CONSTRAINT CHK_DEDUPE_MERGE_FLD_REF_TAG;
DROP INDEX CHAIN.UK_DEDUPE_MERGE_LOG;
CREATE UNIQUE INDEX CHAIN.UK_DEDUPE_MERGE_LOG ON CHAIN.DEDUPE_MERGE_LOG (APP_SID, DEDUPE_PROCESSED_RECORD_ID, COALESCE(DEDUPE_FIELD_ID, REFERENCE_ID, TAG_GROUP_ID, DESTINATION_COL_SID));
ALTER TABLE cms.tab ADD enum_translation_tab_sid NUMBER(10,0);
	
ALTER TABLE cms.tab ADD CONSTRAINT FK_TAB_ENUM_TR_TAB_SID
	FOREIGN KEY (app_sid, enum_translation_tab_sid)
	REFERENCES cms.tab (app_sid, tab_sid);
ALTER TABLE csrimp.chain_dedupe_mapping ADD (
	destination_tab_sid				NUMBER(10, 0),
	destination_col_sid				NUMBER(10, 0)
);
ALTER TABLE csrimp.chain_dedupe_merge_log ADD (
	destination_tab_sid		NUMBER(10, 0),
	destination_col_sid		NUMBER(10, 0),
	error_message			VARCHAR2(255),
	current_desc_val		VARCHAR2(4000),
	new_raw_val				VARCHAR2(4000),
	new_translated_val		VARCHAR2(4000)
);
ALTER TABLE csrimp.cms_tab ADD enum_translation_tab_sid NUMBER(10, 0);
create index chain.ix_dedupe_merge_log_col_sid on chain.dedupe_merge_log (app_sid, destination_tab_sid, destination_col_sid);
ALTER TABLE csr.customer
ADD forecasting_slots NUMBER(10) DEFAULT 0 NOT NULL;
ALTER TABLE csrimp.customer
ADD forecasting_slots NUMBER(10) NOT NULL;
ALTER TABLE csr.custom_factor 
ADD ( region_sid	NUMBER(10, 0) );
ALTER TABLE csrimp.custom_factor 
ADD ( region_sid	NUMBER(10, 0) );
 
ALTER TABLE csr.emission_factor_profile
MODIFY (start_dtm NULL, applied DEFAULT 0);
ALTER TABLE csr.emission_factor_profile_factor
DROP CONSTRAINT PK_EMISSION_FCTR_PROFILE_FCTR DROP INDEX;
ALTER TABLE csr.emission_factor_profile_factor
ADD CONSTRAINT UK_EMISSION_FCTR_PROFILE_FCTR UNIQUE (app_sid,
	profile_id,
	factor_type_id,
	std_factor_set_id,
	custom_factor_set_id,
	region_sid,
	geo_country,
	geo_region,
	egrid_ref);
	
ALTER TABLE csrimp.emission_factor_profile
MODIFY (start_dtm NULL);
ALTER TABLE csrimp.emission_factor_profile_factor
DROP CONSTRAINT PK_EMISSION_FCTR_PROFILE_FCTR DROP INDEX;
ALTER TABLE csrimp.emission_factor_profile_factor
ADD CONSTRAINT UK_EMISSION_FCTR_PROFILE_FCTR UNIQUE (csrimp_session_id,
	profile_id,
	factor_type_id,
	std_factor_set_id,
	custom_factor_set_id,
	region_sid,
	geo_country,
	geo_region,
	egrid_ref);
	
ALTER TABLE CHAIN.FILTER_VALUE ADD COLOUR NUMBER(10);
ALTER TABLE CSRIMP.CHAIN_FILTER_VALUE ADD COLOUR NUMBER(10);
ALTER TABLE csr.region_description
  ADD last_changed_dtm DATE;
ALTER TABLE csrimp.region_description
  ADD last_changed_dtm DATE;
ALTER TABLE csrimp.ind_description
  ADD last_changed_dtm DATE;
  
ALTER TABLE csr.automated_import_instance
ADD mailbox_sid NUMBER(10);
ALTER TABLE csr.automated_import_instance
ADD mail_message_uid NUMBER(10);
ALTER TABLE csr.automated_import_instance
ADD CONSTRAINT fk_auto_imp_inst_mailbox FOREIGN KEY (app_sid, mailbox_sid, mail_message_uid) REFERENCES CSR.auto_imp_mail (app_sid, mailbox_sid, mail_message_uid);
ALTER TABLE csr.auto_imp_zip_filter
  ADD is_wildcard NUMBER(1) DEFAULT 0 NOT NULL;
UPDATE csr.auto_imp_zip_filter
   SET is_wildcard = 1
 WHERE wildcard_match IS NOT NULL;
	 
 ALTER TABLE csr.auto_imp_zip_filter
RENAME COLUMN wildcard_match TO filter_string;
UPDATE csr.auto_imp_zip_filter
   SET filter_string = regex_match
 WHERE filter_string IS NULL;
ALTER TABLE csr.auto_imp_zip_filter
 DROP COLUMN regex_match;
BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE csr.broken_pct_ownership_data';
EXCEPTION
	WHEN OTHERS THEN
		-- "table or view does not exist"
		IF SQLCODE != -942 THEN
			RAISE;
		END IF;
END;
/
BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE csr.csr_user_profile';
EXCEPTION
	WHEN OTHERS THEN
		-- "table or view does not exist"
		IF SQLCODE != -942 THEN
			RAISE;
		END IF;
END;
/
DROP TABLE csrimp.flow_customer_alert_class;
ALTER TABLE csr.issue DROP CONSTRAINT CHK_ISSUE_FKS;
ALTER TABLE csr.issue ADD CONSTRAINT CHK_ISSUE_FKS CHECK (
CASE WHEN ISSUE_PENDING_VAL_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_SHEET_VALUE_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_SURVEY_ANSWER_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_NON_COMPLIANCE_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_ACTION_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_ALARM_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_RAW_DATA_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_DATA_SOURCE_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_MISSING_DATA_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_SUPPLIER_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_INITIATIVE_ID IS NOT NULL THEN 1 ELSE 0 END
IN (0, 1));
ALTER TABLE csrimp.issue DROP CONSTRAINT CHK_ISSUE_FKS;
ALTER TABLE csrimp.issue ADD CONSTRAINT CHK_ISSUE_FKS CHECK (
CASE WHEN ISSUE_PENDING_VAL_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_SHEET_VALUE_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_SURVEY_ANSWER_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_NON_COMPLIANCE_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_ACTION_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_ALARM_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_RAW_DATA_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_METER_DATA_SOURCE_ID IS NOT NULL THEN 1 ELSE 0 END +
CASE WHEN ISSUE_SUPPLIER_ID IS NOT NULL THEN 1 ELSE 0 END
IN (0, 1));
ALTER TABLE csrimp.dataview DROP COLUMN interval;
ALTER TABLE csrimp.delegation DROP COLUMN interval;
ALTER TABLE csrimp.deleg_plan DROP COLUMN interval;
ALTER TABLE csrimp.form DROP COLUMN interval;
ALTER TABLE csrimp.ind DROP COLUMN default_interval;
ALTER TABLE csrimp.ind_selection_group_member DROP COLUMN description;
ALTER TABLE csrimp.scenario DROP COLUMN interval;
ALTER TABLE csrimp.target_dashboard DROP COLUMN interval;
ALTER TABLE csrimp.tpl_report DROP COLUMN interval;
ALTER TABLE csrimp.tpl_report_non_compl DROP COLUMN interval;
ALTER TABLE csrimp.tpl_report_tag_dataview DROP COLUMN interval;
ALTER TABLE csrimp.tpl_report_tag_eval DROP COLUMN interval;
ALTER TABLE csrimp.tpl_report_tag_ind DROP COLUMN interval;
ALTER TABLE csrimp.tpl_report_tag_logging_form DROP COLUMN interval;
ALTER TABLE csrimp.defaul_initia_user_state RENAME TO default_initiative_user_state;
ALTER TABLE csrimp.proje_initia_period_stat RENAME TO project_initiative_period_stat;
ALTER TABLE csrimp.proj_init_metr_flow_stat RENAME TO project_init_metric_flow_state;
ALTER TABLE csrimp.workshe_column_value_map RENAME TO worksheet_column_value_map;
ALTER TABLE csrimp.workshee_value_map_value RENAME TO worksheet_value_map_value;
ALTER TABLE csrimp.default_initiative_user_state ADD (generate_alerts NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.aggregate_ind_group ADD (source_url VARCHAR2(1027));
ALTER TABLE csrimp.alert_template ADD (from_email VARCHAR2(255));
ALTER TABLE csrimp.alert_template ADD (from_name VARCHAR2(255));
ALTER TABLE csrimp.all_meter ADD (metering_version NUMBER(10, 0));
ALTER TABLE csrimp.all_meter ADD (lower_threshold_percentage NUMBER(10, 2));
ALTER TABLE csrimp.all_meter ADD (upper_threshold_percentage NUMBER(10, 2));
ALTER TABLE csrimp.approval_dashboard ADD (source_scenario_run_sid NUMBER(10, 0));
ALTER TABLE csrimp.attachment_history ADD (attach_name VARCHAR2(255));
ALTER TABLE csrimp.attachment_history ADD (pg_num VARCHAR2(255));
ALTER TABLE csrimp.attachment_history ADD (attach_comment CLOB);
ALTER TABLE csrimp.autocreate_user ADD (require_new_password NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.autocreate_user ADD (redirect_to_url VARCHAR2(255));
ALTER TABLE csrimp.csr_user ADD (avatar BLOB);
ALTER TABLE csrimp.csr_user ADD (last_modified_dtm DATE NOT NULL);
ALTER TABLE csrimp.csr_user ADD (last_logon_type_id NUMBER(10, 0) NOT NULL);
ALTER TABLE csrimp.csr_user ADD (avatar_sha1 RAW(20));
ALTER TABLE csrimp.csr_user ADD (avatar_mime_type VARCHAR2(2000));
ALTER TABLE csrimp.csr_user ADD (avatar_last_modified_dtm DATE);
ALTER TABLE csrimp.csr_user ADD CONSTRAINT CK_USER_AVATAR CHECK ((AVATAR IS NULL AND AVATAR_LAST_MODIFIED_DTM IS NULL AND AVATAR_SHA1 IS NULL AND AVATAR_MIME_TYPE IS NULL)
	OR (AVATAR IS NOT NULL AND AVATAR_LAST_MODIFIED_DTM IS NOT NULL AND AVATAR_SHA1 IS NOT NULL AND AVATAR_MIME_TYPE IS NOT NULL));
ALTER TABLE csrimp.dataview ADD (show_abs_variance NUMBER(1, 0));
ALTER TABLE csrimp.dataview ADD CONSTRAINT CK_DATAVIEW_SHOW_ABS_VARIANCE CHECK (SHOW_ABS_VARIANCE IN (0,1));
ALTER TABLE csrimp.dataview_history ADD (show_abs_variance NUMBER(1, 0));
ALTER TABLE csrimp.dataview_trend ADD (rounding_method NUMBER(5, 0) NOT NULL);
ALTER TABLE csrimp.dataview_trend ADD (rounding_digits NUMBER(5, 0) NOT NULL);
ALTER TABLE csrimp.dataview_trend ADD CONSTRAINT CHK_DATAVIEW_TREND_ROUNDING_ME CHECK ( ROUNDING_METHOD BETWEEN 0 AND 9 );
ALTER TABLE csrimp.dataview_trend ADD CONSTRAINT CHK_DATAVIEW_TREND_ROUNDING_DI CHECK ( ROUNDING_DIGITS BETWEEN 0 AND 99 );
ALTER TABLE csrimp.delegation_grid ADD (variance_validation_sp VARCHAR2(255));
ALTER TABLE csrimp.delegation_ind ADD (meta_role VARCHAR2(32));
ALTER TABLE csrimp.delegation_ind ADD CONSTRAINT CK_META_ROLE CHECK (META_ROLE IN('MERGED','MERGED_ON_TIME', 'DP_COMPLETE', 'TOTAL_DP'));
ALTER TABLE csrimp.delegation_region ADD (allowed_na NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.delegation_region ADD (hide_after_dtm DATE);
ALTER TABLE csrimp.delegation_region ADD (hide_inclusive NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.deleg_ind_group ADD (start_collapsed NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.deleg_plan ADD (last_applied_dtm DATE);
ALTER TABLE csrimp.flow_state ADD (move_to_flow_state_id NUMBER(10, 0));
ALTER TABLE csrimp.flow_state ADD (flow_state_nature_id NUMBER(10, 0));
ALTER TABLE csrimp.img_chart_ind ADD (font_size NUMBER(10, 0) NOT NULL);
ALTER TABLE csrimp.imp_session ADD (unmerged_dtm DATE);
ALTER TABLE csrimp.imp_val ADD (set_region_metric_val_id NUMBER(10, 0));
ALTER TABLE csrimp.measure ADD (lookup_key VARCHAR2(64));
ALTER TABLE csrimp.measure_conversion ADD (lookup_key VARCHAR2(64));
ALTER TABLE csrimp.meter_alarm_statistic ADD (all_meters NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.meter_alarm_statistic ADD (not_before_dtm DATE);
ALTER TABLE csrimp.meter_alarm_statistic ADD CHECK (ALL_METERS IN(0,1));
ALTER TABLE csrimp.meter_input ADD (is_virtual NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.meter_input ADD (value_helper VARCHAR2(256));
ALTER TABLE csrimp.meter_input ADD CONSTRAINT CHK_METER_INPUT_IS_VIRTUAL_1_0 CHECK (IS_VIRTUAL IN(0,1));
ALTER TABLE csrimp.meter_list_cache ADD (demand_number NUMBER(24, 10));
ALTER TABLE csrimp.meter_list_cache ADD (reading_count NUMBER(24, 10));
ALTER TABLE csrimp.meter_list_cache ADD (first_reading_dtm DATE);
ALTER TABLE csrimp.meter_raw_data ADD (file_name VARCHAR2(1024));
ALTER TABLE csrimp.meter_reading ADD (demand NUMBER(24, 10));
ALTER TABLE csrimp.meter_reading ADD (pm_reading_id NUMBER(10, 0));
ALTER TABLE csrimp.meter_reading ADD (is_estimate NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.meter_source_type ADD (show_invoice_reminder NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.meter_source_type ADD (invoice_reminder VARCHAR2(1024));
ALTER TABLE csrimp.region ADD (last_modified_dtm DATE NOT NULL);
ALTER TABLE csrimp.region_set_region ADD (pos NUMBER(10, 0) NOT NULL);
ALTER TABLE csrimp.region_tree ADD (last_recalc_dtm DATE);
ALTER TABLE csrimp.route_step_user ADD (overdue_sent_dtm DATE);
ALTER TABLE csrimp.route_step_user ADD (declined_sent_dtm DATE);
ALTER TABLE csrimp.scenario ADD (scrag_test_scenario NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.scenario ADD CONSTRAINT CK_SCENARIO_SCRAG_TEST CHECK (SCRAG_TEST_SCENARIO IN (0,1));
ALTER TABLE csrimp.scenario_run ADD (version NUMBER(10, 0));
ALTER TABLE csrimp.scheduled_stored_proc ADD (last_run_dtm TIMESTAMP);
ALTER TABLE csrimp.scheduled_stored_proc ADD (last_result NUMBER(10, 0));
ALTER TABLE csrimp.scheduled_stored_proc ADD (last_result_msg VARCHAR2(1024));
ALTER TABLE csrimp.scheduled_stored_proc ADD (last_result_ex CLOB);
ALTER TABLE csrimp.scheduled_stored_proc ADD (next_run_dtm TIMESTAMP NOT NULL);
ALTER TABLE csrimp.section ADD (previous_section_sid NUMBER(10, 0));
ALTER TABLE csrimp.section_flow ADD (split_question_flow_state_id NUMBER(10, 0));
ALTER TABLE csrimp.section_flow ADD (dflt_ret_aft_inc_usr_submit NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.section_module ADD (active NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.section_module ADD (start_dtm DATE);
ALTER TABLE csrimp.section_module ADD (show_flow_summary_tab NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.section_module ADD (reminder_offset NUMBER(10, 0) NOT NULL);
ALTER TABLE csrimp.section_module ADD (previous_module_sid NUMBER(10, 0));
ALTER TABLE csrimp.section_module ADD (library_sid NUMBER(10, 0));
ALTER TABLE csrimp.section_module ADD (end_dtm DATE);
ALTER TABLE csrimp.sheet ADD (automatic_approval_dtm DATE);
ALTER TABLE csrimp.sheet ADD (percent_complete NUMBER(10, 0));
ALTER TABLE csrimp.sheet ADD (is_read_only NUMBER(1, 0));
ALTER TABLE csrimp.sheet ADD (is_copied_forward NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.sheet ADD (automatic_approval_status CHAR);
ALTER TABLE csrimp.sheet ADD CONSTRAINT CK_AASTATUS CHECK (AUTOMATIC_APPROVAL_STATUS IN ('P', 'Q', 'A', 'R'));
ALTER TABLE csrimp.sheet_value ADD (is_na NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.tab ADD (is_hideable NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.tab_portlet ADD (added_by_user_sid NUMBER(10, 0));
ALTER TABLE csrimp.tab_portlet ADD (added_dtm DATE NOT NULL);
ALTER TABLE csrimp.tag ADD (exclude_from_dataview_grouping NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.tag_group ADD (applies_to_initiatives NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.tag_group_member ADD (active NUMBER(1, 0) NOT NULL);
ALTER TABLE csrimp.tag_group_member ADD CONSTRAINT CHK_TAG_GRP_MEM_ACTIVE CHECK (ACTIVE IN (0,1));
BEGIN
	EXECUTE IMMEDIATE 'ALTER TABLE CSR.DEFAULT_INITIATIVE_USER_STATE ADD (GENERATE_ALERTS NUMBER(1, 0) DEFAULT 0 NOT NULL, CHECK (GENERATE_ALERTS IN (0, 1)))';
EXCEPTION
	WHEN OTHERS THEN
		-- column being added already exists in table
		IF SQLCODE != -1430 THEN
			RAISE;
		END IF;
END;
/
ALTER TABLE csr.issue_type ADD due_date_is_mandatory NUMBER(1) DEFAULT 0 NOT NULL;
ALTER TABLE csrimp.issue_type ADD due_date_is_mandatory NUMBER(1) NOT NULL;
BEGIN
	FOR r IN (
		SELECT 1
		  FROM all_tab_columns
		 WHERE owner = 'CSR'
		   AND table_name = 'FLOW'
		   AND column_name = 'DESCRIPTION'
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE csr.flow DROP COLUMN description';
	END LOOP;
END;
/
BEGIN
	FOR r IN (
		SELECT 1
		  FROM all_tab_columns
		 WHERE owner = 'CSR'
		   AND table_name = 'FUND'
		   AND column_name = 'SUPPLIER_SID'
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE csr.fund DROP COLUMN supplier_sid';
	END LOOP;
END;
/
BEGIN
	FOR r IN (
		SELECT 1
		  FROM all_tab_columns
		 WHERE owner = 'CSR'
		   AND table_name = 'REGION_METRIC'
		   AND column_name = 'LOOKUP_KEY'
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE csr.region_metric DROP COLUMN lookup_key';
	END LOOP;
END;
/
BEGIN
	FOR r IN (
		SELECT acc.constraint_name
		  FROM all_cons_columns acc
		  JOIN all_constraints ac ON acc.owner = ac.owner AND acc.constraint_name = ac.constraint_name
		 WHERE acc.owner = 'CSR'
		   AND acc.table_name = 'INTERNAL_AUDIT_FILE_DATA'
		   AND acc.column_name IN ('INTERNAL_AUDIT_SID', 'XXX_INTERNAL_AUDIT_SID')
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE csr.internal_audit_file_data DROP CONSTRAINT ' || r.constraint_name;
	END LOOP;
	FOR r IN (
		SELECT column_name
		  FROM all_tab_columns
		 WHERE owner = 'CSR'
		   AND table_name = 'INTERNAL_AUDIT_FILE_DATA'
		   AND column_name IN ('INTERNAL_AUDIT_SID', 'XXX_INTERNAL_AUDIT_SID')
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE csr.internal_audit_file_data DROP COLUMN ' || r.column_name;
	END LOOP;
END;
/
BEGIN
	FOR r IN (
		SELECT 1
		  FROM all_tab_columns
		 WHERE owner = 'CSRIMP'
		   AND table_name = 'CMS_ALERT_TYPE'
		   AND column_name = 'HELPER_SP'
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE csrimp.cms_alert_type DROP COLUMN helper_sp';
	END LOOP;
END;
/
BEGIN
	FOR r IN (
		SELECT 1
		  FROM all_tab_columns
		 WHERE owner = 'CSRIMP'
		   AND table_name = 'MODEL_MAP'
		   AND column_name = 'EXCEL_NAME'
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE csrimp.model_map DROP COLUMN excel_name';
	END LOOP;
END;
/
ALTER TABLE csr.non_compliance RENAME COLUMN survey_response_id TO xxx_survey_response_id;
ALTER TABLE csrimp.non_compliance DROP COLUMN survey_response_id;
ALTER TABLE csr.audit_non_compliance ADD (
	attached_to_primary_survey			NUMBER(1, 0) DEFAULT 0 NOT NULL,
	internal_audit_type_survey_id		NUMBER(10, 0),
	CONSTRAINT ck_anc_survey CHECK (
		attached_to_primary_survey = 0 OR
		(attached_to_primary_survey = 1 AND internal_audit_type_survey_id IS NULL)
	)
);
ALTER TABLE csrimp.audit_non_compliance ADD (
	attached_to_primary_survey			NUMBER(1, 0) DEFAULT 0 NOT NULL,
	internal_audit_type_survey_id		NUMBER(10, 0)
);


GRANT INSERT ON csr.internal_audit_type_report TO CSRIMP;
GRANT SELECT ON csr.internal_audit_type_report_seq TO CSRIMP;
GRANT SELECT, INSERT, UPDATE ON csr.forecasting_email_sub TO csrimp;
GRANT DELETE ON donations.customer_options to csr;
GRANT SELECT ON csr.flow TO csrimp;
GRANT SELECT ON csr.flow_item TO csrimp;
GRANT SELECT ON csr.quick_survey_response TO csrimp;
GRANT SELECT ON csr.scenario TO csrimp;
GRANT SELECT ON security.securable_object_attributes TO csrimp;
grant execute on aspen2.tr_pkg to tool_user;
grant select, insert, update, delete on csrimp.aggregate_ind_val_detail to tool_user;
grant select, insert, update, delete on csrimp.chain_tpl_delegation to tool_user;
grant select, insert, update, delete on csrimp.customer_flow_alert_class to tool_user;
grant select, insert, update, delete on csrimp.customer_geo_map_tab_type to tool_user;
grant select, insert, update, delete on csrimp.customer_help_lang to tool_user;
grant select, insert, update, delete on csrimp.img_chart_region to tool_user;
grant select, insert, update, delete on csrimp.ind_set to tool_user;
grant select, insert, update, delete on csrimp.ind_set_ind to tool_user;
grant select, insert, update, delete on csrimp.ind_window to tool_user;
grant select, insert, update, delete on csrimp.issue_alert to tool_user;
grant select, insert, update, delete on csrimp.issue_meter_missing_data to tool_user;
grant select, insert, update, delete on csrimp.route_log to tool_user;
grant select, insert, update, delete on csrimp.route_step_vote to tool_user;
grant select, insert, update, delete on csrimp.sheet_change_req to tool_user;
grant select, insert, update, delete on csrimp.sheet_change_req_alert to tool_user;
grant select, insert, update, delete on csrimp.sheet_value_change_file to tool_user;
grant select, insert, update, delete on csrimp.supplier_delegation to tool_user;
grant select, insert, update, delete on csrimp.user_msg_file to tool_user;
grant select, insert, update, delete on csrimp.val_file to tool_user;
grant select, insert, update, delete on csrimp.val_note to tool_user;
grant select, insert, update on csr.aggregate_ind_val_detail to csrimp;
grant select, insert, update on csr.chain_tpl_delegation to csrimp;
grant select, insert, update on csr.customer_flow_alert_class to csrimp;
grant select, insert, update on csr.customer_geo_map_tab_type to csrimp;
grant select, insert, update on csr.customer_help_lang to csrimp;
grant select, insert, update on csr.img_chart_region to csrimp;
grant select, insert, update on csr.ind_set to csrimp;
grant select, insert, update on csr.ind_set_ind to csrimp;
grant select, insert, update on csr.ind_window to csrimp;
grant select, insert, update on csr.issue_alert to csrimp;
grant select, insert, update on csr.issue_meter_missing_data to csrimp;
grant select, insert, update on csr.route_log to csrimp;
grant select, insert, update on csr.route_step_vote to csrimp;
grant select, insert, update on csr.sheet_change_req to csrimp;
grant select, insert, update on csr.sheet_change_req_alert to csrimp;
grant select, insert, update on csr.sheet_value_change_file to csrimp;
grant select, insert, update on csr.supplier_delegation to csrimp;
grant select, insert, update on csr.user_msg_file to csrimp;
grant select, insert, update on csr.val_file to csrimp;
grant select, insert, update on csr.val_note to csrimp;
grant select on csr.ind_set_id_seq to csrimp;
grant select on csr.issue_meter_missing_data_seq to csrimp;
grant select on csr.route_log_id_seq to csrimp;
grant select on csr.sheet_change_req_id_seq to csrimp;
grant select on csr.sheet_change_req_alert_id_seq to csrimp;
grant select on csr.user_msg_file_id_seq to csrimp;
grant select on csr.val_note_id_seq to csrimp;
grant select, insert, update, delete on csrimp.init_tab_element_layout to tool_user;
grant select, insert, update, delete on csrimp.init_create_page_el_layout to tool_user;
grant select, insert, update, delete on csrimp.initiative_header_element to tool_user;
GRANT SELECT, INSERT, UPDATE ON csrimp.custom_factor_set TO tool_user;
GRANT SELECT, INSERT, UPDATE ON csrimp.custom_factor TO tool_user;
GRANT SELECT, INSERT, UPDATE ON csrimp.emission_factor_profile TO tool_user;
GRANT SELECT, INSERT, UPDATE ON csrimp.emission_factor_profile_factor TO tool_user;


ALTER TABLE chain.dedupe_mapping ADD CONSTRAINT FK_DEDUPE_MAPPING_COL_DEST
	FOREIGN KEY (app_sid, destination_col_sid, destination_tab_sid)
	REFERENCES cms.tab_column(app_sid, column_sid, tab_sid);
	
ALTER TABLE chain.dedupe_merge_log ADD CONSTRAINT FK_DEDUPE_MERGE_LOG_DEST
	FOREIGN KEY (app_sid, destination_col_sid, destination_tab_sid)
	REFERENCES cms.tab_column(app_sid, column_sid, tab_sid);


CREATE OR REPLACE VIEW csr.v$all_audit_validity AS --more basic version of v$audit_next_due that returns all audits carried out and their validity instead of just the most recent of each 	 
	SELECT ia.internal_audit_sid, ia.internal_audit_type_id, ia.region_sid,
	ia.audit_dtm previous_audit_dtm, act.audit_closure_type_id, ia.app_sid,
	CASE (atct.re_audit_due_after_type)
		WHEN 'd' THEN nvl(ia.ovw_validity_dtm, ia.audit_dtm + atct.re_audit_due_after)
		WHEN 'w' THEN nvl(ia.ovw_validity_dtm, ia.audit_dtm + (atct.re_audit_due_after*7))
		WHEN 'm' THEN nvl(ia.ovw_validity_dtm, ADD_MONTHS(ia.audit_dtm, atct.re_audit_due_after))
		WHEN 'y' THEN nvl(ia.ovw_validity_dtm, ADD_MONTHS(ia.audit_dtm, atct.re_audit_due_after*12))
		ELSE ia.ovw_validity_dtm
	END next_audit_due_dtm, atct.reminder_offset_days, act.label closure_label,
	act.is_failure, ia.label previous_audit_label, act.icon_image_filename,
	ia.auditor_user_sid previous_auditor_user_sid, ia.flow_item_id, ia.ovw_validity_dtm
	  FROM csr.internal_audit ia
	  LEFT JOIN csr.audit_type_closure_type atct
		ON ia.audit_closure_type_id = atct.audit_closure_type_id
	   AND ia.app_sid = atct.app_sid
	   AND ia.internal_audit_type_id = atct.internal_audit_type_id
	  LEFT JOIN csr.audit_closure_type act
		ON atct.audit_closure_type_id = act.audit_closure_type_id
	   AND atct.app_sid = act.app_sid
	 WHERE ia.deleted = 0;	 
	 
CREATE OR REPLACE VIEW csr.v$audit_validity AS --more restrictive version of v$all_audit_validity that only returns audits that have a validity
	SELECT internal_audit_sid, internal_audit_type_id, region_sid,
	previous_audit_dtm, audit_closure_type_id, app_sid,
    next_audit_due_dtm, reminder_offset_days, closure_label,
	is_failure, previous_audit_label, icon_image_filename,
	previous_auditor_user_sid, flow_item_id
	  FROM v$all_audit_validity ia
	   WHERE (ia.audit_closure_type_id IS NOT NULL OR ia.ovw_validity_dtm IS NOT NULL);
CREATE OR REPLACE VIEW csr.v$audit AS
	SELECT ia.internal_audit_sid, ia.region_sid, r.description region_description, ia.audit_dtm, ia.label,
		   NVL2(ia.internal_audit_ref, atg.internal_audit_ref_prefix || ia.internal_audit_ref, null) custom_audit_id,
		   atg.internal_audit_ref_prefix, ia.internal_audit_ref, ia.ovw_validity_dtm,
		   ia.auditor_user_sid, NVL(cu.full_name, au.full_name) auditor_full_name, sr.submitted_dtm survey_completed,
		   NVL(nc.cnt, 0) open_non_compliances, ia.survey_sid, ia.auditor_name, ia.auditor_organisation,
		   r.region_type, r.geo_longitude longitude, r.geo_latitude latitude, rt.class_name region_type_class_name,
		   ia.auditee_user_sid, u.full_name auditee_full_name, u.email auditee_email,
		   SUBSTR(ia.notes, 1, 50) short_notes, ia.notes full_notes,
		   iat.internal_audit_type_id audit_type_id, iat.label audit_type_label, iat.interactive audit_type_interactive,
		   qs.label survey_label, ia.app_sid, ia.internal_audit_type_id, iat.auditor_role_sid,
		   iat.audit_contact_role_sid, ia.audit_closure_type_id, act.label closure_label, act.icon_image_filename, cast(act.icon_image_sha1  as varchar2(40)) icon_image_sha1,
		   ia.created_by_user_sid, ia.survey_response_id, ia.created_dtm, NVL(cu.email, au.email) auditor_email,
		   iat.assign_issues_to_role, iat.add_nc_per_question, cvru.user_giving_cover_sid cover_auditor_sid,
		   fi.flow_sid, f.label flow_label, ia.flow_item_id, fi.current_state_id, fs.label flow_state_label, fs.is_final flow_state_is_final, 
		   fs.state_colour flow_state_colour, act.is_failure,
		   sqs.survey_sid summary_survey_sid, sqs.label summary_survey_label, ssr.survey_version summary_survey_version, ia.summary_response_id,
		   ia.auditor_company_sid, ac.name auditor_company_name, iat.tab_sid, iat.form_path, ia.comparison_response_id, iat.nc_audit_child_region,
		   atg.label ia_type_group_label, atg.lookup_key ia_type_group_lookup_key, atg.internal_audit_type_group_id, iat.form_sid,
		   atg.audit_singular_label, atg.audit_plural_label, atg.auditee_user_label, atg.auditor_user_label, atg.auditor_name_label,
		   sr.overall_score survey_overall_score, sr.overall_max_score survey_overall_max_score, sr.survey_version,
		   sst.score_type_id survey_score_type_id, sr.score_threshold_id survey_score_thrsh_id, sst.label survey_score_label, sst.format_mask survey_score_format_mask,
		   ia.nc_score, iat.nc_score_type_id, NVL(ia.ovw_nc_score_thrsh_id, ia.nc_score_thrsh_id) nc_score_thrsh_id, ncst.max_score nc_max_score, ncst.label nc_score_label,
		   ncst.format_mask nc_score_format_mask,
		   CASE (atct.re_audit_due_after_type)
				WHEN 'd' THEN nvl(ia.ovw_validity_dtm, ia.audit_dtm + atct.re_audit_due_after)
				WHEN 'w' THEN nvl(ia.ovw_validity_dtm, ia.audit_dtm + (atct.re_audit_due_after*7))
				WHEN 'm' THEN nvl(ia.ovw_validity_dtm, ADD_MONTHS(ia.audit_dtm, atct.re_audit_due_after))
				WHEN 'y' THEN nvl(ia.ovw_validity_dtm, ADD_MONTHS(ia.audit_dtm, atct.re_audit_due_after*12))
				ELSE ia.ovw_validity_dtm END next_audit_due_dtm
	  FROM csr.internal_audit ia
	  LEFT JOIN (
			SELECT auc.app_sid, auc.internal_audit_sid, auc.user_giving_cover_sid,
				   ROW_NUMBER() OVER (PARTITION BY auc.internal_audit_sid ORDER BY LEVEL DESC, uc.start_dtm DESC,  uc.user_cover_id DESC) rn,
				   CONNECT_BY_ROOT auc.user_being_covered_sid user_being_covered_sid
			  FROM csr.audit_user_cover auc
			  JOIN csr.user_cover uc ON auc.app_sid = uc.app_sid AND auc.user_cover_id = uc.user_cover_id
			 CONNECT BY NOCYCLE PRIOR auc.app_sid = auc.app_sid AND PRIOR auc.user_being_covered_sid = auc.user_giving_cover_sid
		) cvru
	    ON ia.internal_audit_sid = cvru.internal_audit_sid
	   AND ia.app_sid = cvru.app_sid AND ia.auditor_user_sid = cvru.user_being_covered_sid
	   AND cvru.rn = 1
	  LEFT JOIN csr.csr_user u ON ia.auditee_user_sid = u.csr_user_sid AND ia.app_sid = u.app_sid
	  JOIN csr.csr_user au ON ia.auditor_user_sid = au.csr_user_sid AND ia.app_sid = au.app_sid
	  LEFT JOIN csr.csr_user cu ON cvru.user_giving_cover_sid = cu.csr_user_sid AND cvru.app_sid = cu.app_sid
	  LEFT JOIN csr.internal_audit_type iat ON ia.app_sid = iat.app_sid AND ia.internal_audit_type_id = iat.internal_audit_type_id
	  LEFT JOIN csr.internal_audit_type_group atg ON atg.app_sid = iat.app_sid AND atg.internal_audit_type_group_id = iat.internal_audit_type_group_id
	  LEFT JOIN csr.v$quick_survey_response sr ON ia.survey_response_id = sr.survey_response_id AND ia.app_sid = sr.app_sid
	  LEFT JOIN csr.v$quick_survey_response ssr ON ia.summary_response_id = ssr.survey_response_id AND ia.app_sid = sr.app_sid
	  LEFT JOIN csr.v$quick_survey qs ON ia.survey_sid = qs.survey_sid AND ia.app_sid = qs.app_sid
	  LEFT JOIN csr.v$quick_survey sqs ON NVL(ssr.survey_sid, iat.summary_survey_sid) = sqs.survey_sid AND iat.app_sid = sqs.app_sid
	  LEFT JOIN (
			SELECT anc.app_sid, anc.internal_audit_sid, COUNT(DISTINCT anc.non_compliance_id) cnt
			  FROM csr.audit_non_compliance anc
			  JOIN csr.non_compliance nnc ON anc.non_compliance_id = nnc.non_compliance_id AND anc.app_sid = nnc.app_sid
			  LEFT JOIN csr.issue_non_compliance inc ON nnc.non_compliance_id = inc.non_compliance_id AND nnc.app_sid = inc.app_sid
			  LEFT JOIN csr.issue i ON inc.issue_non_compliance_id = i.issue_non_compliance_id AND inc.app_sid = i.app_sid
			 WHERE ((nnc.is_closed IS NULL
			   AND i.resolved_dtm IS NULL
			   AND i.rejected_dtm IS NULL
			   AND i.deleted = 0)
			    OR nnc.is_closed = 0)
			 GROUP BY anc.app_sid, anc.internal_audit_sid
			) nc ON ia.internal_audit_sid = nc.internal_audit_sid AND ia.app_sid = nc.app_sid
	  LEFT JOIN csr.v$region r ON ia.app_sid = r.app_sid AND ia.region_sid = r.region_sid
	  LEFT JOIN csr.region_type rt ON r.region_type = rt.region_type
	  LEFT JOIN csr.audit_closure_type act ON ia.audit_closure_type_id = act.audit_closure_type_id AND ia.app_sid = act.app_sid
	  LEFT JOIN csr.audit_type_closure_type atct ON ia.audit_closure_type_id = atct.audit_closure_type_id AND ia.internal_audit_type_id = atct.internal_audit_type_id AND ia.app_sid = atct.app_sid
	  LEFT JOIN csr.flow_item fi
	    ON ia.app_sid = fi.app_sid AND ia.flow_item_id = fi.flow_item_id
	  LEFT JOIN csr.flow_state fs
	    ON fs.app_sid = fi.app_sid AND fs.flow_state_id = fi.current_state_id
	  LEFT JOIN csr.flow f
	    ON f.app_sid = fi.app_sid AND f.flow_sid = fi.flow_sid
	  LEFT JOIN chain.company ac
	    ON ia.auditor_company_sid = ac.company_sid AND ia.app_sid = ac.app_sid
	  LEFT JOIN score_type ncst ON ncst.app_sid = iat.app_sid AND ncst.score_type_id = iat.nc_score_type_id
	  LEFT JOIN score_type sst ON sst.app_sid = qs.app_sid AND sst.score_type_id = qs.score_type_id
	 WHERE ia.deleted = 0;
CREATE OR REPLACE VIEW csr.v$factor_type AS
SELECT f.factor_type_id, f.parent_id, f.name, f.std_measure_id, f.egrid, af.active, uf.in_use, decode(i.factor_type_id, NULL, 0, 1) mapped
  FROM csr.factor_type f
  LEFT JOIN (SELECT DISTINCT factor_type_id FROM csr.ind) i ON f.factor_type_id = i.factor_type_id
  LEFT JOIN (
    SELECT factor_type_id, 1 active FROM (
          SELECT DISTINCT af.factor_type_id
            FROM csr.factor_type af
           START WITH af.factor_type_id
            IN (
              SELECT DISTINCT aaf.factor_type_id
                FROM csr.factor_type aaf
                JOIN csr.std_factor sf ON sf.factor_type_id = aaf.factor_type_id
                JOIN csr.std_factor_set_active sfa ON sfa.std_factor_set_id = sf.std_factor_set_id
            )
           CONNECT BY PRIOR parent_id = af.factor_type_id
          UNION
          SELECT DISTINCT f.factor_type_id
            FROM csr.factor_type f
                 START WITH f.factor_type_id
                  IN (
              SELECT DISTINCT f.factor_type_id
                FROM csr.factor_type f
                JOIN csr.custom_factor sf ON sf.factor_type_id = f.factor_type_id
                 AND sf.app_sid = security.security_pkg.getApp
               WHERE std_measure_id IS NOT NULL
            )
          CONNECT BY PRIOR parent_id = f.factor_type_id
          UNION
          SELECT 3 factor_type_id
            FROM dual
        )) af ON f.factor_type_id = af.factor_type_id
   LEFT JOIN (
    SELECT factor_type_id, 1 in_use FROM (
      SELECT factor_type_id
        FROM csr.factor_type
       START WITH factor_type_id
          IN (
          SELECT DISTINCT factor_type_id
            FROM csr.factor
           WHERE app_sid = SYS_CONTEXT('SECURITY', 'APP')
      )
      CONNECT BY PRIOR parent_id = factor_type_id
      UNION
      SELECT DISTINCT f.factor_type_id
        FROM csr.factor_type f
             START WITH f.factor_type_id
              IN (
          SELECT DISTINCT f.factor_type_id
            FROM csr.factor_type f
            JOIN csr.custom_factor sf ON sf.factor_type_id = f.factor_type_id
             AND sf.app_sid = security.security_pkg.getApp
           WHERE std_measure_id IS NOT NULL
        )
      CONNECT BY PRIOR parent_id = f.factor_type_id
      UNION
      SELECT factor_type_id
        FROM csr.factor_type
       START WITH factor_type_id
          IN (
          SELECT DISTINCT factor_type_id
            FROM csr.factor
           WHERE app_sid = SYS_CONTEXT('SECURITY', 'APP')
      )
      CONNECT BY PRIOR factor_type_id = parent_id
      UNION
      SELECT 3 factor_type_id
        FROM dual
    )) uf ON f.factor_type_id = uf.factor_type_id;
CREATE OR REPLACE VIEW chain.v$filter_value AS
       SELECT f.app_sid, f.filter_id, ff.filter_field_id, ff.name, fv.filter_value_id, fv.str_value,
			fv.num_value, fv.min_num_val, fv.max_num_val, fv.start_dtm_value, fv.end_dtm_value, fv.region_sid, fv.user_sid,
			fv.compound_filter_id_value, fv.saved_filter_sid_value, fv.pos,
			COALESCE(
				fv.description,
				CASE fv.user_sid WHEN -1 THEN 'Me' WHEN -2 THEN 'My roles' WHEN -3 THEN 'My staff' END,
				r.description,
				cu.full_name,
				cr.name,
				fv.str_value
			) description,
			ff.group_by_index,
			f.compound_filter_id, ff.show_all, ff.period_set_id, ff.period_interval_id, fv.start_period_id, 
			fv.filter_type, fv.null_filter, fv.colour
	  FROM filter f
	  JOIN filter_field ff ON f.app_sid = ff.app_sid AND f.filter_id = ff.filter_id
	  JOIN filter_value fv ON ff.app_sid = fv.app_sid AND ff.filter_field_id = fv.filter_field_id
	  LEFT JOIN csr.v$region r ON fv.region_sid = r.region_sid AND fv.app_sid = r.app_sid
	  LEFT JOIN csr.csr_user cu ON fv.user_sid = cu.csr_user_sid AND fv.app_sid = cu.app_sid
	  LEFT JOIN csr.role cr ON fv.user_sid = cr.role_sid AND fv.app_sid = cr.app_sid;
	  
CREATE OR REPLACE VIEW csr.v$issue AS
SELECT i.app_sid, NVL2(i.issue_ref, ist.internal_issue_ref_prefix || i.issue_ref, null) custom_issue_id, i.issue_id, i.label, i.description, i.source_label, i.is_visible, i.source_url, i.region_sid, re.description region_name, i.parent_id,
	   i.issue_escalated, i.owner_role_sid, i.owner_user_sid, cuown.user_name owner_user_name, cuown.full_name owner_full_name, cuown.email owner_email,
	   r2.name owner_role_name, i.first_issue_log_id, i.last_issue_log_id, NVL(lil.logged_dtm, i.raised_dtm) last_modified_dtm,
	   i.is_public, i.is_pending_assignment, i.rag_status_id, i.manual_completion_dtm, manual_comp_dtm_set_dtm, itrs.label rag_status_label, itrs.colour rag_status_colour,
	   raised_by_user_sid, raised_dtm, curai.user_name raised_user_name, curai.full_name raised_full_name, curai.email raised_email,
	   resolved_by_user_sid, resolved_dtm, cures.user_name resolved_user_name, cures.full_name resolved_full_name, cures.email resolved_email,
	   closed_by_user_sid, closed_dtm, cuclo.user_name closed_user_name, cuclo.full_name closed_full_name, cuclo.email closed_email,
	   rejected_by_user_sid, rejected_dtm, curej.user_name rejected_user_name, curej.full_name rejected_full_name, curej.email rejected_email,
	   assigned_to_user_sid, cuass.user_name assigned_to_user_name, cuass.full_name assigned_to_full_name, cuass.email assigned_to_email,
	   assigned_to_role_sid, r.name assigned_to_role_name, c.correspondent_id, c.full_name correspondent_full_name, c.email correspondent_email, c.phone correspondent_phone, 
	   c.more_info_1 correspondent_more_info_1, sysdate now_dtm, due_dtm, forecast_dtm, ist.issue_type_Id, ist.label issue_type_label, ist.require_priority, 
	   ist.allow_children, ist.can_set_public, ist.show_forecast_dtm, ist.require_var_expl, ist.enable_reject_action, ist.require_due_dtm_comment, 
	   ist.enable_manual_comp_date, ist.comment_is_optional, ist.due_date_is_mandatory, ist.is_region_editable is_issue_type_region_editable, i.issue_priority_id, 
	   ip.due_date_offset, ip.description priority_description,
	   CASE WHEN i.issue_priority_id IS NULL OR i.due_dtm = i.raised_dtm + ip.due_date_offset THEN 0 ELSE 1 END priority_overridden, 
	   i.first_priority_set_dtm, issue_pending_val_id, i.issue_sheet_value_id, issue_survey_answer_id, issue_non_compliance_Id, issue_action_id, issue_meter_id,
	   issue_meter_alarm_id, issue_meter_raw_data_id, issue_meter_data_source_id, issue_meter_missing_data_id, issue_supplier_id,
	   CASE WHEN closed_by_user_sid IS NULL AND resolved_by_user_sid IS NULL AND rejected_by_user_sid IS NULL AND SYSDATE > NVL(forecast_dtm, due_dtm) THEN 1 ELSE 0
	   END is_overdue,
	   CASE WHEN rrm.user_sid = SYS_CONTEXT('SECURITY', 'SID') OR i.owner_user_sid = SYS_CONTEXT('SECURITY', 'SID') THEN 1 ELSE 0
	   END is_owner,
	   CASE WHEN assigned_to_user_sid = SYS_CONTEXT('SECURITY', 'SID') THEN 1 ELSE 0 --OR #### HOW + WHERE CAN I GET THE ROLES THE USER IS PART OF??
	   END is_assigned_to_you,
	   CASE WHEN i.resolved_dtm IS NULL AND i.manual_completion_dtm IS NULL THEN 0 ELSE 1
	   END is_resolved,
	   CASE WHEN i.closed_dtm IS NULL THEN 0 ELSE 1
	   END is_closed,
	   CASE WHEN i.rejected_dtm IS NULL THEN 0 ELSE 1
	   END is_rejected,
	   CASE
		WHEN i.closed_dtm IS NOT NULL THEN 'Closed'
		WHEN i.resolved_dtm IS NOT NULL THEN 'Resolved'
		WHEN i.rejected_dtm IS NOT NULL THEN 'Rejected'
		ELSE 'Ongoing'
	   END status,
	   CASE WHEN ist.auto_close_after_resolve_days IS NULL THEN NULL ELSE i.allow_auto_close END allow_auto_close, ist.auto_close_after_resolve_days,
	   ist.restrict_users_to_region, ist.deletable_by_administrator, ist.deletable_by_owner, ist.deletable_by_raiser, ist.send_alert_on_issue_raised,
	   ind.ind_sid, ind.description ind_name, isv.start_dtm, isv.end_dtm, ist.owner_can_be_changed, ist.show_one_issue_popup, ist.lookup_key, ist.allow_owner_resolve_and_close,
	   CASE WHEN ist.get_assignables_sp IS NULL THEN 0 ELSE 1 END get_assignables_overridden, ist.create_raw
  FROM issue i, issue_type ist, csr_user curai, csr_user cures, csr_user cuclo, csr_user curej, csr_user cuass, csr_user cuown,  role r, role r2, correspondent c, issue_priority ip,
	   (SELECT * FROM region_role_member WHERE user_sid = SYS_CONTEXT('SECURITY', 'SID')) rrm, v$region re, issue_log lil, v$issue_type_rag_status itrs,
	   v$ind ind, issue_sheet_value isv
 WHERE i.app_sid = curai.app_sid AND i.raised_by_user_sid = curai.csr_user_sid
   AND i.app_sid = ist.app_sid AND i.issue_type_Id = ist.issue_type_id
   AND i.app_sid = cures.app_sid(+) AND i.resolved_by_user_sid = cures.csr_user_sid(+)
   AND i.app_sid = cuclo.app_sid(+) AND i.closed_by_user_sid = cuclo.csr_user_sid(+)
   AND i.app_sid = curej.app_sid(+) AND i.rejected_by_user_sid = curej.csr_user_sid(+)
   AND i.app_sid = cuass.app_sid(+) AND i.assigned_to_user_sid = cuass.csr_user_sid(+)
   AND i.app_sid = cuown.app_sid(+) AND i.owner_user_sid = cuown.csr_user_sid(+)
   AND i.app_sid = r.app_sid(+) AND i.assigned_to_role_sid = r.role_sid(+)
   AND i.app_sid = r2.app_sid(+) AND i.owner_role_sid = r2.role_sid(+)
   AND i.app_sid = re.app_sid(+) AND i.region_sid = re.region_sid(+)
   AND i.app_sid = c.app_sid(+) AND i.correspondent_id = c.correspondent_id(+)
   AND i.app_sid = ip.app_sid(+) AND i.issue_priority_id = ip.issue_priority_id(+)
   AND i.app_sid = rrm.app_sid(+) AND i.region_sid = rrm.region_sid(+) AND i.owner_role_sid = rrm.role_sid(+)
   AND i.app_sid = lil.app_sid(+) AND i.last_issue_log_id = lil.issue_log_id(+)
   AND i.app_sid = itrs.app_sid(+) AND i.rag_status_id = itrs.rag_status_id(+) AND i.issue_type_id = itrs.issue_type_id(+)
   AND i.app_sid = isv.app_sid(+) AND i.issue_sheet_value_id = isv.issue_sheet_value_id(+)
   AND isv.app_sid = ind.app_sid(+) AND isv.ind_sid = ind.ind_sid(+)
   AND i.deleted = 0;
   
CREATE OR REPLACE VIEW csr.val_converted (
	app_sid, val_id, ind_sid, region_sid, period_start_dtm, period_end_dtm, val_number,
	error_code, alert, flags, source_id, entry_measure_conversion_id, entry_val_number,
	note, source_type_id, factor_a, factor_b, factor_c, changed_by_sid, changed_dtm
) AS
	SELECT v.app_sid, v.val_id, v.ind_sid, v.region_sid, v.period_start_dtm, v.period_end_dtm,
	       -- we derive val_number from entry_val_number in case of pct_ownership
	       -- we round the value to avoid Arithmetic Overflows from converting Oracle Decimals to .NET Decimals
		   ROUND(COALESCE(mc.a, mcp.a, 1) * POWER(v.entry_val_number, COALESCE(mc.b, mcp.b, 1)) + COALESCE(mc.c, mcp.c, 0), 10) val_number,
		   v.error_code,
		   v.alert, v.flags, v.source_id,
		   v.entry_measure_conversion_id, v.entry_val_number,
		   v.note, v.source_type_id,
		   NVL(mc.a, mcp.a) factor_a,
		   NVL(mc.b, mcp.b) factor_b,
		   NVL(mc.c, mcp.c) factor_c,
		   v.changed_by_sid, v.changed_dtm
	  FROM val v, measure_conversion mc, measure_conversion_period mcp
	 WHERE mc.measure_conversion_id = mcp.measure_conversion_id(+)
	   AND v.entry_measure_conversion_id = mc.measure_conversion_id(+)
	   AND (v.period_start_dtm >= mcp.start_dtm or mcp.start_dtm is null)
	   AND (v.period_start_dtm < mcp.end_dtm or mcp.end_dtm is null);
CREATE OR REPLACE FORCE VIEW csr.sheet_value_converted
	(app_sid, sheet_value_id, sheet_id, ind_sid, region_sid, val_number, set_by_user_sid,
	 set_dtm, note, entry_measure_conversion_id, entry_val_number, is_inherited,
	 status, last_sheet_value_change_id, alert, flag, factor_a, factor_b, factor_c,
	 start_dtm, end_dtm, actual_val_number, var_expl_note, is_na) AS
  SELECT sv.app_sid, sv.sheet_value_id, sv.sheet_id, sv.ind_sid, sv.region_sid,
	       -- we derive val_number from entry_val_number in case of pct_ownership
	       -- we round the value to avoid Arithmetic Overflows from converting Oracle Decimals to .NET Decimals
		 ROUND(COALESCE(mc.a, mcp.a, 1) * POWER(sv.entry_val_number, COALESCE(mc.b, mcp.b, 1)) + COALESCE(mc.c, mcp.c, 0), 10) val_number,
         sv.set_by_user_sid, sv.set_dtm, sv.note,
         sv.entry_measure_conversion_id, sv.entry_val_number,
         sv.is_inherited, sv.status, sv.last_sheet_value_change_id,
         sv.alert, sv.flag,
         NVL(mc.a, mcp.a) factor_a,
         NVL(mc.b, mcp.b) factor_b,
         NVL(mc.c, mcp.c) factor_c,
         s.start_dtm, s.end_dtm, sv.val_number actual_val_number, var_expl_note,
		 sv.is_na
    FROM sheet_value sv, sheet s, measure_conversion mc, measure_conversion_period mcp
   WHERE sv.app_sid = s.app_sid
     AND sv.sheet_id = s.sheet_id
     AND sv.app_sid = mc.app_sid(+)
     AND sv.entry_measure_conversion_id = mc.measure_conversion_id(+)
     AND mc.app_sid = mcp.app_sid(+)
     AND mc.measure_conversion_id = mcp.measure_conversion_id(+)
     AND (s.start_dtm >= mcp.start_dtm or mcp.start_dtm is null)
     AND (s.start_dtm < mcp.end_dtm or mcp.end_dtm is null)
;
CREATE OR REPLACE FORCE VIEW csr.PENDING_VAL_CONVERTED (
	pending_val_id, pending_ind_id, pending_region_id, pending_period_id, approval_step_id,
	 val_number, val_string, from_val_number, from_measure_conversion_id, action,
	 factor_a, factor_b, factor_c, start_dtm, end_dtm, actual_val_number
) AS
  SELECT pending_val_id, pending_ind_id, pending_region_id, pv.pending_period_id, approval_step_id,
	     COALESCE(mc.a, mcp.a, 1) * POWER(pv.from_val_number, COALESCE(mc.b, mcp.b, 1)) + COALESCE(mc.c, mcp.c, 0) val_number,
		val_string,
		from_val_number,
		from_measure_conversion_id,
		action,
	    NVL(mc.a, mcp.a) factor_a,
	    NVL(mc.b, mcp.b) factor_b,
	    NVL(mc.c, mcp.c) factor_c,
	    pp.start_dtm,
	    pp.end_dtm,
	    pv.val_number actual_val_number
    FROM pending_val pv, pending_period pp, measure_conversion mc, measure_conversion_period mcp
   WHERE pp.pending_period_id = pv.pending_period_id
     AND pv.from_measure_conversion_id = mc.measure_conversion_id(+)
     AND mc.measure_conversion_id = mcp.measure_conversion_id(+)
     AND (pp.start_dtm >= mcp.start_dtm or mcp.start_dtm is null)
     AND (pp.start_dtm < mcp.end_dtm or mcp.end_dtm is null);
CREATE OR REPLACE VIEW csr.v$imp_val_mapped AS
	SELECT iv.imp_val_id, iv.imp_session_Sid, iv.file_sid, ii.maps_to_ind_sid, iv.start_dtm, iv.end_dtm,
		   ii.description ind_description,
		   i.description maps_to_ind_description,
		   ir.description region_description,
		   i.aggregate,
		   iv.val,
		   COALESCE(mc.a, mcp.a, 1) factor_a,
		   COALESCE(mc.b, mcp.b, 1) factor_b,
		   COALESCE(mc.c, mcp.c, 0) factor_c,
		   m.description measure_description,
		   im.maps_to_measure_conversion_id,
		   mc.description from_measure_description,
		   NVL(i.format_mask, m.format_mask) format_mask,
		   ir.maps_to_region_sid,
		   iv.rowid rid,
		   ii.app_Sid, iv.note,
		   CASE WHEN m.custom_field LIKE '|%' THEN 1 ELSE 0 END is_text_ind,
		   icv.imp_conflict_id,
		   m.measure_sid,
		   iv.imp_ind_id, iv.imp_region_id,
		   CASE WHEN rm.ind_Sid IS NOT NULL THEN 1 ELSE 0 END is_region_metric
	  FROM imp_val iv
		   JOIN imp_ind ii
		   		 ON iv.imp_ind_id = ii.imp_ind_id
		   		AND iv.app_sid = ii.app_sid
		   		AND ii.maps_to_ind_sid IS NOT NULL
		   JOIN imp_region ir
		  		 ON iv.imp_region_id = ir.imp_region_id
		   		AND iv.app_sid = ir.app_sid
		   		AND ir.maps_to_region_sid IS NOT NULL
	  LEFT JOIN imp_measure im
	      		 ON iv.imp_ind_id = im.imp_ind_id
	      		AND iv.imp_measure_id = im.imp_measure_id
	      		AND iv.app_sid = im.app_sid
	  LEFT JOIN measure_conversion mc
				 ON im.maps_to_measure_conversion_id = mc.measure_conversion_id
				AND im.app_sid = mc.app_sid
      LEFT JOIN measure_conversion_period mcp
				 ON mc.measure_conversion_id = mcp.measure_conversion_id
				AND (iv.start_dtm >= mcp.start_dtm or mcp.start_dtm is null)
				AND (iv.start_dtm < mcp.end_dtm or mcp.end_dtm is null)
	  LEFT JOIN imp_conflict_val icv
				 ON iv.imp_val_id = icv.imp_val_id
				AND iv.app_sid = icv.app_sid
		   JOIN v$ind i
				 ON ii.maps_to_ind_sid = i.ind_sid
				AND ii.app_sid = i.app_sid
				AND i.ind_type = 0
	  LEFT JOIN region_metric rm
				 ON i.ind_sid = rm.ind_sid AND i.app_sid = rm.app_sid
			   JOIN measure m
				 ON i.measure_sid = m.measure_sid
				AND i.app_sid = m.app_sid;




INSERT INTO csr.batched_export_type (BATCH_EXPORT_TYPE_ID, LABEL, ASSEMBLY)
VALUES (15, 'Forecasting Slot export', 'Credit360.ExportImport.Export.Batched.Exporters.ForecastingSlotExporter');
INSERT INTO csr.batched_import_type (BATCH_IMPORT_TYPE_ID, LABEL, ASSEMBLY)
VALUES (4, 'Forecasting Slot import', 'Credit360.ExportImport.Import.Batched.Importers.ForecastingSlotImporter');
BEGIN
	INSERT INTO csr.module (module_id, module_name, enable_sp, description, license_warning)
	VALUES (89, 'Forecasting', 'EnableForecasting', 'Enables Forecasting', 1);
END;
/
CREATE INDEX CSR.IX_FORECASTING_E_CSR_USER_SID ON CSR.FORECASTING_EMAIL_SUB (APP_SID, CSR_USER_SID);
INSERT INTO csr.plugin (
	plugin_id, 
	plugin_type_id, 
	description, 
	js_include, 
	js_class, 
	cs_class, 
	details
) VALUES (
	csr.plugin_id_seq.nextval, 
	10, 
	'Document library', 
	'/csr/site/chain/managecompany/controls/DocLibTab.js',
	'Chain.ManageCompany.DocLibTab', 
	'Credit360.Chain.Plugins.DocLibTabDto', 
	'This tab will show the document library for the selected company.'
);
INSERT INTO CSR.AUDIT_TYPE ( AUDIT_TYPE_GROUP_ID, AUDIT_TYPE_ID, LABEL ) 
VALUES (1, 28, 'Factor');
UPDATE csr.std_factor_set SET factor_set_group_id = 16 WHERE std_factor_set_id in (65, 66);
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Electric', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Electric on Site Solar', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Electric on Site Wind', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Natural Gas', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 1', 'Gallons (UK)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 1', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 2', 'Gallons (UK)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 2', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 4', 'Gallons (UK)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 4', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 5 or 6', 'Gallons (UK)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Fuel Oil No 5 or 6', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Diesel', 'Gallons (UK)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Diesel', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Kerosene', 'Gallons (UK)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Kerosene', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Propane', 'ccf');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Propane', 'Gallons (UK)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Propane', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('District Steam', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('District Steam', 'kg');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('District Hot Water', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('District Chilled Water - Absorption Chiller using Natural Gas', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('District Chilled Water - Electric-Driven Chiller', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('District Chilled Water - Engine-Driven Chiller using Natural Gas', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('District Chilled Water - Other', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Coal Anthracite', 'Tonnes (metric)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Coal Anthracite', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Coal Bituminous', 'Tonnes (metric)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Coal Bituminous', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Coke', 'Tonnes (metric)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Coke', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Wood', 'Tonnes (metric)');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Wood', 'GJ');
INSERT INTO csr.est_meter_conv (meter_type, uom) VALUES ('Other (Energy)', 'GJ');
INSERT INTO csr.batched_export_type (BATCH_EXPORT_TYPE_ID, LABEL, ASSEMBLY)
VALUES (13, 'CMS quick chart exporter', 'Credit360.ExportImport.Export.Batched.Exporters.CmsQuickChartExporter');
INSERT INTO csr.batched_export_type (BATCH_EXPORT_TYPE_ID, LABEL, ASSEMBLY)
VALUES (14, 'CMS exporter', 'Credit360.ExportImport.Export.Batched.Exporters.CmsExporter');
BEGIN
	INSERT INTO csr.batched_export_type (
		batch_export_type_id, label, assembly
	) VALUES (
		12, 'Region translations', 'Credit360.ExportImport.Export.Batched.Exporters.RegionTranslationExporter'
	);
END;
/
DECLARE
	v_id	NUMBER(10);
BEGIN   
	security.user_pkg.logonadmin;
	security.class_pkg.CreateClass(SYS_CONTEXT('SECURITY','ACT'), security.class_pkg.GetClassId('Mailbox'), 'CSRMailbox', 'csr.mailbox_pkg', null, v_id);
EXCEPTION
	WHEN security.security_pkg.DUPLICATE_OBJECT_NAME THEN
		NULL;
END;
/
BEGIN
	INSERT INTO CSR.AUDIT_TYPE ( AUDIT_TYPE_GROUP_ID, AUDIT_TYPE_ID, LABEL ) VALUES (1, 300, 'Automated import mailbox change');
END;
/
INSERT INTO csr.batched_import_type (BATCH_IMPORT_TYPE_ID, LABEL, ASSEMBLY)
VALUES (3, 'Meter readings import', 'Credit360.ExportImport.Batched.Import.Importers.MeterReadingsImporter');
DECLARE
	v_detached			NUMBER(1, 0);
	v_iats_id			NUMBER(10, 0);
BEGIN
	security.user_pkg.logonadmin;
	FOR site IN (
		SELECT c.app_sid, c.host
		  FROM csr.customer c
		 WHERE EXISTS (
				SELECT NULL
				  FROM csr.non_compliance
				 WHERE app_sid = c.app_sid
				   AND xxx_survey_response_id IS NOT NULL
		 )
	) LOOP
		security.user_pkg.logonadmin(site.host);
		FOR r IN (
			SELECT nc.app_sid, nc.non_compliance_id, nc.created_in_audit_sid, nc.xxx_survey_response_id,
				   CASE WHEN nc.xxx_survey_response_id = ia.survey_response_id THEN 0 ELSE iats.internal_audit_type_survey_id END internal_audit_type_survey_id,  
				   CASE WHEN nc.xxx_survey_response_id = ia.survey_response_id THEN 0 ELSE iats.ia_type_survey_group_id END ia_type_survey_group_id
			  FROM csr.non_compliance nc
			  JOIN csr.internal_audit ia ON ia.internal_audit_sid = nc.created_in_audit_sid
			  LEFT JOIN csr.internal_audit_survey ias ON ias.internal_audit_sid = nc.created_in_audit_sid
													 AND ias.survey_response_id = nc.xxx_survey_response_id
													 AND ias.app_sid = nc.app_sid
			  LEFT JOIN csr.internal_audit_type_survey iats ON iats.internal_audit_type_survey_id = ias.internal_audit_type_survey_id
														   AND iats.app_sid = ias.app_sid
			 WHERE nc.app_sid = site.app_sid
			   AND nc.xxx_survey_response_id IS NOT NULL
		) LOOP
			IF r.internal_audit_type_survey_id = 0 THEN
				UPDATE csr.audit_non_compliance
					   SET attached_to_primary_survey = 1
					 WHERE non_compliance_id = r.non_compliance_id
					   AND app_sid = r.app_sid;
			ELSE
				v_detached := 0;
				FOR rr IN (
					SELECT anc.app_sid, anc.audit_non_compliance_id, anc.internal_audit_sid,
						   iats.internal_audit_type_survey_id, iats.ia_type_survey_group_id
					  FROM csr.audit_non_compliance anc
					  JOIN csr.internal_audit ia
					    ON ia.internal_audit_sid = anc.internal_audit_sid
					   AND ia.app_sid = anc.app_sid
					  LEFT JOIN csr.internal_audit_type_survey iats
					    ON iats.internal_audit_type_id = ia.internal_audit_type_id
					   AND (
							iats.internal_audit_type_survey_id = r.internal_audit_type_survey_id OR
							iats.ia_type_survey_group_id = r.ia_type_survey_group_id
					   )
					 WHERE anc.non_compliance_id = r.non_compliance_id
					   AND anc.app_sid = r.app_sid
				  ORDER BY anc.internal_audit_sid ASC
				) LOOP
					v_iats_id := rr.internal_audit_type_survey_id;
					IF v_iats_id IS NULL THEN
						v_detached := 1;
					END IF;
					UPDATE csr.audit_non_compliance
					   SET internal_audit_type_survey_id = CASE WHEN v_detached = 1 THEN NULL ELSE v_iats_id END
					 WHERE audit_non_compliance_id = rr.audit_non_compliance_id
					   AND app_sid = rr.app_sid;
				END LOOP;
			END IF;
		END LOOP;
	END LOOP;
	security.user_pkg.logonadmin;
END;
/


update mail.version set db_version=33;
@latestUS5469_2_packages


create or replace package csr.mailbox_pkg as
	procedure dummy;
end;
/
create or replace package body csr.mailbox_pkg as
	procedure dummy
	as
	begin
		null;
	end;
end;
/
grant execute on csr.mailbox_pkg to security;
grant execute on csr.mailbox_pkg to web_user;


@..\audit_helper_pkg
@..\quick_survey_pkg
@..\audit_pkg
@..\schema_pkg
@..\forecasting_pkg
@..\..\..\aspen2\cms\db\tab_pkg
@..\chain\company_dedupe_pkg
@..\chain\test_chain_utils_pkg
@..\like_for_like_pkg
@..\supplier_pkg
@..\csr_data_pkg
@..\region_pkg
@..\factor_pkg
@..\chain\filter_pkg
@..\..\..\aspen2\db\utils_pkg
@..\indicator_pkg
@..\folderlib_pkg.sql
@..\quick_survey_pkg.sql
@@..\issue_pkg
@..\enable_pkg
@..\mailbox_pkg
@..\automated_import_pkg
@..\csrimp\imp_pkg


@..\audit_helper_body
@..\quick_survey_body
@..\flow_body
@..\audit_body
@..\schema_body
@..\csrimp\imp_body
@..\forecasting_body
@..\..\..\aspen2\cms\db\tab_body
@..\chain\company_dedupe_body
@..\chain\company_body
@..\chain\test_chain_utils_body
@..\initiative_metric_body
@..\customer_body
@..\enable_body
@..\like_for_like_body
@..\csr_user_body
@..\indicator_body
@..\region_body
@..\supplier_body
@..\factor_body
@..\meter_monitor_body
@..\chain\filter_body
@..\audit_report_body
@..\compliance_body
@..\initiative_report_body
@..\issue_report_body
@..\non_compliance_report_body
@..\property_report_body
@..\..\..\aspen2\cms\db\filter_body
@..\..\..\aspen2\db\utils_body
@..\..\..\aspen2\cms\db\doc_template_body
@..\folderlib_body.sql
@..\quick_survey_body.sql
@..\deleg_plan_body
@@..\issue_body
@..\mailbox_body
@..\automated_import_body
@..\chain\setup_body
@..\chain\type_capability_body
@..\comp_regulation_report_body
@..\comp_requirement_report_body
@..\csr_app_body
@..\energy_star_body
@..\energy_star_job_body
@..\incident_body
@..\initiative_body
@..\initiative_grid_body
@..\measure_body
@..\meter_alarm_stat_body
@..\meter_body
@..\stored_calc_datasource_body
@..\teamroom_body
@..\templated_report_body



@update_tail
