-- Please update version.sql too -- this keeps clean builds in sync
define version=3031
define minor_version=0
@update_header
whenever oserror exit failure rollback
whenever sqlerror exit failure rollback

-- *** DDL ***
-- Create tables
create table csr.batch_job_privs as
	select grantee, privilege from dba_tab_privs where table_name='BATCH_JOB' and owner='CSR';

-- Alter tables

begin
	for r in ( select * from all_constraints where r_constraint_name='PK_BATCH_JOB' and r_owner='CSR' and constraint_type in ('P','U','R')) loop
		execute immediate 'alter table "'||r.owner||'"."'||r.table_name||'" drop constraint "'||r.constraint_name||'"';
	end loop;
	for r in ( select * from all_constraints where table_name='BATCH_JOB' and owner='CSR' and constraint_type in ('P','U','R','C')) loop
		execute immediate 'alter table csr.batch_job drop constraint "'||r.constraint_name||'"';
	end loop;
	for r in ( select * from all_indexes where table_name='BATCH_JOB' and owner='CSR' ) loop
		execute immediate 'drop index csr."'||r.index_name||'"';
	end loop;
end;
/

alter table CSR.BATCH_JOB rename to BATCH_JOB_OLD;

DECLARE
	v_count		NUMBER(10);
	v_sql		VARCHAR2(4000);
BEGIN
	SELECT COUNT(*)
	  INTO v_count
	  FROM v$version
	 WHERE banner LIKE '%Enterprise Edition%';
	
	v_sql := 'CREATE TABLE CSR.BATCH_JOB(
	APP_SID						NUMBER(10, 0)		DEFAULT SYS_CONTEXT(''SECURITY'',''APP'') NOT NULL,
	BATCH_JOB_ID				NUMBER(10, 0)		NOT NULL,
	BATCH_JOB_TYPE_ID			NUMBER(10, 0)		NOT NULL,
	DESCRIPTION					VARCHAR2(500),
	REQUESTED_BY_USER_SID		NUMBER(10, 0)		DEFAULT SYS_CONTEXT(''SECURITY'',''SID'') NOT NULL,
	REQUESTED_DTM				DATE				DEFAULT SYSDATE NOT NULL,
	REQUESTED_BY_COMPANY_SID	NUMBER(10, 0),
	EMAIL_ON_COMPLETION			NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	STARTED_DTM					DATE,
	COMPLETED_DTM				DATE,
	UPDATED_DTM					DATE				DEFAULT SYSDATE NOT NULL,
	ABORTED_DTM					DATE,
	RETRY_DTM					DATE,
	WORK_DONE					NUMBER(10, 0)		DEFAULT 0 NOT NULL,
	TOTAL_WORK					NUMBER(10, 0)		DEFAULT 0 NOT NULL,
	RUNNING_ON					VARCHAR2(256),
	RUNNING_BY_WORKER_ID		NUMBER(10),
	RUNNING_BY_SID				NUMBER(10),
	RUNNING_BY_PID				NUMBER(10),
	RESULT						VARCHAR2(500),
	RESULT_URL					VARCHAR2(500),
	IN_ORDER					NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	PROCESSING					NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	ATTEMPTS					NUMBER(10, 0)		DEFAULT 0 NOT NULL,
	NOTIFIED					NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	FAILED						NUMBER(1, 0)		DEFAULT 0 NOT NULL,
	PRIORITY					NUMBER(10)			DEFAULT 1 NOT NULL,
	RAM_USAGE					NUMBER(20),
	CPU_MS						NUMBER(20),
	COMPLETED					AS (CASE WHEN completed_dtm IS NULL THEN 0 ELSE 1 END),
	CONSTRAINT CK_BATCH_JOB_DLG_PLAN_EMAIL CHECK (EMAIL_ON_COMPLETION IN (0,1)),
	CONSTRAINT CK_BATCH_JOB_IN_ORDER CHECK (IN_ORDER IN (0, 1)),
	CONSTRAINT CK_BATCH_JOB_PROCESSING CHECK (PROCESSING IN (0, 1)),
	CONSTRAINT CK_BATCH_JOB_NOTIFIED CHECK (NOTIFIED IN (0,1)),
	CONSTRAINT CK_BATCH_JOB_FAILED CHECK (FAILED IN (0, 1)),
	CONSTRAINT PK_BATCH_JOB PRIMARY KEY (APP_SID, BATCH_JOB_ID)
)'||CASE WHEN v_count = 1 THEN ' PARTITION BY RANGE (COMPLETED) (
	PARTITION BATCH_JOB_PENDING VALUES LESS THAN (1),
	PARTITION BATCH_JOB_COMPLETED VALUES LESS THAN (2)
)' END||'
ENABLE ROW MOVEMENT';
	
	execute immediate v_sql;
END;
/

create index csr.ix_batch_job_batch_job_type on csr.batch_job(batch_job_type_id);
create index csr.ix_batch_job_req_user_sid on csr.batch_job(app_sid, requested_by_user_sid);
create index csr.ix_batch_job_requested_by_ on csr.batch_job (app_sid, requested_by_company_sid);

ALTER TABLE CSR.BATCH_JOB ADD CONSTRAINT FK_BATCH_JOB_BATCH_JOB_TYPE
    FOREIGN KEY (BATCH_JOB_TYPE_ID)
    REFERENCES CSR.BATCH_JOB_TYPE(BATCH_JOB_TYPE_ID)
;

ALTER TABLE CSR.BATCH_JOB ADD CONSTRAINT FK_BATCH_JOB_CSR_USER
    FOREIGN KEY (APP_SID, REQUESTED_BY_USER_SID)
    REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID)
;

ALTER TABLE CSR.BATCH_JOB ADD CONSTRAINT FK_BATCH_JOB_COMPANY 
    FOREIGN KEY (APP_SID, REQUESTED_BY_COMPANY_SID)
	REFERENCES CSR.SUPPLIER (APP_SID, COMPANY_SID)
;

begin
	for r in (select * from csr.batch_job_privs) loop
		execute immediate 'grant '||r.privilege||' on csr.batch_job to "'||r.grantee||'"';
	end loop;
end;
/

drop table csr.batch_job_privs;

-- This takes ages, need to do it after the packages
INSERT INTO CSR.BATCH_JOB (
APP_SID, BATCH_JOB_ID, BATCH_JOB_TYPE_ID, DESCRIPTION, REQUESTED_BY_USER_SID, REQUESTED_DTM, REQUESTED_BY_COMPANY_SID, EMAIL_ON_COMPLETION,
STARTED_DTM, COMPLETED_DTM, UPDATED_DTM, ABORTED_DTM, RETRY_DTM, WORK_DONE, TOTAL_WORK, RUNNING_ON, RESULT, RESULT_URL, IN_ORDER,
PROCESSING, ATTEMPTS, NOTIFIED, FAILED, PRIORITY, RAM_USAGE, CPU_MS
)
SELECT APP_SID, BATCH_JOB_ID, BATCH_JOB_TYPE_ID, DESCRIPTION, REQUESTED_BY_USER_SID, REQUESTED_DTM, REQUESTED_BY_COMPANY_SID, EMAIL_ON_COMPLETION,
STARTED_DTM, COMPLETED_DTM, UPDATED_DTM, ABORTED_DTM, RETRY_DTM, WORK_DONE, TOTAL_WORK, RUNNING_ON, RESULT, RESULT_URL, IN_ORDER,
PROCESSING, ATTEMPTS, NOTIFIED, FAILED, PRIORITY, RAM_USAGE, CPU_MS
FROM CSR.BATCH_JOB_OLD;
commit;

ALTER TABLE CSR.METER_IMPORT_REVERT_BATCH_JOB ADD CONSTRAINT FK_BJ_MIRBJ
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.BATCH_JOB_BATCHED_IMPORT ADD CONSTRAINT FK_BJ_BATCHED_IMPORT_BJ_ID 
	FOREIGN KEY (APP_SID, BATCH_JOB_ID) 
	REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID);

ALTER TABLE CSR.BATCH_JOB_BATCHED_EXPORT ADD CONSTRAINT FK_BJ_BATCHED_EXPORT_BJ_ID
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.BATCH_JOB_LIKE_FOR_LIKE ADD CONSTRAINT FK_BATCH_JOB_L4L_JOB_ID
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.SHEET_COMPLETENESS_JOB ADD CONSTRAINT FK_SHEET_COMPLET_JOB_BTCH_JOB
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.METER_RAW_DATA_IMPORT_JOB ADD CONSTRAINT FK_BATCHJOB_METRAWDATAJOB
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.METER_MATCH_BATCH_JOB ADD CONSTRAINT FK_BATCHJOB_METMATBATJOB
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.BATCH_JOB_DELEGATION_COMP ADD CONSTRAINT FK_BATCH_JOB_DELEGATION_COMP
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID) ON DELETE CASCADE
;

ALTER TABLE CSR.AUTOMATED_IMPORT_INSTANCE ADD CONSTRAINT FK_BATCH_JOB_CMS_IMP_INS
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.BATCH_JOB_APPROVAL_DASH_VALS ADD CONSTRAINT FK_BATCH_JOB_APP_DASH_JOB_ID
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.SHEET_AUTOMATIC_APPROVAL ADD CONSTRAINT FK_SHEETAA_BATCHJOB
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.BATCH_JOB_EXCEL_MODEL ADD CONSTRAINT FK_BJ_BJEM
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID) ON DELETE CASCADE
;

ALTER TABLE CSR.BATCH_JOB_TEMPLATED_REPORT ADD CONSTRAINT FK_BJ_TPL_REPORT_BJ
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID) ON DELETE CASCADE
;

ALTER TABLE CSR.DELEG_PLAN_JOB ADD CONSTRAINT FK_DELEG_PLAN_JOB_BATCH_JOB
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.OUTSTANDING_REQUESTS_JOB ADD CONSTRAINT FK_BJOB_OUTS_REQ_JOB
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.BATCH_JOB_CMS_IMPORT ADD CONSTRAINT FK_BJ_BJCI
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID)
;

ALTER TABLE CSR.BATCH_JOB_AS2_OUTBOUND_RECEIPT ADD CONSTRAINT FK_BJAOR_BJ
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID) ON DELETE CASCADE
;

ALTER TABLE CSR.BATCH_JOB_AS2_OUTBOUND_MESSAGE ADD CONSTRAINT FK_BJAOM_BJ
    FOREIGN KEY (APP_SID, BATCH_JOB_ID)
    REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID) ON DELETE CASCADE
;

ALTER TABLE CHAIN.FILTER_EXPORT_BATCH ADD CONSTRAINT FK_FEB_BATCH_JOB 
	FOREIGN KEY (APP_SID, BATCH_JOB_ID)
	REFERENCES CSR.BATCH_JOB (APP_SID, BATCH_JOB_ID);

ALTER TABLE CHAIN.BSCI_IMPORT ADD CONSTRAINT FK_BSCI_BATCH_JOB
	FOREIGN KEY (APP_SID, BATCH_JOB_ID)
	REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID
);

ALTER TABLE CHAIN.INVITATION_BATCH ADD CONSTRAINT FK_INVITATION_BATCH_BATCH_JOB
	FOREIGN KEY (APP_SID, BATCH_JOB_ID)
	REFERENCES CSR.BATCH_JOB(APP_SID, BATCH_JOB_ID);

drop table csr.batch_job_old;

-- *** Grants ***

-- ** Cross schema constraints ***

-- *** Views ***
-- Please paste the content of the view and add a comment referencing the path of the create_views file which will contain your view changes.

-- *** Data changes ***
-- RLS

-- Data

-- ** New package grants **

-- *** Conditional Packages ***

-- *** Packages ***
@../batch_job_pkg
@../batch_job_body
@../r_report_body

@update_tail
