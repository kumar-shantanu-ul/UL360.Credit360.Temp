-- Please update version.sql too -- this keeps clean builds in sync
define version=2954
define minor_version=21
@update_header

-- *** DDL ***
-- Create tables
CREATE SEQUENCE CSR.FACTOR_SET_GRP_ID_SEQ;
CREATE TABLE CSR.FACTOR_SET_GROUP(
	FACTOR_SET_GROUP_ID		NUMBER(10, 0)	 	NOT NULL,
	NAME					VARCHAR2(1000)		NOT NULL,
	CUSTOM					NUMBER(1,0)			DEFAULT 0 NOT NULL,
	CONSTRAINT PK_FACTOR_SET_GRP_ID PRIMARY KEY (FACTOR_SET_GROUP_ID),
	CONSTRAINT CK_FCTR_SET_GRP_CUSTOM CHECK (CUSTOM IN (1, 0))
);

CREATE UNIQUE INDEX CSR.UK_FACTOR_SET_GROUP_NAME ON CSR.FACTOR_SET_GROUP(LOWER(NAME));    

CREATE SEQUENCE CSR.CUSTOM_FACTOR_SET_ID_SEQ;
CREATE TABLE CSR.CUSTOM_FACTOR_SET(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	CUSTOM_FACTOR_SET_ID		NUMBER(10, 0)	NOT NULL,
	NAME						VARCHAR2(1000)	NOT NULL,
	FACTOR_SET_GROUP_ID			NUMBER(10, 0),
	CONSTRAINT PK_CUSTOM_FACTOR_SET PRIMARY KEY (APP_SID, CUSTOM_FACTOR_SET_ID),
	CONSTRAINT FK_CSTM_FCTR_SET_FCTR_SET_GRP FOREIGN KEY (FACTOR_SET_GROUP_ID)
		REFERENCES CSR.FACTOR_SET_GROUP(FACTOR_SET_GROUP_ID)
);

CREATE SEQUENCE CSR.CUSTOM_FACTOR_ID_SEQ;
CREATE TABLE CSR.CUSTOM_FACTOR(
    APP_SID                      NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    CUSTOM_FACTOR_ID             NUMBER(10, 0)     NOT NULL,
    CUSTOM_FACTOR_SET_ID         NUMBER(10, 0)     NOT NULL,
    FACTOR_TYPE_ID               NUMBER(10, 0)     NOT NULL,
    GAS_TYPE_ID                  NUMBER(10, 0)     NOT NULL,
    GEO_COUNTRY                  VARCHAR2(2),
    GEO_REGION                   VARCHAR2(2),
    EGRID_REF                    VARCHAR2(4),
    STD_MEASURE_CONVERSION_ID    NUMBER(10, 0)     NOT NULL,
    START_DTM                    DATE              NOT NULL,
    END_DTM                      DATE,
    VALUE                        NUMBER(24, 10)    NOT NULL,
    NOTE                         CLOB,
	CONSTRAINT FK_CUSTOM_FCTR_SET FOREIGN KEY (APP_SID, CUSTOM_FACTOR_SET_ID) REFERENCES CSR.CUSTOM_FACTOR_SET(APP_SID, CUSTOM_FACTOR_SET_ID),
	CONSTRAINT FK_CUSTOM_FCTR_GAS_TYPE FOREIGN KEY (GAS_TYPE_ID) REFERENCES CSR.GAS_TYPE(GAS_TYPE_ID),
	CONSTRAINT FK_CUSTOM_FCTR_FACTOR_TYPE FOREIGN KEY (FACTOR_TYPE_ID) REFERENCES CSR.FACTOR_TYPE(FACTOR_TYPE_ID),
	CONSTRAINT FK_CUSTOM_FCTR_MEASURE_CONV FOREIGN KEY (STD_MEASURE_CONVERSION_ID) REFERENCES CSR.STD_MEASURE_CONVERSION(STD_MEASURE_CONVERSION_ID),
	CONSTRAINT FK_CUSTOM_FCTR_EGRID FOREIGN KEY (EGRID_REF) REFERENCES CSR.EGRID(EGRID_REF),
	CONSTRAINT CK_CUSTOM_FCTR_DATES CHECK ((START_DTM = TRUNC(START_DTM, 'MON') AND END_DTM = TRUNC(END_DTM, 'MON') AND END_DTM > START_DTM)),
    CONSTRAINT PK_CUSTOM_FACTOR PRIMARY KEY (APP_SID, CUSTOM_FACTOR_ID)
);



CREATE SEQUENCE CSR.EMISSION_FACTOR_PROFILE_ID_SEQ;
CREATE TABLE CSR.EMISSION_FACTOR_PROFILE(
    APP_SID                 NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	PROFILE_ID 				NUMBER(10, 0)     NOT NULL,
	NAME 					VARCHAR2(1000)    NOT NULL,
	START_DTM 				DATE              NOT NULL,
	END_DTM 				DATE,
	APPLIED		 			NUMBER(1, 0)      NOT NULL,
	ACTIVE		 			NUMBER(1, 0)      NOT NULL,
	CONSTRAINT CK_EMISSION_FCTR_DATES CHECK ((START_DTM = TRUNC(START_DTM, 'MON') AND END_DTM = TRUNC(END_DTM, 'MON') AND END_DTM > START_DTM)),
	CONSTRAINT CK_EMISSION_FCTR_PROF_APPLIED CHECK (APPLIED IN (1, 0)),
	CONSTRAINT CK_EMISSION_FCTR_PROF_ACTIVE CHECK (ACTIVE IN (1, 0)),
    CONSTRAINT PK_EMISSION_FACTOR_PROFILE PRIMARY KEY (APP_SID, PROFILE_ID)
);

CREATE TABLE CSR.EMISSION_FACTOR_PROFILE_FACTOR( 
    APP_SID                 NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	PROFILE_ID 				NUMBER(10, 0)     NOT NULL,
	FACTOR_TYPE_ID 			NUMBER(10, 0)     NOT NULL,
	STD_FACTOR_SET_ID		NUMBER(10, 0),
	CUSTOM_FACTOR_SET_ID	NUMBER(10, 0),
	REGION_SID 				NUMBER(10, 0),
    GEO_COUNTRY             VARCHAR2(2),
    GEO_REGION              VARCHAR2(2),
    EGRID_REF               VARCHAR2(4),
	CONSTRAINT FK_EMISSION_FCTR_FCTR_TYP_ID FOREIGN KEY (FACTOR_TYPE_ID) REFERENCES CSR.FACTOR_TYPE(FACTOR_TYPE_ID),
	CONSTRAINT FK_EMISSION_FCTR_FACTOR_SET_ID FOREIGN KEY (STD_FACTOR_SET_ID) REFERENCES CSR.STD_FACTOR_SET(STD_FACTOR_SET_ID),
	CONSTRAINT FK_EM_FCTR_CUST_FCTR_SET_ID FOREIGN KEY (APP_SID, CUSTOM_FACTOR_SET_ID) REFERENCES CSR.CUSTOM_FACTOR_SET(APP_SID, CUSTOM_FACTOR_SET_ID),
	CONSTRAINT FK_EMISSION_FCTR_EGRID FOREIGN KEY (EGRID_REF) REFERENCES CSR.EGRID(EGRID_REF),
	CONSTRAINT CK_EMISSION_FCTR_PROF_FACTOR CHECK 
		(NOT (STD_FACTOR_SET_ID IS NULL AND CUSTOM_FACTOR_SET_ID IS NULL) AND 
		 NOT (STD_FACTOR_SET_ID IS NOT NULL AND CUSTOM_FACTOR_SET_ID IS NOT NULL)),
    CONSTRAINT PK_EMISSION_FCTR_PROFILE_FCTR PRIMARY KEY (APP_SID, PROFILE_ID, FACTOR_TYPE_ID)
);


CREATE TABLE CSR.STD_FACTOR_SET_ACTIVE( 
    APP_SID                 NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    STD_FACTOR_SET_ID       NUMBER(10, 0)     NOT NULL,
	CONSTRAINT FK_STD_FCTR_SET_ACTIVE_SET_ID FOREIGN KEY (STD_FACTOR_SET_ID) REFERENCES CSR.STD_FACTOR_SET(STD_FACTOR_SET_ID),
	CONSTRAINT PK_STD_FACTOR_SET_ACTIVE PRIMARY KEY (APP_SID, STD_FACTOR_SET_ID)
);





CREATE TABLE CSRIMP.CUSTOM_FACTOR_SET(
    CSRIMP_SESSION_ID       NUMBER(10, 0)   DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    CUSTOM_FACTOR_SET_ID    NUMBER(10, 0)     NOT NULL,
    NAME                    VARCHAR2(1000)    NOT NULL,
	FACTOR_SET_GROUP_ID		NUMBER(10, 0),
    CONSTRAINT PK_CUSTOM_FACTOR_SET PRIMARY KEY (CSRIMP_SESSION_ID, CUSTOM_FACTOR_SET_ID),
    CONSTRAINT FK_CUSTOM_FACTOR_SET_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CUSTOM_FACTOR(
    CSRIMP_SESSION_ID            NUMBER(10, 0)   DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    CUSTOM_FACTOR_ID             NUMBER(10, 0)     NOT NULL,
    CUSTOM_FACTOR_SET_ID         NUMBER(10, 0)     NOT NULL,
    FACTOR_TYPE_ID               NUMBER(10, 0)     NOT NULL,
    GAS_TYPE_ID                  NUMBER(10, 0)     NOT NULL,
    GEO_COUNTRY                  VARCHAR2(2),
    GEO_REGION                   VARCHAR2(2),
    EGRID_REF                    VARCHAR2(4),
    STD_MEASURE_CONVERSION_ID    NUMBER(10, 0)     NOT NULL,
    START_DTM                    DATE              NOT NULL,
    END_DTM                      DATE,
    VALUE                        NUMBER(24, 10)    NOT NULL,
    NOTE                         CLOB,
	CONSTRAINT CK_CUSTOM_FCTR_DATES CHECK ((START_DTM = TRUNC(START_DTM, 'MON') AND END_DTM = TRUNC(END_DTM, 'MON') AND END_DTM > START_DTM)),
    CONSTRAINT PK_CUSTOM_FACTOR PRIMARY KEY (CSRIMP_SESSION_ID, CUSTOM_FACTOR_ID),
    CONSTRAINT FK_CUSTOM_FACTOR_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
);

CREATE TABLE CSRIMP.EMISSION_FACTOR_PROFILE(
    CSRIMP_SESSION_ID       NUMBER(10, 0)   DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PROFILE_ID 				NUMBER(10, 0)     NOT NULL,
	NAME 					VARCHAR2(1000)    NOT NULL,
	START_DTM 				DATE              NOT NULL,
	END_DTM 				DATE,
	APPLIED		 			NUMBER(1, 0)      NOT NULL,
	ACTIVE		 			NUMBER(1, 0)      NOT NULL,
	CONSTRAINT CK_EMISSION_FCTR_DATES CHECK ((START_DTM = TRUNC(START_DTM, 'MON') AND END_DTM = TRUNC(END_DTM, 'MON') AND END_DTM > START_DTM)),
	CONSTRAINT CK_EMISSION_FCTR_PROF_APPLIED CHECK (APPLIED IN (1, 0)),
	CONSTRAINT CK_EMISSION_FCTR_PROF_ACTIVE CHECK (ACTIVE IN (1, 0)),
    CONSTRAINT PK_EMISSION_FACTOR_PROFILE PRIMARY KEY (CSRIMP_SESSION_ID, PROFILE_ID),
    CONSTRAINT FK_EMISSION_FACTOR_PROFILE_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
);

CREATE TABLE CSRIMP.EMISSION_FACTOR_PROFILE_FACTOR( 
    CSRIMP_SESSION_ID       NUMBER(10, 0)   DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PROFILE_ID 				NUMBER(10, 0)     NOT NULL,
	FACTOR_TYPE_ID 			NUMBER(10, 0)     NOT NULL,
	STD_FACTOR_SET_ID		NUMBER(10, 0),
	CUSTOM_FACTOR_SET_ID	NUMBER(10, 0),
	REGION_SID 				NUMBER(10, 0),
    GEO_COUNTRY             VARCHAR2(2),
    GEO_REGION              VARCHAR2(2),
    EGRID_REF               VARCHAR2(4),
	CONSTRAINT CK_EMISSION_FCTR_PROF_FACTOR CHECK 
		(NOT (STD_FACTOR_SET_ID IS NULL AND CUSTOM_FACTOR_SET_ID IS NULL) AND 
		 NOT (STD_FACTOR_SET_ID IS NOT NULL AND CUSTOM_FACTOR_SET_ID IS NOT NULL)),
    CONSTRAINT PK_EMISSION_FCTR_PROFILE_FCTR PRIMARY KEY (CSRIMP_SESSION_ID, PROFILE_ID, FACTOR_TYPE_ID),
    CONSTRAINT FK_EMSSN_FCTR_PRFLE_FCTR_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
);




-- Alter tables

ALTER TABLE CSR.STD_FACTOR_SET ADD (
    CREATED_BY_SID          NUMBER(10, 0),
    CREATED_DTM		        DATE,
    PUBLISHED		        NUMBER(1,0) DEFAULT 0 NOT NULL,
    PUBLISHED_BY_SID        NUMBER(10, 0),
    PUBLISHED_DTM	        DATE,
	FACTOR_SET_GROUP_ID     NUMBER(10, 0),
	CONSTRAINT CK_STD_FACTOR_SET_PUBLISHED CHECK (PUBLISHED IN (1, 0)),
	CONSTRAINT FK_STD_FCTR_SET_FCTR_SET_GRP FOREIGN KEY (FACTOR_SET_GROUP_ID)
		REFERENCES CSR.FACTOR_SET_GROUP(FACTOR_SET_GROUP_ID)
);

ALTER TABLE CSR.STD_FACTOR ADD (
    SOURCE          VARCHAR(1000)
);



-- *** Grants ***
GRANT SELECT, INSERT, UPDATE ON csr.custom_factor_set TO csrimp;
GRANT SELECT, INSERT, UPDATE ON csr.custom_factor TO csrimp;
GRANT SELECT, INSERT, UPDATE ON csr.emission_factor_profile TO csrimp;
GRANT SELECT, INSERT, UPDATE ON csr.emission_factor_profile_factor TO csrimp;

GRANT SELECT, INSERT, UPDATE ON csrimp.custom_factor_set TO web_user;
GRANT SELECT, INSERT, UPDATE ON csrimp.custom_factor TO web_user;
GRANT SELECT, INSERT, UPDATE ON csrimp.emission_factor_profile TO web_user;
GRANT SELECT, INSERT, UPDATE ON csrimp.emission_factor_profile_factor TO web_user;

CREATE OR REPLACE PACKAGE csr.factor_set_group_pkg
IS
END factor_set_group_pkg;
/

CREATE OR REPLACE PACKAGE BODY csr.factor_set_group_pkg
IS
END factor_set_group_pkg;
/

GRANT EXECUTE ON CSR.factor_set_group_pkg TO web_user;

-- ** Cross schema constraints ***

-- *** Views ***
-- Please paste the content of the view and add a comment referencing the path of the create_views file which will contain your view changes.

-- *** Data changes ***
-- RLS

-- Data
BEGIN
	UPDATE csr.std_factor_set
	   SET published = 1;
	   
	--Sequences start at 1 so safe to use 0 I think
	INSERT INTO CSR.factor_set_group (FACTOR_SET_GROUP_ID, NAME, CUSTOM)
	VALUES (0, 'Custom factor set(s)', 1);
	
	FOR r IN (
		SELECT app_sid, host
		  FROM csr.customer c, security.website w
		 WHERE c.host = w.website_name
	) LOOP
	
		security.user_pkg.logonadmin(r.host);
	
		DECLARE
			v_act_id 					security.security_pkg.T_ACT_ID DEFAULT security.security_pkg.GetAct;
			v_app_sid 					security.security_pkg.T_SID_ID DEFAULT security.security_pkg.GetApp;
			v_menu						security.security_pkg.T_SID_ID DEFAULT security.securableobject_pkg.GetSidFromPath(v_act_id, v_app_sid, 'menu');
			v_sa_sid					security.security_pkg.T_SID_ID DEFAULT security.securableobject_pkg.GetSIDFromPath(v_act_id, security.security_pkg.SID_ROOT, 'csr/SuperAdmins');
			v_setup_menu				security.security_pkg.T_SID_ID;
			v_factorset_menu			security.security_pkg.T_SID_ID;
			
		BEGIN
			BEGIN
				v_setup_menu := security.securableobject_pkg.GetSidFromPath(v_act_id, v_menu, 'Setup');
			EXCEPTION
				WHEN security.security_pkg.OBJECT_NOT_FOUND THEN
					security.menu_pkg.CreateMenu(v_act_id, v_menu, 'setup', 'Setup', '/csr/site/admin/config/global.acds', 0, null, v_setup_menu);
			END;
		
			BEGIN
				v_factorset_menu := security.securableobject_pkg.GetSidFromPath(v_act_id, v_setup_menu, 'csr_admin_factor_sets');
			EXCEPTION
				WHEN security.security_pkg.OBJECT_NOT_FOUND THEN
					security.menu_pkg.CreateMenu(v_act_id, v_setup_menu, 'csr_admin_factor_sets', 'Factor sets',
						'/csr/site/admin/emissionFactors/new/factorsetgroups.acds', 0, null, v_factorset_menu);
			END;
			
			-- don't inherit dacls
			security.securableobject_pkg.SetFlags(v_act_id, v_factorset_menu, 0);
			--Remove inherited ones
			security.acl_pkg.DeleteAllACEs(v_act_id, security.acl_pkg.GetDACLIDForSID(v_factorset_menu));
			-- Add SA permission
			security.acl_pkg.AddACE(v_act_id, security.acl_pkg.GetDACLIDForSID(v_factorset_menu), -1, security.security_pkg.ACE_TYPE_ALLOW, 
				security.security_pkg.ACE_FLAG_DEFAULT, v_sa_sid, security.security_pkg.PERMISSION_STANDARD_READ);
			
		END;
		
		security.user_pkg.logoff(sys_context('security','act'));
	END LOOP;
END;
/

-- ** New package grants **

-- *** Conditional Packages ***

-- *** Packages ***
@../factor_set_group_pkg
@../schema_pkg
@../csrimp/imp_pkg

@../factor_set_group_body
@../factor_body
@../schema_body
@../csrimp/imp_body

@update_tail

