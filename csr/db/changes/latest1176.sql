-- Please update version.sql too -- this keeps clean builds in sync
define version=1176
@update_header

ALTER TABLE CT.PS_ITEM DROP CONSTRAINT WORKSHEET_PS_ITEM;


DROP TABLE CT.VALUE_MAP_REGION;
DROP TABLE CT.VALUE_MAP_BREAKDOWN;
DROP TABLE CT.VALUE_MAP_CURRENCY;
DROP TABLE CT.WORKSHEET_COLUMN_VALUE_MAP;
DROP TABLE CT.WORKSHEET_COLUMN;
DROP TABLE CT.VALUE_MAP;
DROP TABLE CT.WORKSHEET_COLUMN_TYPE;
DROP TABLE CT.WORKSHEET_ROW;
DROP TABLE CT.WORKSHEET;
DROP TABLE CT.WORKSHEET_VALUE_HELPER;
DROP TABLE CT.WORKSHEET_TYPE;

CREATE TABLE CSR.WORKSHEET(
    APP_SID              NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    WORKSHEET_ID         NUMBER(10, 0)     NOT NULL,
    SHEET_NAME           VARCHAR2(1000)    NOT NULL,
    LOWER_SHEET_NAME     VARCHAR2(1000),
    WORKSHEET_TYPE_ID    NUMBER(10, 0)     NOT NULL,
    HEADER_ROW_INDEX     NUMBER(10, 0)     NOT NULL,
    CONSTRAINT TCC_WORKSHEET_2 CHECK (LOWER_SHEET_NAME = LOWER(TRIM(SHEET_NAME))),
    CONSTRAINT PK_WORKSHEET PRIMARY KEY (APP_SID, WORKSHEET_ID)
)
;

CREATE TABLE CSR.WORKSHEET_COLUMN(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    WORKSHEET_ID       NUMBER(10, 0)    NOT NULL,
    COLUMN_TYPE_ID     NUMBER(10, 0)    NOT NULL,
    VALUE_HELPER_ID    NUMBER(10, 0)    NOT NULL,
    COLUMN_INDEX       NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_WS_COLUMN PRIMARY KEY (APP_SID, WORKSHEET_ID, COLUMN_TYPE_ID, VALUE_HELPER_ID, COLUMN_INDEX)
)
;

CREATE TABLE CSR.WORKSHEET_COLUMN_TYPE(
    COLUMN_TYPE_ID       NUMBER(10, 0)     NOT NULL,
    VALUE_HELPER_ID      NUMBER(10, 0)     NOT NULL,
    WORKSHEET_TYPE_ID    NUMBER(10, 0)     NOT NULL,
    NAME                 VARCHAR2(100)     NOT NULL,
    DESCRIPTION          VARCHAR2(2000)    NOT NULL,
    POSITION             NUMBER(10, 0)     NOT NULL,
    CONSTRAINT PK_WS_COLUMN_TYPE PRIMARY KEY (COLUMN_TYPE_ID, VALUE_HELPER_ID)
)
;

CREATE TABLE CSR.WORKSHEET_COLUMN_VALUE_MAP(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    WORKSHEET_ID       NUMBER(10, 0)    NOT NULL,
    COLUMN_TYPE_ID     NUMBER(10, 0)    NOT NULL,
    COLUMN_INDEX       NUMBER(10, 0)    NOT NULL,
    VALUE_MAP_ID       NUMBER(10, 0)    NOT NULL,
    VALUE_HELPER_ID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_WSC_VALUE_MAP PRIMARY KEY (APP_SID, WORKSHEET_ID, COLUMN_TYPE_ID, COLUMN_INDEX, VALUE_MAP_ID, VALUE_HELPER_ID)
)
;

CREATE TABLE CSR.WORKSHEET_ROW(
    APP_SID         NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    WORKSHEET_ID    NUMBER(10, 0)    NOT NULL,
    ROW_ID          NUMBER(10, 0)    NOT NULL,
    ROW_INDEX       NUMBER(10, 0)    NOT NULL,
    IGNORE          NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    CHECK (ROW_INDEX >= 0),
    CONSTRAINT CC_WS_ROW_IGNORE CHECK (IGNORE IN (1,0)),
    CONSTRAINT PK_WS_ROW PRIMARY KEY (APP_SID, WORKSHEET_ID, ROW_ID)
)
;

CREATE TABLE CSR.WORKSHEET_TYPE(
    WORKSHEET_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    DESCRIPTION          VARCHAR2(200)    NOT NULL,
    CONSTRAINT PK_WS_TYPE PRIMARY KEY (WORKSHEET_TYPE_ID)
)
;

CREATE TABLE CSR.WORKSHEET_VALUE_HELPER(
    VALUE_HELPER_ID    NUMBER(10, 0)    NOT NULL,
    CLASS_TYPE         VARCHAR2(100)    NOT NULL,
    CONSTRAINT PK_WS_VALUE_HELPER PRIMARY KEY (VALUE_HELPER_ID)
)
;

CREATE TABLE CSR.WORKSHEET_VALUE_MAP(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    VALUE_MAP_ID       NUMBER(10, 0)    NOT NULL,
    VALUE_HELPER_ID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_WS_VALUE_MAP PRIMARY KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID)
)
;

CREATE TABLE CSR.WORKSHEET_VALUE_MAPPER(
    VALUE_HELPER_ID       NUMBER(10, 0)     NOT NULL,
    JS_COMPONENT          VARCHAR2(1000)    NOT NULL,
    JS_COMPONENT_PATH     VARCHAR2(1000)    NOT NULL,
    MAPPER_DESCRIPTION    VARCHAR2(2000)    NOT NULL,
    MAPPER_NAME           VARCHAR2(200)     NOT NULL,
    CONSTRAINT PK_WS_VALUE_MAPPER PRIMARY KEY (VALUE_HELPER_ID)
)
;

CREATE SEQUENCE CSR.WORKSHEET_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;

ALTER TABLE CSR.WORKSHEET ADD CONSTRAINT RefWORKSHEET_TYPE3296 
    FOREIGN KEY (WORKSHEET_TYPE_ID)
    REFERENCES CSR.WORKSHEET_TYPE(WORKSHEET_TYPE_ID)
;

ALTER TABLE CSR.WORKSHEET ADD CONSTRAINT RefCUSTOMER3297 
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;


ALTER TABLE CSR.WORKSHEET_COLUMN ADD CONSTRAINT RefWORKSHEET_COLUMN_TYPE3298 
    FOREIGN KEY (COLUMN_TYPE_ID, VALUE_HELPER_ID)
    REFERENCES CSR.WORKSHEET_COLUMN_TYPE(COLUMN_TYPE_ID, VALUE_HELPER_ID)
;

ALTER TABLE CSR.WORKSHEET_COLUMN ADD CONSTRAINT RefWORKSHEET3299 
    FOREIGN KEY (APP_SID, WORKSHEET_ID)
    REFERENCES CSR.WORKSHEET(APP_SID, WORKSHEET_ID)
;

ALTER TABLE CSR.WORKSHEET_COLUMN_TYPE ADD CONSTRAINT RefWORKSHEET_TYPE3300 
    FOREIGN KEY (WORKSHEET_TYPE_ID)
    REFERENCES CSR.WORKSHEET_TYPE(WORKSHEET_TYPE_ID)
;

ALTER TABLE CSR.WORKSHEET_COLUMN_TYPE ADD CONSTRAINT RefWORKSHEET_VALUE_HELPER3301 
    FOREIGN KEY (VALUE_HELPER_ID)
    REFERENCES CSR.WORKSHEET_VALUE_HELPER(VALUE_HELPER_ID)
;

ALTER TABLE CSR.WORKSHEET_COLUMN_VALUE_MAP ADD CONSTRAINT RefWORKSHEET_VALUE_MAP3302 
    FOREIGN KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID)
    REFERENCES CSR.WORKSHEET_VALUE_MAP(APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID)
;

ALTER TABLE CSR.WORKSHEET_COLUMN_VALUE_MAP ADD CONSTRAINT RefWORKSHEET_COLUMN3303 
    FOREIGN KEY (APP_SID, WORKSHEET_ID, COLUMN_TYPE_ID, VALUE_HELPER_ID, COLUMN_INDEX)
    REFERENCES CSR.WORKSHEET_COLUMN(APP_SID, WORKSHEET_ID, COLUMN_TYPE_ID, VALUE_HELPER_ID, COLUMN_INDEX)
;

ALTER TABLE CSR.WORKSHEET_ROW ADD CONSTRAINT RefWORKSHEET3304 
    FOREIGN KEY (APP_SID, WORKSHEET_ID)
    REFERENCES CSR.WORKSHEET(APP_SID, WORKSHEET_ID)
;

ALTER TABLE CSR.WORKSHEET_VALUE_MAP ADD CONSTRAINT RefCUSTOMER3305 
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

ALTER TABLE CSR.WORKSHEET_VALUE_MAP ADD CONSTRAINT RefWORKSHEET_VALUE_MAPPER3306 
    FOREIGN KEY (VALUE_HELPER_ID)
    REFERENCES CSR.WORKSHEET_VALUE_MAPPER(VALUE_HELPER_ID)
;

ALTER TABLE CSR.WORKSHEET_VALUE_MAPPER ADD CONSTRAINT RefWORKSHEET_VALUE_HELPER3307 
    FOREIGN KEY (VALUE_HELPER_ID)
    REFERENCES CSR.WORKSHEET_VALUE_HELPER(VALUE_HELPER_ID)
;

GRANT SELECT, REFERENCES ON CSR.WORKSHEET TO CT;
GRANT SELECT, REFERENCES ON CSR.WORKSHEET_COLUMN_TYPE TO CT;
GRANT SELECT, REFERENCES ON CSR.WORKSHEET_ROW TO CT;
GRANT SELECT, REFERENCES ON CSR.WORKSHEET_VALUE_MAP TO CT;

CREATE TABLE CT.SUPPLIER (
    APP_SID NUMBER(10) NOT NULL,
    SUPPLIER_ID NUMBER(10) NOT NULL,
    OWNER_COMPANY_SID NUMBER(10) NOT NULL,
    COMPANY_SID NUMBER(10),
    NAME VARCHAR2(200) NOT NULL,
    CONSTRAINT PK_SUPPLIER PRIMARY KEY (APP_SID, SUPPLIER_ID)
);

CREATE TABLE CT.WORKSHEET_FILE_UPLOAD (
    APP_SID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    WORKSHEET_ID NUMBER(10) NOT NULL,
    FILE_UPLOAD_SID NUMBER(10) NOT NULL,
    CONSTRAINT PK_WSFU PRIMARY KEY (APP_SID, WORKSHEET_ID, FILE_UPLOAD_SID)
);

CREATE TABLE CT.WORKSHEET_VALUE_MAP_CURRENCY (
    APP_SID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    VALUE_MAP_ID NUMBER(10) NOT NULL,
    VALUE_HELPER_ID NUMBER(10) NOT NULL,
    CURRENCY_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_WSVM_CURRENCY PRIMARY KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID, CURRENCY_ID),
    CONSTRAINT TCC_WSVM_CURRENCY_1 CHECK (VALUE_HELPER_ID = 100)
);

CREATE TABLE CT.WORKSHEET_VALUE_MAP_SUPPLIER (
    APP_SID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    VALUE_MAP_ID NUMBER(10) NOT NULL,
    VALUE_HELPER_ID NUMBER(10) NOT NULL,
    SUPPLIER_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_WSVM_SUPPLIER PRIMARY KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID, SUPPLIER_ID),
    CONSTRAINT TCC_WSVM_SUPPLIER_1 CHECK (VALUE_HELPER_ID = 103)
);

CREATE TABLE CT.WORKSHEET_VALUE_MAP_BREAKDOWN (
    APP_SID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    VALUE_MAP_ID NUMBER(10) NOT NULL,
    VALUE_HELPER_ID NUMBER(10) NOT NULL,
    BREAKDOWN_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_WSVM_BREAKDOWN PRIMARY KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID, BREAKDOWN_ID),
    CONSTRAINT TCC_WSVM_BREAKDOWN_1 CHECK (VALUE_HELPER_ID = 102)
);

CREATE TABLE CT.WORKSHEET_VALUE_MAP_REGION (
    APP_SID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    VALUE_MAP_ID NUMBER(10) NOT NULL,
    VALUE_HELPER_ID NUMBER(10) NOT NULL,
    REGION_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_WSVM_REGION PRIMARY KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID, REGION_ID),
    CONSTRAINT TCC_WSVM_REGION_1 CHECK (VALUE_HELPER_ID = 101)
);

ALTER TABLE CT.PS_ITEM ADD (ROW_ID NUMBER(10));

ALTER TABLE CT.SUPPLIER ADD CONSTRAINT CUSTOMER_OPTIONS_SUPPLIER 
    FOREIGN KEY (APP_SID) REFERENCES CT.CUSTOMER_OPTIONS (APP_SID);

ALTER TABLE CT.SUPPLIER ADD CONSTRAINT COMPANY_SUPPLIER_1
    FOREIGN KEY (APP_SID, OWNER_COMPANY_SID) REFERENCES CT.COMPANY (APP_SID,COMPANY_SID);

ALTER TABLE CT.SUPPLIER ADD CONSTRAINT COMPANY_SUPPLIER_2
    FOREIGN KEY (APP_SID, COMPANY_SID) REFERENCES CT.COMPANY (APP_SID,COMPANY_SID);

-- ct devs - you'll need to drop any records where this fails or work around to get the contraint to work
ALTER TABLE CT.PS_ITEM ADD CONSTRAINT WS_ROW_PS_ITEM 
    FOREIGN KEY (APP_SID, WORKSHEET_ID, ROW_ID) REFERENCES CSR.WORKSHEET_ROW (APP_SID, WORKSHEET_ID, ROW_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_CURRENCY ADD CONSTRAINT WS_VALUE_MAP_WSVM_CURRENCY 
    FOREIGN KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID) REFERENCES CSR.WORKSHEET_VALUE_MAP (APP_SID,VALUE_MAP_ID,VALUE_HELPER_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_CURRENCY ADD CONSTRAINT CURRENCY_WSVM_CURRENCY 
    FOREIGN KEY (CURRENCY_ID) REFERENCES CT.CURRENCY (CURRENCY_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_BREAKDOWN ADD CONSTRAINT WS_VALUE_MAP_WSVM_BREAKDOWN 
    FOREIGN KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID) REFERENCES CSR.WORKSHEET_VALUE_MAP (APP_SID,VALUE_MAP_ID,VALUE_HELPER_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_BREAKDOWN ADD CONSTRAINT BREAKDOWN_WSVM_BREAKDOWN 
    FOREIGN KEY (APP_SID, BREAKDOWN_ID) REFERENCES CT.BREAKDOWN (APP_SID,BREAKDOWN_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_REGION ADD CONSTRAINT WS_VALUE_MAP_WSVM_REGION 
    FOREIGN KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID) REFERENCES CSR.WORKSHEET_VALUE_MAP (APP_SID,VALUE_MAP_ID,VALUE_HELPER_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_REGION ADD CONSTRAINT REGION_WSVM_REGION 
    FOREIGN KEY (REGION_ID) REFERENCES CT.REGION (REGION_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_SUPPLIER ADD CONSTRAINT WS_VALUE_MAP_WSVM_SUPPLIER 
    FOREIGN KEY (APP_SID, VALUE_MAP_ID, VALUE_HELPER_ID) REFERENCES CSR.WORKSHEET_VALUE_MAP (APP_SID,VALUE_MAP_ID,VALUE_HELPER_ID);

ALTER TABLE CT.WORKSHEET_VALUE_MAP_SUPPLIER ADD CONSTRAINT SUPPLIER_WSVM_SUPPLIER 
    FOREIGN KEY (APP_SID, SUPPLIER_ID) REFERENCES CT.SUPPLIER (APP_SID,SUPPLIER_ID);

ALTER TABLE CT.WORKSHEET_FILE_UPLOAD ADD CONSTRAINT WORKSHEET_WSFU 
    FOREIGN KEY (APP_SID, WORKSHEET_ID) REFERENCES CSR.WORKSHEET (APP_SID,WORKSHEET_ID);

ALTER TABLE CT.WORKSHEET_FILE_UPLOAD ADD CONSTRAINT FILE_UPLOAD_WSFU 
    FOREIGN KEY (APP_SID, FILE_UPLOAD_SID) REFERENCES CHAIN.FILE_UPLOAD (APP_SID,FILE_UPLOAD_SID);

CREATE GLOBAL TEMPORARY TABLE CT.STRING_TABLE
(
	POSITION					NUMBER(10),
	VALUE_1						VARCHAR2(4000),
	VALUE_2						VARCHAR2(4000),
	VALUE_3						VARCHAR2(4000),
	VALUE_4						VARCHAR2(4000)	
) ON COMMIT DELETE ROWS;

CREATE SEQUENCE CT.SUPPLIER_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    nocycle
    noorder;

declare
	policy_already_exists exception;
	pragma exception_init(policy_already_exists, -28101);

	type t_tabs is table of varchar2(30);
	v_list t_tabs;
	v_null_list t_tabs;
begin	
	v_list := t_tabs(
		'WORKSHEET',
		'WORKSHEET_ROW',
		'WORKSHEET_COLUMN',
		'WORKSHEET_COLUMN_VALUE_MAP',
		'WORKSHEET_VALUE_MAP'
	);
	for i in 1 .. v_list.count loop
		declare
			v_name varchar2(30);
			v_i pls_integer default 1;
		begin
			loop
				begin
					if v_i = 1 then
						v_name := SUBSTR(v_list(i), 1, 23)||'_POLICY';
					else
						v_name := SUBSTR(v_list(i), 1, 21)||'_POLICY_'||v_i;
					end if;
					dbms_output.put_line('doing '||v_name);
				    dbms_rls.add_policy(
				        object_schema   => 'CSR',
				        object_name     => v_list(i),
				        policy_name     => v_name,
				        function_schema => 'CSR',
				        policy_function => 'appSidCheck',
				        statement_types => 'select, insert, update, delete',
				        update_check	=> true,
				        policy_type     => dbms_rls.context_sensitive );
				    -- dbms_output.put_line('done  '||v_name);
				  	exit;
				exception
					when policy_already_exists then
						v_i := v_i + 1;
				end;
			end loop;
		end;
	end loop;
end;
/

-- XXX: totally the wrong approach.
-- this is just to fix a random call to RLS which was never supposed to be in this change script anyway
BEGIN
	FOR r IN (
		SELECT object_name, policy_name 
		  FROM all_policies 
		 WHERE function IN ('APPSIDCHECK', 'NULLABLEAPPSIDCHECK')
		   AND object_owner = 'CT'
	) LOOP
		dbms_rls.drop_policy(
            object_schema   => 'CT',
            object_name     => r.object_name,
            policy_name     => r.policy_name
        );
    END LOOP;
END;
/

BEGIN
 	FOR r IN (
		SELECT c.owner, c.table_name, c.nullable, (SUBSTR(c.table_name, 1, 26) || '_POL') policy_name
		  FROM all_tables t
		 INNER JOIN all_tab_columns c ON t.owner = c.owner AND t.table_name = c.table_name
		 WHERE t.owner = 'CT' AND (t.dropped = 'NO' OR t.dropped IS NULL) AND c.column_name = 'APP_SID'
 	)
 	LOOP
		dbms_output.put_line('Writing policy '||r.policy_name);
		dbms_rls.add_policy(
			object_schema   => r.owner,
			object_name     => r.table_name,
			policy_name     => r.policy_name, 
			function_schema => r.owner,
			policy_function => (CASE WHEN r.nullable ='N' THEN 'appSidCheck' ELSE 'nullableAppSidCheck' END),
			statement_types => 'select, insert, update, delete',
			update_check	=> true,
			policy_type     => dbms_rls.static);
	END LOOP;
	
END;
/

create or replace package CHAIN.HELPER_PKG as
procedure dummy;
end;
/
create or replace package body CHAIN.HELPER_PKG as
procedure dummy
as
begin
	null;
end;
end;
/

GRANT EXECUTE ON CHAIN.HELPER_PKG TO CSR;

create or replace package CSR.EXCEL_PKG as
procedure dummy;
end;
/
create or replace package body CSR.EXCEL_PKG as
procedure dummy
as
begin
	null;
end;
end;
/

GRANT EXECUTE ON CSR.EXCEL_PKG TO WEB_USER;
GRANT EXECUTE ON CSR.EXCEL_PKG TO CT;

create or replace package CT.EXCEL_PKG as
procedure dummy;
end;
/
create or replace package body CT.EXCEL_PKG as
procedure dummy
as
begin
	null;
end;
end;
/

GRANT EXECUTE ON CT.EXCEL_PKG  TO WEB_USER;

@../chain/helper_pkg
@../chain/helper_body
@../excel_pkg
@../excel_body
@../ct/excel_pkg
@../ct/excel_body

@update_tail
