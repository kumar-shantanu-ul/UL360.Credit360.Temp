-- Please update version.sql too -- this keeps clean builds in sync
define version=2088
@update_header

DECLARE
  v_id NUMBER(10);
BEGIN
  SELECT csr.teamroom_event_id_seq.nextval INTO v_id FROM DUAL;
  EXECUTE IMMEDIATE 'CREATE SEQUENCE CSR.CALENDAR_EVENT_ID_SEQ START WITH ' || v_id || ' INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 20 NOORDER';
END;
/

DROP SEQUENCE CSR.TEAMROOM_EVENT_ID_SEQ;

CREATE TABLE CSR.CALENDAR_EVENT(
    APP_SID              NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    CALENDAR_EVENT_ID    NUMBER(10, 0)     NOT NULL,
    DESCRIPTION          VARCHAR2(4000),
    START_DTM            DATE              NOT NULL,
    END_DTM              DATE,
    CREATED_BY_SID       NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','SID') NOT NULL,
    CREATED_DTM          DATE              DEFAULT SYSDATE NOT NULL,
    LOCATION             VARCHAR2(1000),
    REGION_SID           NUMBER(10, 0),
    CONSTRAINT CK_TEAMROOM_EVENT_DTM_1 CHECK (END_DTM IS NULL OR END_DTM >= START_DTM),
    CONSTRAINT PK_CALENDAR_EVENT PRIMARY KEY (APP_SID, CALENDAR_EVENT_ID)
);


INSERT INTO CSR.CALENDAR_EVENT (app_sid, calendar_event_id, description, start_dtm, end_dtm, created_by_sid, created_dtm, location)
  SELECT app_sid, teamroom_event_id, description, start_dtm, end_dtm, created_by_sid, created_dtm, location
    FROM CSR.TEAMROOM_EVENT;

CREATE TABLE CSR.CALENDAR_EVENT_INVITE(
    APP_SID              NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    CALENDAR_EVENT_ID    NUMBER(10, 0)    NOT NULL,
    USER_SID             NUMBER(10, 0)    NOT NULL,
    INVITED_DTM          DATE             DEFAULT SYSDATE NOT NULL,
    INVITED_BY_SID       NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','SID') NOT NULL,
    ACCEPTED_DTM         NUMBER(10, 0),
    ATTENDED             NUMBER(1, 0),
    CONSTRAINT CHK_CAL_EVT_INV_ATTEND CHECK (ATTENDED IS NULL OR ATTENDED IN (0,1)),
    CONSTRAINT PK_CALENDAR_EVENT_INVITE PRIMARY KEY (APP_SID, CALENDAR_EVENT_ID, USER_SID)
);

CREATE TABLE CSR.CALENDAR_EVENT_OWNER(
    APP_SID              NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    CALENDAR_EVENT_ID    NUMBER(10, 0)    NOT NULL,
    USER_SID             NUMBER(10, 0)    NOT NULL,
    ADDED_DTM            DATE             DEFAULT SYSDATE NOT NULL,
    ADDED_BY_SID         NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','SID') NOT NULL,
    CONSTRAINT PK_CALENDAR_EVENT_OWNER PRIMARY KEY (APP_SID, CALENDAR_EVENT_ID, USER_SID)
);

CREATE TABLE CSR.CALENDAR_EVENT_TYPE(
    APP_SID                   NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    CALENDAR_EVENT_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    LABEL                     VARCHAR2(255)    NOT NULL,
    INVITE_TYPE               VARCHAR2(10)     NOT NULL,
    CONSTRAINT CHK_CAL_EVT_TYPE_INV_TYPE CHECK (INVITE_TYPE IN ('T','A','N')),
    CONSTRAINT PK_CALENDAR_EVENT_TYPE PRIMARY KEY (APP_SID, CALENDAR_EVENT_TYPE_ID)
);


ALTER TABLE CSR.TEAMROOM_EVENT RENAME COLUMN TEAMROOM_EVENT_ID TO CALENDAR_EVENT_ID; 

ALTER TABLE CSR.TEAMROOM_EVENT DROP COLUMN DESCRIPTION;

ALTER TABLE CSR.TEAMROOM_EVENT DROP CONSTRAINT CK_TEAMROOM_EVENT_DTM;
ALTER TABLE CSR.TEAMROOM_EVENT DROP COLUMN START_DTM;
ALTER TABLE CSR.TEAMROOM_EVENT DROP COLUMN END_DTM;
ALTER TABLE CSR.TEAMROOM_EVENT DROP CONSTRAINT FK_TMRM_EVENT_USER;
ALTER TABLE CSR.TEAMROOM_EVENT DROP COLUMN CREATED_BY_SID;
ALTER TABLE CSR.TEAMROOM_EVENT DROP COLUMN CREATED_DTM;
ALTER TABLE CSR.TEAMROOM_EVENT DROP COLUMN LOCATION;

ALTER TABLE CSR.TEAMROOM_EVENT DROP PRIMARY KEY DROP INDEX;
ALTER TABLE CSR.TEAMROOM_EVENT ADD CONSTRAINT PK_TEAMROOM_EVENT PRIMARY KEY (APP_SID, TEAMROOM_SID, CALENDAR_EVENT_ID);
 
 
ALTER TABLE CSR.CALENDAR_EVENT ADD CONSTRAINT FK_REGION_CAL_EVENT 
    FOREIGN KEY (APP_SID, REGION_SID)
    REFERENCES CSR.REGION(APP_SID, REGION_SID);

ALTER TABLE CSR.CALENDAR_EVENT ADD CONSTRAINT FK_CALENDAR_EVENT_USER 
    FOREIGN KEY (APP_SID, CREATED_BY_SID)
    REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID);

ALTER TABLE CSR.CALENDAR_EVENT_INVITE ADD CONSTRAINT FK_CAL_EVT_EVT_INV 
    FOREIGN KEY (APP_SID, CALENDAR_EVENT_ID)
    REFERENCES CSR.CALENDAR_EVENT(APP_SID, CALENDAR_EVENT_ID) ON DELETE CASCADE;

ALTER TABLE CSR.CALENDAR_EVENT_INVITE ADD CONSTRAINT FK_USER_CAL_EVT_INVT_BY 
    FOREIGN KEY (APP_SID, INVITED_BY_SID)
    REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID);

ALTER TABLE CSR.CALENDAR_EVENT_INVITE ADD CONSTRAINT FK_USR_CAL_EVT_INVITE 
    FOREIGN KEY (APP_SID, USER_SID)
    REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID);


ALTER TABLE CSR.CALENDAR_EVENT_OWNER ADD CONSTRAINT FK_CAL_EVT_CAL_EVT_OWN 
    FOREIGN KEY (APP_SID, CALENDAR_EVENT_ID)
    REFERENCES CSR.CALENDAR_EVENT(APP_SID, CALENDAR_EVENT_ID) ON DELETE CASCADE;

ALTER TABLE CSR.CALENDAR_EVENT_OWNER ADD CONSTRAINT FK_USER_CAL_EVT_OWN_ADD 
    FOREIGN KEY (APP_SID, ADDED_BY_SID)
    REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID);

ALTER TABLE CSR.CALENDAR_EVENT_OWNER ADD CONSTRAINT FK_USER_CAL_EVT_OWNER 
    FOREIGN KEY (APP_SID, USER_SID)
    REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID);


ALTER TABLE CSR.CALENDAR_EVENT_TYPE ADD CONSTRAINT FK_CUS_CAL_EVENT_TYPE 
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID);

ALTER TABLE CSR.TEAMROOM_EVENT DROP CONSTRAINT FK_TMRM_EVENT_TMRM;

ALTER TABLE CSR.TEAMROOM_EVENT ADD CONSTRAINT FK_TMRM_EVENT_TMRM 
    FOREIGN KEY (APP_SID, TEAMROOM_SID)
    REFERENCES CSR.TEAMROOM(APP_SID, TEAMROOM_SID);

ALTER TABLE CSR.TEAMROOM_EVENT ADD CONSTRAINT FK_CAL_EVNT_TMRM_EVNT 
    FOREIGN KEY (APP_SID, CALENDAR_EVENT_ID)
    REFERENCES CSR.CALENDAR_EVENT(APP_SID, CALENDAR_EVENT_ID) ON DELETE CASCADE;
 
DECLARE
  FEATURE_NOT_ENABLED EXCEPTION;
  PRAGMA EXCEPTION_INIT(FEATURE_NOT_ENABLED, -439);
  POLICY_ALREADY_EXISTS EXCEPTION;
  PRAGMA EXCEPTION_INIT(POLICY_ALREADY_EXISTS, -28101);
  TYPE T_TABS IS TABLE OF VARCHAR2(30);
  v_list T_TABS;
BEGIN 
  v_list := t_tabs(  
    'CALENDAR_EVENT',
    'CALENDAR_EVENT_INVITE',
    'CALENDAR_EVENT_OWNER',
    'CALENDAR_EVENT_TYPE'
  );
  FOR I IN 1 .. v_list.count 
  LOOP
    BEGIN     
        DBMS_RLS.ADD_POLICY(
            object_schema   => 'CSR',
            object_name     => v_list(i),
            policy_name     => SUBSTR(v_list(i), 1, 23)||'_POLICY',
            function_schema => 'CSR',
            policy_function => 'appSidCheck',
            statement_types => 'select, insert, update, delete',
            update_check  => true,
            policy_type     => dbms_rls.context_sensitive );
          DBMS_OUTPUT.PUT_LINE('Policy added to '||v_list(i));
    EXCEPTION
      WHEN POLICY_ALREADY_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('Policy exists for '||v_list(i));        
      WHEN FEATURE_NOT_ENABLED THEN
        DBMS_OUTPUT.PUT_LINE('RLS policies not applied for '||v_list(i)||' as feature not enabled');
    END;
  END LOOP;
END;
/
 

@../teamroom_pkg
@../teamroom_body

@update_tail
