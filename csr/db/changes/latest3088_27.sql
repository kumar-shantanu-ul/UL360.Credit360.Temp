-- Please update version.sql too -- this keeps clean builds in sync
define version=3088
define minor_version=27
@update_header

-- *** DDL ***
-- Create tables
DECLARE
	v_exists NUMBER;
BEGIN
	SELECT COUNT(*)
	  INTO v_exists
	  FROM all_users
	 WHERE username = 'SURVEYS';
	IF v_exists <> 0 THEN
		EXECUTE IMMEDIATE 'DROP USER SURVEYS CASCADE';
	END IF;
END;
/

CREATE USER SURVEYS IDENTIFIED BY surveys QUOTA UNLIMITED ON USERS;

DECLARE
	v_class_id 		security.security_pkg.T_SID_ID;
	v_act 			security.security_pkg.T_ACT_ID;
BEGIN
	security.user_pkg.LogonAuthenticated(security.security_pkg.SID_BUILTIN_ADMINISTRATOR, NULL, v_act);
	
	BEGIN	
		security.class_pkg.CreateClass(v_act, null, 'Surveys', 'surveys.survey_pkg', null, v_class_id);
	EXCEPTION
		WHEN security.security_pkg.DUPLICATE_OBJECT_NAME THEN
			NULL;
	END;
END;
/

-- Question Library
CREATE SEQUENCE SURVEYS.QUESTION_ID_SEQ;

CREATE TABLE SURVEYS.QUESTION_TYPE(
	QUESTION_TYPE				VARCHAR2(20)	NOT NULL,
	LABEL						VARCHAR2(255)	NOT NULL,
	CONSTRAINT PK_QUESTION_TYPE PRIMARY KEY (QUESTION_TYPE)
)
;

CREATE TABLE SURVEYS.QUESTION(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_TYPE				VARCHAR2(20)	NOT NULL,
	LOOKUP_KEY					VARCHAR2(255),
	MAPS_TO_IND_SID				NUMBER(10, 0),
	MEASURE_SID					NUMBER(10, 0),
	LATEST_QUESTION_VERSION		NUMBER(10)		NOT NULL,
	LATEST_QUESTION_DRAFT		NUMBER(1)		NOT NULL,
	MATRIX_PARENT_ID			NUMBER(10, 0),
	MATRIX_PARENT_VERSION		NUMBER(10, 0),
	MATRIX_PARENT_DRAFT			NUMBER(1, 0),
	CONSTRAINT PK_QUESTION PRIMARY KEY (APP_SID, QUESTION_ID),
	CONSTRAINT FK_QUESTION_VERSION_PARENT FOREIGN KEY (APP_SID, MATRIX_PARENT_ID) REFERENCES SURVEYS.QUESTION(APP_SID, QUESTION_ID),
	CONSTRAINT FK_QUESTION_QUESTION_TYPE FOREIGN KEY (QUESTION_TYPE) REFERENCES SURVEYS.QUESTION_TYPE(QUESTION_TYPE),
	CONSTRAINT CONS_QUESTION_MEASURE UNIQUE (APP_SID, QUESTION_ID, MEASURE_SID),
	CONSTRAINT CHK_QV_MATRIX_PARENT_DRAFT CHECK (MATRIX_PARENT_DRAFT IN (NULL,0,1))
)
;

CREATE INDEX SURVEYS.IX_LATEST_QUESTION_VERSION ON SURVEYS.QUESTION(APP_SID, QUESTION_ID, LATEST_QUESTION_VERSION, LATEST_QUESTION_DRAFT);

CREATE UNIQUE INDEX SURVEYS.IX_QUESTION_LOOKUP_KEY ON SURVEYS.QUESTION(CASE WHEN LOOKUP_KEY IS NOT NULL THEN APP_SID END, LOOKUP_KEY);

CREATE TABLE SURVEYS.QUESTION_VERSION(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		DEFAULT 1 NOT NULL,
	MATRIX_CHILD_POS			NUMBER(5),
	MANDATORY					NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	DEFAULT_NUMERIC_VALUE		NUMBER(20, 10),
	CHARACTER_LIMIT				NUMBER(4, 0),
	MIN_NUMERIC_VALUE			NUMBER(14, 4),
	MAX_NUMERIC_VALUE			NUMBER(14, 4),
	NUMERIC_VALUE_TOLERANCE		NUMBER(13, 10),
	DECIMAL_PLACES				NUMBER(2, 0),
	MIN_SELECTIONS				NUMBER(4, 0),
	MAX_SELECTIONS				NUMBER(4, 0),
	DISPLAY_TYPE				VARCHAR2(50),
	VALUE_VALIDATION_TYPE		VARCHAR2(50),
	COMMENTS_DISPLAY_TYPE		VARCHAR2(50),
	REMEMBER_ANSWER				NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	COUNT_TOWARDS_PROGRESS		NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	ALLOW_FILE_UPLOADS			NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	ALLOW_USER_COMMENTS			NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	MATCH_EVERY_CATEGORY		NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	DETAILED_HELP_LINK			VARCHAR2(1000),
	ACTION						VARCHAR2(50),
	LAST_MODIFIED_DTM			DATE			DEFAULT SYSDATE NOT NULL,
	CONSTRAINT PK_QUESTION_VERSION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
	CONSTRAINT FK_QUESTION_VERSION_QUESTION FOREIGN KEY (APP_SID, QUESTION_ID) REFERENCES SURVEYS.QUESTION(APP_SID, QUESTION_ID),
	CONSTRAINT CHK_QV_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT CHK_QV_MANDATORY_0_1 CHECK (MANDATORY IN (0,1)),
	CONSTRAINT CHK_QV_REM_ANSWER_0_1 CHECK (REMEMBER_ANSWER IN (0,1)),
	CONSTRAINT CHK_QV_COUNT_PROG_0_1 CHECK (COUNT_TOWARDS_PROGRESS IN (0,1)),
	CONSTRAINT CHK_QV_ALLOW_UPLOADS_0_1 CHECK (ALLOW_FILE_UPLOADS IN (0,1)),
	CONSTRAINT CHK_QV_ALLOW_COMMS_0_1 CHECK (ALLOW_USER_COMMENTS IN (0,1)),
	CONSTRAINT CHK_QV_MATCH_EVERY_CAT_0_1 CHECK (MATCH_EVERY_CATEGORY IN (0,1))
)
;

CREATE TABLE SURVEYS.QUESTION_OPTION(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_OPTION_ID			NUMBER(10, 0)	NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		NOT NULL,
	POS							NUMBER(10, 0)	DEFAULT 0 NOT NULL,
	LOOKUP_KEY					VARCHAR2(1000),
	IS_DEFAULT					NUMBER(1, 0)	DEFAULT 0 NOT NULL,
	ENDS_SURVEY					NUMBER(1, 0),
	GROUPING_PATH				VARCHAR2(1000),
	MAPS_TO_IND_SID				NUMBER(10, 0),
	OPTION_ACTION				VARCHAR2(50),
	CONSTRAINT PK_QUESTION_OPTION PRIMARY KEY (APP_SID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
	CONSTRAINT CHK_QO_IS_DEFAULT_0_1 CHECK (IS_DEFAULT IN (0,1)),
	CONSTRAINT CHK_QO_ENDS_SURVEY_0_1 CHECK (ENDS_SURVEY IN (NULL, 0,1))
)
;

CREATE SEQUENCE SURVEYS.QUESTION_OPTION_ID_SEQ;

CREATE TABLE SURVEYS.QUESTION_OPTION_TAG(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	QUESTION_OPTION_ID			NUMBER(10, 0)	NOT NULL,
	TAG_ID						NUMBER(10, 0)	NOT NULL,
	CONSTRAINT PK_QUESTION_OPTION_TAG PRIMARY KEY (APP_SID, QUESTION_OPTION_ID, TAG_ID)
)
;

CREATE TABLE SURVEYS.QUESTION_TAG(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		DEFAULT 0 NOT NULL,
	TAG_ID						NUMBER(10, 0)	NOT NULL,
	SHOW_IN_SURVEY				NUMBER(1, 0)	DEFAULT 0 NOT NULL,	
	CONSTRAINT PK_QUESTION_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, TAG_ID),
	CONSTRAINT CHK_QT_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT CHK_QT_SHOW_IN_SURVEY CHECK (SHOW_IN_SURVEY IN (0,1))
)
;

-- Surveys
CREATE TABLE SURVEYS.SURVEY_VERSION(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	SURVEY_SID					NUMBER(10, 0)	NOT NULL,
	PARENT_SID					NUMBER(10, 0)	NOT NULL,
	CREATED_DTM					DATE			DEFAULT SYSDATE NOT NULL,
	LAST_MODIFIED_DTM			DATE			NOT NULL,
	SURVEY_VERSION				NUMBER(10, 0)	NOT NULL,
	START_DTM					DATE,
	END_DTM						DATE,
	PUBLISHED_DTM				DATE,
	PUBLISHED_BY_SID			NUMBER(10, 0),
	CONSTRAINT PK_SURVEY_VERSION PRIMARY KEY (APP_SID, SURVEY_SID, SURVEY_VERSION)
)
;

CREATE TABLE SURVEYS.SURVEY_SECTION(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	SURVEY_SID					NUMBER(10, 0)	NOT NULL,
	SURVEY_VERSION				NUMBER(10, 0)	NOT NULL,
	SECTION_ID					NUMBER(10, 0)	NOT NULL,
	PARENT_ID					NUMBER(10, 0)	NULL,
	POS							NUMBER(10, 0)	DEFAULT 0 NOT NULL,
	CONSTRAINT PK_SURVEY_QUESTION PRIMARY KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID),
	CONSTRAINT FK_SURVEY_SECTION_PARENT FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, PARENT_ID) REFERENCES SURVEYS.SURVEY_SECTION(APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID)
)
;

CREATE SEQUENCE SURVEYS.SURVEY_SECTION_ID_SEQ;

CREATE TABLE SURVEYS.SURVEY_SECTION_TAG(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	SURVEY_SID					NUMBER(10, 0)	NOT NULL,
	SURVEY_VERSION				NUMBER(10, 0)	NOT NULL,
	SECTION_ID					NUMBER(10, 0)	NOT NULL,
	TAG_ID						NUMBER(10, 0)	NOT NULL,
	CONSTRAINT PK_SURVEY_SECTION_TAG PRIMARY KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID, TAG_ID)
)
;

CREATE TABLE SURVEYS.SURVEY_SECTION_QUESTION(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	SURVEY_SID					NUMBER(10, 0)	NOT NULL,
	SURVEY_VERSION				NUMBER(10, 0)	NOT NULL,
	SECTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		DEFAULT 0 NOT NULL,
	POS							NUMBER(10, 0)	DEFAULT 0 NOT NULL,
	CONSTRAINT PK_SURVEY_SECTION_QUESTION PRIMARY KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, QUESTION_ID)
)
;

CREATE SEQUENCE SURVEYS.SURVEY_QUESTION_ID_SEQ;

CREATE TABLE SURVEYS.LANGUAGE(
	LANGUAGE_CODE				VARCHAR2(50)	NOT NULL,
	CONSTRAINT PK_SURVEY_LANGUAGE PRIMARY KEY (LANGUAGE_CODE)
)
;

CREATE TABLE SURVEYS.QUESTION_VERSION_TR(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		DEFAULT 0 NOT NULL,
	LANGUAGE_CODE				VARCHAR2(50)	NOT NULL,
	LABEL						VARCHAR2(4000),
	DEFAULT_STRING_VALUE		VARCHAR2(4000),
	SIMPLE_HELP					VARCHAR2(4000),
	POPUP_HELP					VARCHAR2(4000),
	DETAILED_HELP				VARCHAR2(4000),
	CONSTRAINT PK_QUESTION_VERSION_TR PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, LANGUAGE_CODE),
	CONSTRAINT CHK_QV_TR_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1))
)
;

CREATE TABLE SURVEYS.QUESTION_OPTION_TR(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_OPTION_ID			NUMBER(10, 0)	NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		NOT NULL,
	LANGUAGE_CODE				VARCHAR2(50)	NOT NULL,
	LABEL						VARCHAR2(4000)	NOT NULL,
	TOOLTIP						VARCHAR2(1000),
	CONSTRAINT PK_QUESTION_OPTION_TR PRIMARY KEY (APP_SID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, LANGUAGE_CODE),
	CONSTRAINT CHK_OP_TR_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1))
)
;

CREATE TABLE SURVEYS.SURVEY_VERSION_TR(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	SURVEY_SID					NUMBER(10, 0)	NOT NULL,
	SURVEY_VERSION				NUMBER(10, 0)	NOT NULL,
	LANGUAGE_CODE				VARCHAR2(50)	NOT NULL,
	LABEL						VARCHAR2(1024)	NOT NULL,
	CONSTRAINT PK_SURVEY_VERSION_TR PRIMARY KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, LANGUAGE_CODE)
)
;

CREATE TABLE SURVEYS.SURVEY_SECTION_TR(
	APP_SID						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	SURVEY_SID					NUMBER(10, 0)	NOT NULL,
	SURVEY_VERSION				NUMBER(10, 0)	NOT NULL,
	SECTION_ID					NUMBER(10, 0)	NOT NULL,
	LABEL						VARCHAR(1024)	NOT NULL,
	SIMPLE_HELP					VARCHAR2(4000),
	DETAILED_HELP				VARCHAR2(4000),
	LANGUAGE_CODE				VARCHAR2(50)	NOT NULL,
	CONSTRAINT PK_SURVEY_SECTION_TR PRIMARY KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID, LANGUAGE_CODE)
)
;


-- FK CONSTRAINTS
-- FKs onto QUESTION_VERSION
ALTER TABLE SURVEYS.QUESTION ADD CONSTRAINT FK_LATEST_QUESTION_VERSION
	FOREIGN KEY (APP_SID, QUESTION_ID, LATEST_QUESTION_VERSION, LATEST_QUESTION_DRAFT)
	REFERENCES SURVEYS.QUESTION_VERSION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)	DEFERRABLE INITIALLY DEFERRED
;

ALTER TABLE SURVEYS.QUESTION_TAG ADD CONSTRAINT FK_QUESTION_TAG_QV
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
	REFERENCES SURVEYS.QUESTION_VERSION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;

-- FKs onto SURVEY_SECTION
ALTER TABLE SURVEYS.SURVEY_SECTION_QUESTION ADD CONSTRAINT FK_SURVEY_SECTION_QUESTION_SS
	FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID)
	REFERENCES SURVEYS.SURVEY_SECTION(APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID)
;

ALTER TABLE SURVEYS.SURVEY_SECTION_TAG ADD CONSTRAINT FK_SURVEY_SECTION_TAG_SS
	FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID)
	REFERENCES SURVEYS.SURVEY_SECTION(APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID)
;

-- FKs onto SURVEY_VERSION
ALTER TABLE SURVEYS.SURVEY_SECTION_TAG ADD CONSTRAINT FK_SURVEY_SECTION_TAG_SV
	FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION)
	REFERENCES SURVEYS.SURVEY_VERSION(APP_SID, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE SURVEYS.SURVEY_SECTION_QUESTION ADD CONSTRAINT FK_SURVEY_SECTION_QUESTION_SV
	FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION)
	REFERENCES SURVEYS.SURVEY_VERSION(APP_SID, SURVEY_SID, SURVEY_VERSION)
;

-- FK onto QUESTION_VERSION
ALTER TABLE SURVEYS.QUESTION_VERSION_TR ADD CONSTRAINT FK_QUESTON_VERSN_TR_VERSN
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
	REFERENCES SURVEYS.QUESTION_VERSION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;

-- FK onto QUESTION_OPTION
ALTER TABLE SURVEYS.QUESTION_OPTION_TR ADD CONSTRAINT FK_QUESTON_OP_TR_OPTION
	FOREIGN KEY (APP_SID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
	REFERENCES SURVEYS.QUESTION_OPTION(APP_SID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;

-- FKs onto SURVEY_VERSION
ALTER TABLE SURVEYS.SURVEY_VERSION_TR ADD CONSTRAINT FK_SURVEY_VERSION_TR_VERSN
	FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION)
	REFERENCES SURVEYS.SURVEY_VERSION(APP_SID, SURVEY_SID, SURVEY_VERSION)
;

-- FKs onto SURVEY_SECTION
ALTER TABLE SURVEYS.SURVEY_SECTION_TR ADD CONSTRAINT FK_SURVEY_SECTION_TR_SECTION
	FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID)
	REFERENCES SURVEYS.SURVEY_SECTION(APP_SID, SURVEY_SID, SURVEY_VERSION, SECTION_ID)
;

-- Alter tables

-- *** Grants ***
GRANT SELECT, REFERENCES ON csr.ind TO surveys;
GRANT SELECT, REFERENCES ON csr.customer TO surveys;
GRANT SELECT ON csr.tag_group_member TO surveys;
GRANT SELECT ON csr.tag TO surveys;
GRANT SELECT ON csr.tag_group TO surveys;
GRANT SELECT ON chain.debug_log TO surveys;
GRANT SELECT ON chain.filter TO surveys;
GRANT SELECT ON chain.filter_field TO surveys;
GRANT SELECT, INSERT ON chain.filter_value TO surveys;
GRANT SELECT ON chain.saved_filter TO surveys;
GRANT SELECT ON chain.compound_filter TO surveys;
GRANT SELECT ON chain.v$filter_field TO surveys;
GRANT SELECT, INSERT, DELETE ON chain.tt_filter_object_data TO surveys;
grant select on security.securable_object to surveys;
GRANT SELECT, REFERENCES ON aspen2.lang TO surveys;

GRANT SELECT ON chain.filter_value_id_seq TO surveys;

GRANT EXECUTE ON aspen2.request_queue_pkg TO surveys;
GRANT EXECUTE ON chain.filter_pkg TO surveys;
GRANT EXECUTE ON security.security_pkg TO surveys;
GRANT EXECUTE ON security.securableobject_pkg TO surveys;
GRANT EXECUTE ON security.class_pkg TO surveys;

GRANT EXECUTE ON chain.T_FILTERED_OBJECT_TABLE TO surveys;
GRANT EXECUTE ON chain.T_FILTERED_OBJECT_ROW TO surveys;
GRANT EXECUTE ON security.T_ORDERED_SID_ROW TO surveys;

-- ** Cross schema constraints ***
ALTER TABLE SURVEYS.QUESTION ADD CONSTRAINT FK_QUESTION_IND
    FOREIGN KEY (APP_SID, MAPS_TO_IND_SID, MEASURE_SID)
    REFERENCES CSR.IND(APP_SID, IND_SID, MEASURE_SID)
;

ALTER TABLE SURVEYS.QUESTION ADD CONSTRAINT FK_QUESTION_CUSTOMER
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

ALTER TABLE SURVEYS.QUESTION_VERSION ADD CONSTRAINT FK_QV_CUSTOMER
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

ALTER TABLE SURVEYS.QUESTION_VERSION_TR ADD CONSTRAINT FK_QUESTON_VERSN_TR_LANGUAGE
	FOREIGN KEY (LANGUAGE_CODE)
	REFERENCES ASPEN2.LANG(LANG)
;

ALTER TABLE SURVEYS.QUESTION_OPTION_TR ADD CONSTRAINT FK_QUESTON_OPTN_TR_LANGUAGE
	FOREIGN KEY (LANGUAGE_CODE)
	REFERENCES ASPEN2.LANG(LANG)
;

ALTER TABLE SURVEYS.SURVEY_VERSION_TR ADD CONSTRAINT FK_SURVEY_VERSION_TR_LANG
	FOREIGN KEY (LANGUAGE_CODE)
	REFERENCES ASPEN2.LANG(LANG)
;

ALTER TABLE SURVEYS.SURVEY_SECTION_TR ADD CONSTRAINT FK_SURVEY_SECTION_TR_LANG
	FOREIGN KEY (LANGUAGE_CODE)
	REFERENCES ASPEN2.LANG(LANG)
;

-- *** Views ***
-- Please paste the content of the view and add a comment referencing the path of the create_views file which will contain your view changes.
CREATE OR REPLACE VIEW surveys.v$question AS
	SELECT qv.question_id, qv.question_version, qv.question_draft, qv.mandatory, qv.default_numeric_value, q.question_type,
			qv.character_limit, qv.min_numeric_value, qv.max_numeric_value, qv.numeric_value_tolerance, qv.decimal_places, qv.min_selections,
			qv.max_selections, qv.display_type, qv.value_validation_type, qv.comments_display_type, qv.remember_answer, qv.count_towards_progress,
			qv.allow_file_uploads, qv.allow_user_comments, qv.match_every_category, qv.detailed_help_link, qv.action
	  FROM question_version qv
	  JOIN question q ON q.question_id = qv.question_id AND q.app_sid = qv.app_sid
	  WHERE q.matrix_parent_id is null;

CREATE OR REPLACE VIEW surveys.v$survey_question AS
	SELECT qv.question_id, qv.question_version, qv.question_draft, qv.mandatory, qv.default_numeric_value, qv.question_type,
		qv.character_limit, qv.min_numeric_value, qv.max_numeric_value, qv.numeric_value_tolerance, qv.decimal_places, qv.min_selections,
		qv.max_selections, qv.display_type, qv.value_validation_type, qv.comments_display_type, qv.remember_answer, qv.count_towards_progress,
		qv.allow_file_uploads, qv.allow_user_comments, qv.match_every_category, 
		qv.detailed_help_link, qv.action, sq.survey_sid, sq.survey_version, sq.section_id, sq.pos
	  FROM survey_section_question sq
	  JOIN v$question qv ON sq.question_id = qv.question_id AND sq.question_version = qv.question_version AND sq.question_draft = qv.question_draft;


-- *** Data changes ***
-- RLS

-- Data
BEGIN
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('section', 'Section');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('radio', 'Radio button');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('checkboxgroup', 'Checkbox group');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('checkbox', 'Checkbox item');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('text', 'Text');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('pagebreak', 'Page break');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('matrix', 'Matrix');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('radiorow', 'Matrix radio button row');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('number', 'Number');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('slider', 'Slider');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('date', 'Date');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('files', 'Files');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('richtext', 'Text area');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('regionpicker', 'Region picker');
	INSERT INTO SURVEYS.QUESTION_TYPE(QUESTION_TYPE, LABEL) VALUES ('rtquestion', 'Rich text question');
END;
/

CREATE OR REPLACE PACKAGE surveys.survey_pkg AS END;
/
CREATE OR REPLACE PACKAGE surveys.question_library_pkg AS END;
/
CREATE OR REPLACE PACKAGE surveys.question_library_pkg AS END;
/
CREATE OR REPLACE PACKAGE surveys.question_library_report_pkg AS END;
/

-- ** New package grants **
GRANT EXECUTE ON surveys.survey_pkg TO security;
GRANT EXECUTE ON surveys.survey_pkg TO web_user;
GRANT EXECUTE ON surveys.question_library_pkg TO web_user;
GRANT EXECUTE ON surveys.question_library_report_pkg TO web_user;
-- *** Conditional Packages ***

-- *** Packages ***
--@..\surveys\survey_pkg
--@..\surveys\question_library_pkg
--@..\surveys\question_library_report_pkg
--@..\surveys\question_library_body
--@..\surveys\survey_body
--@..\surveys\question_library_report_body


@update_tail
