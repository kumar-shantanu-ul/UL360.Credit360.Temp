-- Please update version.sql too -- this keeps clean builds in sync
define version=1310
@update_header
whenever oserror exit failure rollback
whenever sqlerror exit failure rollback

-- XXX: these three lines will fail
-- to fix run them as sys, comment out, and re-run the script as upd
grant select on dba_tab_privs to cms;
grant create user to cms;
grant grant any object privilege to cms;

-- fix bad constraint due to ERS reordering columns
alter table cms.uk_cons_col drop constraint pk_uk_cons_col drop index;
alter table cms.uk_cons_col add constraint pk_uk_cons_col primary key (app_sid, uk_cons_id, column_sid);

-- on live but not in the model
declare
	v_exists number;
begin
	select count(*)
	  into v_exists
	  from all_sequences
	 where sequence_owner = 'CSR' and sequence_name = 'LIVE_DATA_DURATION_ID_SEQ';
	if v_exists = 0 then
		execute immediate 'CREATE SEQUENCE csr.LIVE_DATA_DURATION_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 20 NOORDER';
	end if;
end;
/

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CORRESPONDENT(
    CORRESPONDENT_ID    NUMBER(10, 0)     NOT NULL,
    FULL_NAME           VARCHAR2(255)     NOT NULL,
    EMAIL               VARCHAR2(255),
    PHONE               VARCHAR2(255),
    GUID                RAW(16)           NOT NULL,
    MORE_INFO_1         VARCHAR2(1000),
    CONSTRAINT PK_CORRESPONDENT PRIMARY KEY (CORRESPONDENT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW(
    FLOW_SID            NUMBER(10, 0)    NOT NULL,
    LABEL               VARCHAR2(255)    NOT NULL,
    DEFAULT_STATE_ID    NUMBER(10, 0)	 NOT NULL,
    HELPER_PKG          VARCHAR2(255),
    CONSTRAINT PK_FLOW PRIMARY KEY (FLOW_SID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_ALERT_TYPE(
    CUSTOMER_ALERT_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    FLOW_SID                  NUMBER(10, 0)    NOT NULL,
    LABEL                     VARCHAR2(255)    NOT NULL,
    CONSTRAINT PK_FLOW_ALERT_TYPE PRIMARY KEY (CUSTOMER_ALERT_TYPE_ID),
    CONSTRAINT UK_FLOW_ALERT_TYPE  UNIQUE (CUSTOMER_ALERT_TYPE_ID, FLOW_SID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_ITEM(
    FLOW_ITEM_ID             NUMBER(10, 0)    NOT NULL,
    FLOW_SID                 NUMBER(10, 0)    NOT NULL,
    CURRENT_STATE_ID         NUMBER(10, 0)    NOT NULL,
    SURVEY_RESPONSE_ID       NUMBER(10, 0),
    DASHBOARD_INSTANCE_ID    NUMBER(10, 0),
    CONSTRAINT PK_FLOW_ITEM PRIMARY KEY (FLOW_ITEM_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_ITEM_ALERT(
    FLOW_ITEM_ALERT_ID          NUMBER(10, 0)    NOT NULL,
    FLOW_ITEM_ID                NUMBER(10, 0)    NOT NULL,
    FLOW_STATE_LOG_ID           NUMBER(10, 0)    NOT NULL,
    FLOW_STATE_TRANSITION_ID    NUMBER(10, 0)    NOT NULL,
    CUSTOMER_ALERT_TYPE_ID      NUMBER(10, 0)    NOT NULL,
    PROCESSED_DTM               DATE,
    CONSTRAINT PK_FLOW_ITEM_ALERT PRIMARY KEY (FLOW_ITEM_ALERT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_STATE(
    FLOW_STATE_ID     NUMBER(10, 0)    NOT NULL,
    FLOW_SID          NUMBER(10, 0)    NOT NULL,
    LABEL             VARCHAR2(255)    NOT NULL,
    LOOKUP_KEY        VARCHAR2(255),
    ATTRIBUTES_XML    SYS.XMLType,
    IS_DELETED        NUMBER(1, 0)     NOT NULL,
    CONSTRAINT CHK_FLOW_STATE_DELETED CHECK (IS_DELETED IN (0,1)),
    CONSTRAINT PK_FLOW_STATE PRIMARY KEY (FLOW_STATE_ID),
    CONSTRAINT CONS_FLOW_STATE  UNIQUE (FLOW_STATE_ID, FLOW_SID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_STATE_LOG(
    FLOW_STATE_LOG_ID    NUMBER(10, 0)    NOT NULL,
    FLOW_ITEM_ID         NUMBER(10, 0)    NOT NULL,
    FLOW_STATE_ID        NUMBER(10, 0)    NOT NULL,
    SET_BY_USER_SID      NUMBER(10, 0)    NOT NULL,
    SET_DTM              DATE             NOT NULL,
    COMMENT_TEXT         CLOB,
    CONSTRAINT PK_FLOW_STATE_LOG PRIMARY KEY (FLOW_STATE_LOG_ID),
    CONSTRAINT UK_FLOW_STATE_LOG  UNIQUE (FLOW_STATE_LOG_ID, FLOW_ITEM_ID)
) ON COMMIT DELETE ROWS;



-- 
-- TABLE: CSR.FLOW_STATE_LOG_FILE 
--

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_STATE_LOG_FILE(
    FLOW_STATE_LOG_FILE_ID    NUMBER(10, 0)    NOT NULL,
    FLOW_STATE_LOG_ID         NUMBER(10, 0)    NOT NULL,
    FILENAME                  VARCHAR2(255)    NOT NULL,
    MIME_TYPE                 VARCHAR2(256)    NOT NULL,
    DATA                      BLOB             NOT NULL,
    SHA1                      RAW(20)          NOT NULL,
    UPLOADED_DTM              DATE             NOT NULL,
    CONSTRAINT PK_FLOW_STATE_LOG_FILE PRIMARY KEY (FLOW_STATE_LOG_FILE_ID)
) ON COMMIT DELETE ROWS;



-- 
-- TABLE: CSR.FLOW_STATE_ROLE 
--

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_STATE_ROLE(
    FLOW_STATE_ID    NUMBER(10, 0)    NOT NULL,
    ROLE_SID         NUMBER(10, 0)    NOT NULL,
    IS_EDITABLE      NUMBER(1, 0)     NOT NULL,
    CONSTRAINT CHK_FLOW_STATE_ROLE_EDIT CHECK (IS_EDITABLE IN (0,1)),
    CONSTRAINT PK_FLOW_STATE_ROLE PRIMARY KEY (FLOW_STATE_ID, ROLE_SID)
) ON COMMIT DELETE ROWS;



-- 
-- TABLE: CSR.FLOW_STATE_TRANS_HELPER 
--

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_STATE_TRANS_HELPER(
    FLOW_SID     NUMBER(10, 0)    NOT NULL,
    HELPER_SP    VARCHAR2(255)    NOT NULL,
    LABEL        VARCHAR2(255)    NOT NULL,
    CONSTRAINT PK_FLOW_STATE_TRANS_HELPER PRIMARY KEY (FLOW_SID, HELPER_SP)
) ON COMMIT DELETE ROWS;



-- 
-- TABLE: CSR.FLOW_STATE_TRANSITION 
--

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_STATE_TRANSITION(
    FLOW_STATE_TRANSITION_ID    NUMBER(10, 0)    NOT NULL,
    FROM_STATE_ID               NUMBER(10, 0)    NOT NULL,
    TO_STATE_ID                 NUMBER(10, 0)    NOT NULL,
    FLOW_SID                    NUMBER(10, 0)    NOT NULL,
    VERB                        VARCHAR2(255)    NOT NULL,
    ASK_FOR_COMMENT             VARCHAR2(16)     NOT NULL,
    POS                         NUMBER(10, 0)    NOT NULL,
    ATTRIBUTES_XML              SYS.XMLType,
    HELPER_SP                   VARCHAR2(255),
    LOOKUP_KEY                  VARCHAR2(255),
    MANDATORY_FIELDS_MESSAGE    VARCHAR2(255),
    BUTTON_ICON_PATH            VARCHAR2(255)    NOT NULL,
    CHECK (ASK_FOR_COMMENT IN ('none','required','optional')),
    CONSTRAINT PK_FLOW_STATE_TRANSITION PRIMARY KEY (FLOW_STATE_TRANSITION_ID),
    CONSTRAINT UK_FLOW_STATE_TRANSITION  UNIQUE (FROM_STATE_ID, TO_STATE_ID),
    CONSTRAINT UK_FLOW_STATE_TRANS_FROM  UNIQUE (FLOW_STATE_TRANSITION_ID, FROM_STATE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_STATE_TRANSITION_ROLE(
    FLOW_STATE_TRANSITION_ID    NUMBER(10, 0)    NOT NULL,
    FROM_STATE_ID               NUMBER(10, 0)    NOT NULL,
    ROLE_SID                    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_FLOW_STATE_TRANS_ROLE PRIMARY KEY (FLOW_STATE_TRANSITION_ID, FROM_STATE_ID, ROLE_SID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_TRANSITION_ALERT(
    FLOW_STATE_TRANSITION_ID    NUMBER(10, 0)    NOT NULL,
    CUSTOMER_ALERT_TYPE_ID      NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_FLOW_TRANSITION_ALERT PRIMARY KEY (FLOW_STATE_TRANSITION_ID, CUSTOMER_ALERT_TYPE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.FLOW_TRANSITION_ALERT_ROLE(
    FLOW_STATE_TRANSITION_ID    NUMBER(10, 0)    NOT NULL,
    CUSTOMER_ALERT_TYPE_ID      NUMBER(10, 0)    NOT NULL,
    ROLE_SID                    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_FLOW_TRANS_ALERT_ROLE PRIMARY KEY (FLOW_STATE_TRANSITION_ID, CUSTOMER_ALERT_TYPE_ID, ROLE_SID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_APP_SCHEMA (
    ORACLE_SCHEMA VARCHAR2(30) NOT NULL,
    CONSTRAINT PK_APP_SCHEMA PRIMARY KEY (ORACLE_SCHEMA)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_APP_SCHEMA_TABLE (
    ORACLE_SCHEMA VARCHAR2(30) NOT NULL,
    ORACLE_TABLE VARCHAR2(30) NOT NULL,
    CONSTRAINT PK_APP_SCHEMA_TABLE PRIMARY KEY (ORACLE_SCHEMA, ORACLE_TABLE)
) ON COMMIT PRESERVE ROWS;

/* 
XXX: no app_sid -- but needed for cms editor

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_CONTEXT (
    CONTEXT_ID NUMBER(10) NOT NULL,
    PARENT_CONTEXT_ID NUMBER(10)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_FAST_CONTEXT (
    CONTEXT_ID NUMBER(10) NOT NULL,
    PARENT_CONTEXT_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_FAST_CONTEXT PRIMARY KEY (CONTEXT_ID, PARENT_CONTEXT_ID)
) ON COMMIT DELETE ROWS;
*/

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_IMAGE (
    IMAGE_ID NUMBER(10) NOT NULL,
    MIME_TYPE VARCHAR2(100) NOT NULL,
    SHA1 RAW(20) NOT NULL,
    FILENAME VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(1000),
    DATA BLOB NOT NULL,
    MODIFIED_DTM TIMESTAMP,
    WIDTH NUMBER(10),
    HEIGHT NUMBER(10),
    RECYCLED NUMBER(1) NOT NULL,
    CONSTRAINT PK_IMAGE PRIMARY KEY (IMAGE_ID),
    CHECK (RECYCLED IN (0,1))
) ON COMMIT PRESERVE ROWS;


/*
XXX: no app sid -- but needed for cms editor

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_SECURABLE_OBJECT_WHITELIST (
    SID_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_SECURABLE_OBJECT_WHITELIST PRIMARY KEY (SID_ID)
) ON COMMIT DELETE ROWS;
*/

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_CK_CONS (
    CK_CONS_ID NUMBER(10) NOT NULL,
    TAB_SID NUMBER(10) NOT NULL,
    SEARCH_CONDITION CLOB,
    CONSTRAINT PK_CK_CONS PRIMARY KEY (CK_CONS_ID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_CK_CONS_COL (
    CK_CONS_ID NUMBER(10) NOT NULL,
    COLUMN_SID NUMBER(10) NOT NULL,
    CONSTRAINT PK_CK_CONS_COL PRIMARY KEY (CK_CONS_ID, COLUMN_SID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_DISPLAY_TEMPLATE (
    DISPLAY_TEMPLATE_ID NUMBER(10) NOT NULL,
    TAB_SID NUMBER(10),
    TEMPLATE_URL VARCHAR2(500) NOT NULL,
    PRIORITY NUMBER(10) NOT NULL,
    NAME VARCHAR2(1000) NOT NULL,
    DESCRIPTION VARCHAR2(2000),
    CONSTRAINT PK_DISPLAY_TEMPLATE PRIMARY KEY (DISPLAY_TEMPLATE_ID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_FILTER (
    FILTER_SID NUMBER(10) NOT NULL,
    TAB_SID NUMBER(10) NOT NULL,
    NAME VARCHAR2(500) NOT NULL,
    USER_SID NUMBER(10),
    FILTER_XML XMLTYPE NOT NULL,
    IS_ACTIVE_SESSION_FILTER NUMBER(1) NOT NULL,
    CONSTRAINT PK_FILTER PRIMARY KEY (FILTER_SID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_FK_CONS (
    FK_CONS_ID NUMBER(10) NOT NULL,
    TAB_SID NUMBER(10) NOT NULL,
    R_CONS_ID NUMBER(10) NOT NULL,
    DELETE_RULE VARCHAR2(1) NOT NULL,
    CONSTRAINT PK_FK_CONS PRIMARY KEY (FK_CONS_ID),
    CHECK (delete_rule in ('R','C','N'))
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_FK_CONS_COL (
    FK_CONS_ID NUMBER(10) NOT NULL,
    COLUMN_SID NUMBER(10) NOT NULL,
    POS NUMBER(10) NOT NULL,
    CONSTRAINT PK_FK_CONS_COL PRIMARY KEY (FK_CONS_ID, COLUMN_SID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_FORM (
    FORM_SID NUMBER(10) NOT NULL,
    DESCRIPTION VARCHAR2(2000) NOT NULL,
    FORM_XML XMLTYPE NOT NULL,
    PARENT_TAB_SID NUMBER(10),
    CONSTRAINT PK_CMS_FORM PRIMARY KEY (FORM_SID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_IMAGE_TAG (
    PARENT_TAG_ID NUMBER(10) NOT NULL,
    IMAGE_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_IMAGE_TAG PRIMARY KEY (PARENT_TAG_ID, IMAGE_ID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_LINK_TRACK (
    ITEM_ID NUMBER(10) NOT NULL,
    CONTEXT_ID NUMBER(10) NOT NULL,
    COLUMN_SID NUMBER(10),
    PATH VARCHAR2(1000) NOT NULL,
    QUERY_STRING VARCHAR2(2000)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_TAB (
    TAB_SID NUMBER(10) NOT NULL,
    ORACLE_SCHEMA VARCHAR2(30) NOT NULL,
    ORACLE_TABLE VARCHAR2(30) NOT NULL,
    DESCRIPTION VARCHAR2(2000),
    FORMAT_SQL VARCHAR2(500),
    PK_CONS_ID NUMBER(10),
    MANAGED NUMBER(1) NOT NULL,
    AUTO_REGISTERED NUMBER(1) NOT NULL,
    CMS_EDITOR NUMBER(10) NOT NULL,
    ISSUES NUMBER(1) NOT NULL,
    FLOW_SID NUMBER(10),
    CONSTRAINT PK_TAB PRIMARY KEY (TAB_SID),
    CHECK (CMS_EDITOR IN (0,1)),
    CHECK (managed in (0,1)),
    CHECK (auto_registered in (0,1)),
    CHECK (ISSUES IN (0,1))
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_TAB_COLUMN (
    COLUMN_SID NUMBER(10) NOT NULL,
    TAB_SID NUMBER(10),
    ORACLE_COLUMN VARCHAR2(30) NOT NULL,
    DESCRIPTION VARCHAR2(2000),
    POS NUMBER(10) NOT NULL,
    COL_TYPE NUMBER(10) NOT NULL,
    MASTER_COLUMN_SID NUMBER(10),
    ENUMERATED_DESC_FIELD VARCHAR2(30),
    ENUMERATED_POS_FIELD VARCHAR2(30),
    ENUMERATED_HIDDEN_FIELD VARCHAR2(30),
    HELP CLOB,
    CHECK_MSG VARCHAR2(2000),
    CALC_XML XMLTYPE,
    DATA_TYPE VARCHAR2(106),
    DATA_LENGTH NUMBER,
    DATA_PRECISION NUMBER,
    DATA_SCALE NUMBER,
    NULLABLE VARCHAR2(1),
    CHAR_LENGTH NUMBER,
    VALUE_PLACEHOLDER NUMBER(1) CONSTRAINT NN_TAB_COLUMN_VAL_PLACEHOLDER NOT NULL,
    HELPER_PKG VARCHAR2(255),
    TREE_DESC_FIELD VARCHAR2(30),
    TREE_ID_FIELD VARCHAR2(30),
    TREE_PARENT_ID_FIELD VARCHAR2(30),
    FULL_TEXT_INDEX_NAME	VARCHAR2(255),
    CONSTRAINT PK_TAB_COLUMN PRIMARY KEY (COLUMN_SID),
    CONSTRAINT CC_TAB_COLUMN_VAL_PLACEHOLDER CHECK (VALUE_PLACEHOLDER IN(0,1)),
    CONSTRAINT CK_TAB_COL_CALC_XML CHECK ((calc_xml is null and col_type != 25) or (calc_xml is not null and col_type = 25))
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_TAB_COLUMN_MEASURE (
    COLUMN_SID NUMBER(10) NOT NULL,
    MEASURE_SID NUMBER(10) NOT NULL,
    CONSTRAINT PK_TAB_COLUMN_MEASURE PRIMARY KEY (COLUMN_SID, MEASURE_SID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_TAG (
    TAG_ID NUMBER(10) NOT NULL,
    TAG VARCHAR2(300) NOT NULL,
    PARENT_TAG_ID NUMBER(10),
    CONSTRAINT PK_CMS_TAG PRIMARY KEY (TAG_ID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_UK_CONS (
    UK_CONS_ID NUMBER(10) NOT NULL,
    TAB_SID NUMBER(10) NOT NULL,
    CONSTRAINT PK_UK_CONS PRIMARY KEY (UK_CONS_ID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_UK_CONS_COL (
    UK_CONS_ID NUMBER(10) NOT NULL,
    COLUMN_SID NUMBER(10) NOT NULL,
    POS NUMBER(10) NOT NULL,
    CONSTRAINT PK_UK_CONS_COL PRIMARY KEY (UK_CONS_ID, COLUMN_SID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_WEB_PUBLICATION (
    WEB_PUBLICATION_ID NUMBER(10) NOT NULL,
    DISPLAY_TEMPLATE_ID NUMBER(10) NOT NULL,
    ITEM_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_WEB_PUBLICATION PRIMARY KEY (WEB_PUBLICATION_ID)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_TAB_COLUMN_ROLE_PERMISSION (
    COLUMN_SID NUMBER(10) NOT NULL,
    ROLE_SID NUMBER(10) NOT NULL,
    PERMISSION NUMBER(1) NOT NULL,
    CONSTRAINT PK_TAB_COLUMN_ROLE_PERMISSION PRIMARY KEY (COLUMN_SID, ROLE_SID),
    CHECK (PERMISSION IN (0, 1, 2))
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.CMS_FLOW_TAB_COLUMN_CONS (
    COLUMN_SID NUMBER(10) NOT NULL,
    FLOW_STATE_ID NUMBER NOT NULL,
    NULLABLE NUMBER(1) NOT NULL,
    CONSTRAINT PK_FLOW_TAB_COLUMN_CONS PRIMARY KEY (COLUMN_SID, FLOW_STATE_ID),
    CHECK (NULLABLE IN (0, 1))
) ON COMMIT PRESERVE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.ALL_METER(
    REGION_SID                        NUMBER(10, 0)     NOT NULL,
    NOTE                              VARCHAR2(4000),
    PRIMARY_IND_SID                   NUMBER(10, 0)     NOT NULL,
    PRIMARY_MEASURE_CONVERSION_ID     NUMBER(10, 0),
    METER_SOURCE_TYPE_ID              NUMBER(10, 0)     NOT NULL,
    REFERENCE                         VARCHAR2(256),
    CRC_METER                         NUMBER(1, 0)      NOT NULL,
    ACTIVE                            NUMBER(1, 0)      NOT NULL,
    EXPORT_LIVE_DATA_AFTER_DTM        DATE,
    COST_IND_SID                      NUMBER(10, 0),
    COST_MEASURE_CONVERSION_ID        NUMBER(10, 0),
    DAYS_IND_SID                      NUMBER(10, 0),
    DAYS_MEASURE_CONVERSION_ID        NUMBER(10, 0),
    COSTDAYS_IND_SID                  NUMBER(10, 0),
    COSTDAYS_MEASURE_CONVERSION_ID    NUMBER(10, 0),
    APPROVED_BY_SID                   NUMBER(10, 0),
    APPROVED_DTM                      DATE,
    IS_CORE                           NUMBER(1, 0)      NOT NULL,
    CHECK (CRC_METER IN (0,1)),
    CHECK (ACTIVE IN (0, 1)),
    CONSTRAINT CK_ALL_METER_IS_CORE CHECK (IS_CORE IN (0,1)),
    CONSTRAINT PK406 PRIMARY KEY (REGION_SID)
) ON COMMIT DELETE ROWS;



CREATE GLOBAL TEMPORARY TABLE CSRIMP.EVENT(
    EVENT_ID                 NUMBER(10, 0)     NOT NULL,
    LABEL                    VARCHAR2(4000)    NOT NULL,
    RAISED_BY_USER_SID       NUMBER(10, 0)     NOT NULL,
    RAISED_DTM               DATE              NOT NULL,
    EVENT_TEXT               CLOB              NOT NULL,
    RAISED_FOR_REGION_SID    NUMBER(10, 0)     NOT NULL,
    EVENT_DTM                DATE              NOT NULL,
    CONSTRAINT PK1 PRIMARY KEY (EVENT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.LIVE_DATA_DURATION(
    LIVE_DATA_DURATION_ID    NUMBER(10, 0)    NOT NULL,
    DURATION                 NUMBER(10, 0),
    DESCRIPTION              VARCHAR2(256)    NOT NULL,
    IS_HOURS                 NUMBER(10, 0)    NOT NULL,
    IS_WEEKS                 NUMBER(1, 0)     NOT NULL,
    WEEK_START_DAY           NUMBER(10, 0),
    IS_MONTHS                NUMBER(1, 0)     NOT NULL,
    START_MONTH              NUMBER(10, 0),
    IS_SYSTEM_PERIOD         NUMBER(1, 0)     NOT NULL,
    CHECK (IS_HOURS = 0 OR (IS_HOURS  = 1 AND IS_WEEKS = 0 AND IS_MONTHS = 0)),
    CHECK (IS_WEEKS = 0 OR (IS_WEEKS = 1 AND IS_HOURS = 0 AND IS_MONTHS = 0)),
    CHECK (WEEK_START_DAY IS NULL OR IS_WEEKS = 1),
    CHECK (IS_MONTHS = 0 OR (IS_MONTHS = 1 AND IS_HOURS = 0 AND IS_WEEKS = 0)),
    CHECK (START_MONTH IS NULL OR IS_MONTHS = 1),
    CHECK (IS_SYSTEM_PERIOD IN (0,1)),
    CONSTRAINT PK912 PRIMARY KEY (LIVE_DATA_DURATION_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE(
    FIRST_PRIORITY_SET_DTM        DATE,
    ISSUE_ID                      NUMBER(10, 0)     NOT NULL,
    LABEL                         VARCHAR2(2048),
    LAST_LABEL                    VARCHAR2(2048),
    SOURCE_LABEL                  VARCHAR2(2000),
    CORRESPONDENT_ID              NUMBER(10, 0),
    CORRESPONDENT_NOTIFIED        NUMBER(1, 0)      NOT NULL,
    RAISED_BY_USER_SID            NUMBER(10, 0)     NOT NULL,
    RAISED_DTM                    DATE              NOT NULL,
    OWNER_USER_SID                NUMBER(10, 0),
    OWNER_ROLE_SID                NUMBER(10, 0),
    RESOLVED_BY_USER_SID          NUMBER(10, 0),
    RESOLVED_DTM                  DATE,
    CLOSED_BY_USER_SID            NUMBER(10, 0),
    CLOSED_DTM                    DATE,
    ASSIGNED_TO_USER_SID          NUMBER(10, 0),
    ASSIGNED_TO_ROLE_SID          NUMBER(10, 0),
    REGION_SID                    NUMBER(10, 0),
    REJECTED_DTM                  DATE,
    REJECTED_BY_USER_SID          NUMBER(10, 0),
    DUE_DTM                       DATE,
    LAST_DUE_DTM                  DATE,
    GUID                          RAW(16),
    ISSUE_PENDING_VAL_ID          NUMBER(10, 0),
    ISSUE_SHEET_VALUE_ID          NUMBER(10, 0),
    ISSUE_SURVEY_ANSWER_ID        NUMBER(10, 0),
    ISSUE_TYPE_ID                 NUMBER(10, 0)     NOT NULL,
    ISSUE_NON_COMPLIANCE_ID       NUMBER(10, 0),
    ISSUE_ACTION_ID               NUMBER(10, 0),
    ISSUE_METER_ID                NUMBER(10, 0),
    ISSUE_METER_ALARM_ID          NUMBER(10, 0),
    ISSUE_METER_RAW_DATA_ID       NUMBER(10, 0),
    ISSUE_PRIORITY_ID             NUMBER(10, 0),
    LAST_ISSUE_PRIORITY_ID        NUMBER(10, 0),
    ISSUE_METER_DATA_SOURCE_ID    NUMBER(10, 0),
    ISSUE_SUPPLIER_ID             NUMBER(10, 0),
    IS_VISIBLE                    NUMBER(1, 0)      NOT NULL,
    SOURCE_URL                    VARCHAR2(2000),
    DELETED                       NUMBER(1, 0)      NOT NULL,
    PARENT_ID                     NUMBER(10, 0),
    CONSTRAINT CHK_ISSUE_FKS CHECK ((ISSUE_PENDING_VAL_ID IS NOT NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_SHEET_VALUE_ID IS NOT NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_SURVEY_ANSWER_ID IS NOT NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_NON_COMPLIANCE_ID IS NOT NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_ACTION_ID IS NOT NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_METER_ID IS NOT NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_METER_ALARM_ID IS NOT NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_METER_RAW_DATA_ID IS NOT NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_METER_DATA_SOURCE_ID IS NOT NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_SUPPLIER_ID IS NULL)
OR
(ISSUE_METER_DATA_SOURCE_ID IS NULL AND ISSUE_NON_COMPLIANCE_ID IS NULL AND ISSUE_SHEET_VALUE_ID IS NULL AND ISSUE_PENDING_VAL_ID IS NULL AND ISSUE_SURVEY_ANSWER_ID IS NULL AND ISSUE_ACTION_ID IS NULL AND ISSUE_METER_ID IS NULL AND ISSUE_METER_ALARM_ID IS NULL AND ISSUE_METER_RAW_DATA_ID IS NULL AND ISSUE_SUPPLIER_ID IS NOT NULL)),
    CONSTRAINT CHK_ISSUE_XOR_IS_ASSIGNED CHECK ((ASSIGNED_TO_USER_SID IS NOT NULL OR ASSIGNED_TO_ROLE_SID IS NOT NULL)
AND
(ASSIGNED_TO_USER_SID IS NULL OR ASSIGNED_TO_ROLE_SID IS NULL)),
    CONSTRAINT CHK_ISSUE_XOR_OWNER CHECK ((OWNER_USER_SID IS NOT NULL OR OWNER_ROLE_SID IS NOT NULL)
AND
(OWNER_USER_SID IS NULL OR OWNER_ROLE_SID IS NULL)),
    CONSTRAINT CHK_ISSUE_IS_VISIBLE CHECK (IS_VISIBLE IN (0,1)),
    CONSTRAINT CHK_DELETED_0_OR_1 CHECK (DELETED IN (0,1)),
    CONSTRAINT PK_ISSUE PRIMARY KEY (ISSUE_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_ACTION(
    ISSUE_ACTION_ID    NUMBER(10, 0)    NOT NULL,
    TASK_SID           NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK777 PRIMARY KEY (ISSUE_ACTION_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_ACTION_LOG(
    ISSUE_ACTION_LOG_ID           NUMBER(10, 0)     NOT NULL,
    ISSUE_ACTION_TYPE_ID          NUMBER(10, 0)     NOT NULL,
    ISSUE_ID                      NUMBER(10, 0),
    ISSUE_LOG_ID                  NUMBER(10, 0),
    LOGGED_BY_USER_SID            NUMBER(10, 0),
    LOGGED_BY_CORRESPONDENT_ID    NUMBER(10, 0),
    LOGGED_DTM                    DATE              NOT NULL,
    ASSIGNED_TO_ROLE_SID          NUMBER(10, 0),
    ASSIGNED_TO_USER_SID          NUMBER(10, 0),
    RE_USER_SID                   NUMBER(10, 0),
    RE_ROLE_SID                   NUMBER(10, 0),
    OLD_LABEL                     VARCHAR2(2048),
    NEW_LABEL                     VARCHAR2(2048),
    OLD_DUE_DTM                   DATE,
    NEW_DUE_DTM                   DATE,
    OLD_PRIORITY_ID               NUMBER(10, 0),
    NEW_PRIORITY_ID               NUMBER(10, 0),
    CONSTRAINT CHK_IAL_XOR_ASSIGNED CHECK (ISSUE_ACTION_TYPE_ID NOT IN (1)
OR
(
	(ASSIGNED_TO_USER_SID IS NOT NULL OR ASSIGNED_TO_ROLE_SID IS NOT NULL)
	AND
	(ASSIGNED_TO_USER_SID IS NULL OR ASSIGNED_TO_ROLE_SID IS NULL)
)),
    CONSTRAINT CHK_IAL_XOR_LOGGED_BY CHECK ((LOGGED_BY_USER_SID IS NOT NULL OR LOGGED_BY_CORRESPONDENT_ID IS NOT NULL)
AND
(LOGGED_BY_USER_SID IS NULL OR LOGGED_BY_CORRESPONDENT_ID IS NULL)),
    CONSTRAINT PK_ISSUE_ACTION_LOG PRIMARY KEY (ISSUE_ACTION_LOG_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_CUSTOM_FIELD(
    ISSUE_CUSTOM_FIELD_ID    NUMBER(10, 0)    NOT NULL,
    ISSUE_TYPE_ID            NUMBER(10, 0)    NOT NULL,
    FIELD_TYPE               CHAR(1)          NOT NULL,
    LABEL                    VARCHAR2(64)     NOT NULL,
    CONSTRAINT CHK_ISS_CUST_FLD_TYP CHECK (FIELD_TYPE IN ('T', 'O','M')),
    CONSTRAINT PK_ISSUE_CUSTOM_FIELD PRIMARY KEY (ISSUE_CUSTOM_FIELD_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_CUSTOM_FIELD_OPT_SEL(
    ISSUE_ID                     NUMBER(10, 0)    NOT NULL,
    ISSUE_CUSTOM_FIELD_ID        NUMBER(10, 0)    NOT NULL,
    ISSUE_CUSTOM_FIELD_OPT_ID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ISSUE_CUSTOM_FIELD_OPT_SEL PRIMARY KEY (ISSUE_ID, ISSUE_CUSTOM_FIELD_ID, ISSUE_CUSTOM_FIELD_OPT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_CUSTOM_FIELD_OPTION(
    ISSUE_CUSTOM_FIELD_ID        NUMBER(10, 0)    NOT NULL,
    ISSUE_CUSTOM_FIELD_OPT_ID    NUMBER(10, 0)    NOT NULL,
    LABEL                        VARCHAR2(64)     NOT NULL,
    CONSTRAINT PK_ISSUE_CUSTOM_FIELD_OPTION PRIMARY KEY (ISSUE_CUSTOM_FIELD_ID, ISSUE_CUSTOM_FIELD_OPT_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_CUSTOM_FIELD_STR_VAL(
    ISSUE_ID                 NUMBER(10, 0)    NOT NULL,
    ISSUE_CUSTOM_FIELD_ID    NUMBER(10, 0)    NOT NULL,
    STRING_VALUE             VARCHAR2(255)    NOT NULL,
    CONSTRAINT PK_ISSUE_CUSTOM_FIELD_STR_VAL PRIMARY KEY (ISSUE_ID, ISSUE_CUSTOM_FIELD_ID)
) ON COMMIT DELETE ROWS;



CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_LOG(
    ISSUE_LOG_ID                  NUMBER(10, 0)     NOT NULL,
    ISSUE_ID                      NUMBER(10, 0),
    MESSAGE                       CLOB              NOT NULL,
    LOGGED_DTM                    DATE              NOT NULL,
    IS_SYSTEM_GENERATED           NUMBER(1, 0)      NOT NULL,
    LOGGED_BY_USER_SID            NUMBER(10, 0),
    LOGGED_BY_CORRESPONDENT_ID    NUMBER(10, 0),
    PARAM_1                       VARCHAR2(2048),
    PARAM_2                       VARCHAR2(2048),
    PARAM_3                       VARCHAR2(2048),
    CONSTRAINT CHK_IL_XOR_LOGGED_BY CHECK ((LOGGED_BY_USER_SID IS NOT NULL OR LOGGED_BY_CORRESPONDENT_ID IS NOT NULL)
AND
(LOGGED_BY_USER_SID IS NULL OR LOGGED_BY_CORRESPONDENT_ID IS NULL)),
    CONSTRAINT PK_ISSUE_LOG PRIMARY KEY (ISSUE_LOG_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_LOG_FILE(
    ISSUE_LOG_FILE_ID    NUMBER(10, 0)    NOT NULL,
    ISSUE_LOG_ID         NUMBER(10, 0)    NOT NULL,
    FILENAME             VARCHAR2(255)    NOT NULL,
    MIME_TYPE            VARCHAR2(256)    NOT NULL,
    DATA                 BLOB             NOT NULL,
    SHA1                 RAW(20)          NOT NULL,
    UPLOADED_DTM         DATE             NOT NULL,
    CONSTRAINT PK_ISSUE_LOG_FILE PRIMARY KEY (ISSUE_LOG_FILE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_LOG_READ(
    ISSUE_LOG_ID    NUMBER(10, 0)    NOT NULL,
    READ_DTM        TIMESTAMP(6)     NOT NULL,
    CSR_USER_SID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ISSUE_LOG_READ PRIMARY KEY (ISSUE_LOG_ID, CSR_USER_SID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_METER(
    ISSUE_METER_ID    NUMBER(10, 0)    NOT NULL,
    REGION_SID        NUMBER(10, 0)    NOT NULL,
    ISSUE_DTM         DATE,
    CONSTRAINT PK914 PRIMARY KEY (ISSUE_METER_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_METER_ALARM(
    ISSUE_METER_ALARM_ID    NUMBER(10, 0)    NOT NULL,
    REGION_SID              NUMBER(10, 0)    NOT NULL,
    METER_ALARM_ID          NUMBER(10, 0)    NOT NULL,
    ISSUE_DTM               DATE             NOT NULL,
    CONSTRAINT PK979 PRIMARY KEY (ISSUE_METER_ALARM_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_METER_DATA_SOURCE(
    ISSUE_METER_DATA_SOURCE_ID    NUMBER(10, 0)    NOT NULL,
    RAW_DATA_SOURCE_ID            NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK1193 PRIMARY KEY (ISSUE_METER_DATA_SOURCE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_METER_RAW_DATA(
    ISSUE_METER_RAW_DATA_ID    NUMBER(10, 0)    NOT NULL,
    METER_RAW_DATA_ID          NUMBER(10, 0)    NOT NULL,
    REGION_SID                 NUMBER(10, 0),
    CONSTRAINT PK994 PRIMARY KEY (ISSUE_METER_RAW_DATA_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_NON_COMPLIANCE(
    ISSUE_NON_COMPLIANCE_ID    NUMBER(10, 0)    NOT NULL,
    NON_COMPLIANCE_ID          NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK663 PRIMARY KEY (ISSUE_NON_COMPLIANCE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_PENDING_VAL(
    ISSUE_PENDING_VAL_ID    NUMBER(10, 0)    NOT NULL,
    PENDING_REGION_ID       NUMBER(10, 0)    NOT NULL,
    PENDING_IND_ID          NUMBER(10, 0)    NOT NULL,
    PENDING_PERIOD_ID       NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ISSUE_PENDING_VAL PRIMARY KEY (ISSUE_PENDING_VAL_ID),
    CONSTRAINT UK_ISSUE_PENDING_VAL  UNIQUE (PENDING_IND_ID, PENDING_REGION_ID, PENDING_PERIOD_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_PRIORITY(
    ISSUE_PRIORITY_ID    NUMBER(10, 0)     NOT NULL,
    DESCRIPTION          VARCHAR2(1000)    NOT NULL,
    DUE_DATE_OFFSET      NUMBER(10, 0)     NOT NULL,
    CONSTRAINT PK_ISSUE_PRIORITY PRIMARY KEY (ISSUE_PRIORITY_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_SCHEDULED_TASK(
    ISSUE_SCHEDULED_TASK_ID    NUMBER(10, 0)    NOT NULL,
    LABEL                      VARCHAR2(255)    NOT NULL,
    SCHEDULE_XML               SYS.XMLType      NOT NULL,
    PERIOD_XML                 SYS.XMLType      NOT NULL,
    LAST_CREATED               DATE,
    ASSIGN_TO_USER_SID         NUMBER(10, 0)    NOT NULL,
    NEXT_RUN_DTM               TIMESTAMP(6),
    CONSTRAINT PK_ISSUE_SCHEDULED_TASK PRIMARY KEY (ISSUE_SCHEDULED_TASK_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_SHEET_VALUE(
    ISSUE_SHEET_VALUE_ID    NUMBER(10, 0)    NOT NULL,
    IND_SID                 NUMBER(10, 0)    NOT NULL,
    REGION_SID              NUMBER(10, 0)    NOT NULL,
    START_DTM               DATE             NOT NULL,
    END_DTM                 DATE             NOT NULL,
    CONSTRAINT PK_ISSUE_SHEET_VALUE PRIMARY KEY (ISSUE_SHEET_VALUE_ID),
    CONSTRAINT UK_ISSUE_SHEET_VALUE  UNIQUE (IND_SID, REGION_SID, START_DTM, END_DTM)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_SUPPLIER(
    ISSUE_SUPPLIER_ID              NUMBER(10, 0)    NOT NULL,
    SUPPLIER_SID                   NUMBER(10, 0)    NOT NULL,
    QS_EXPR_NON_COMPL_ACTION_ID    NUMBER(10, 0),
    CONSTRAINT PK_ISSUE_SUPPLIER PRIMARY KEY (ISSUE_SUPPLIER_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_SURVEY_ANSWER(
    ISSUE_SURVEY_ANSWER_ID    NUMBER(10, 0)    NOT NULL,
    SURVEY_RESPONSE_ID        NUMBER(10, 0)    NOT NULL,
    QUESTION_ID               NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK642 PRIMARY KEY (ISSUE_SURVEY_ANSWER_ID),
    CONSTRAINT UK_ISSUE_SURVEY_ANSWER  UNIQUE (SURVEY_RESPONSE_ID, QUESTION_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_TYPE(
    ISSUE_TYPE_ID                NUMBER(10, 0)    NOT NULL,
    LABEL                        VARCHAR2(255)    NOT NULL,
    DEFAULT_REGION_SID           NUMBER(10, 0),
    DEFAULT_ISSUE_PRIORITY_ID    NUMBER(10, 0),
    ALERT_MAIL_ADDRESS           VARCHAR2(100),
    ALERT_MAIL_NAME              VARCHAR2(100),
    REQUIRE_PRIORITY             NUMBER(1, 0)     NOT NULL,
    ALLOW_CHILDREN               NUMBER(1, 0)     NOT NULL,
    CONSTRAINT PK643 PRIMARY KEY (ISSUE_TYPE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.ISSUE_USER(
    ISSUE_ID       NUMBER(10, 0)    NOT NULL,
    IS_AN_OWNER    NUMBER(1, 0)     NOT NULL,
    USER_SID       NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ISSUE_USER PRIMARY KEY (ISSUE_ID, USER_SID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM(
    METER_ALARM_ID          NUMBER(10, 0)     NOT NULL,
    INHERITABLE             NUMBER(1, 0)      NOT NULL,
    ENABLED                 NUMBER(1, 0)      NOT NULL,
    NAME                    VARCHAR2(1024)    NOT NULL,
    TEST_TIME_ID            NUMBER(10, 0)     NOT NULL,
    LOOK_AT_STATISTIC_ID    NUMBER(10, 0)     NOT NULL,
    COMPARE_STATISTIC_ID    NUMBER(10, 0)     NOT NULL,
    COMPARISON_ID           NUMBER(10, 0)     NOT NULL,
    COMPARISON_PCT          NUMBER(10, 5)     NOT NULL,
    ISSUE_PERIOD_ID         NUMBER(10, 0)     NOT NULL,
    ISSUE_TRIGGER_COUNT     NUMBER(10, 0)     NOT NULL,
    CHECK (INHERITABLE IN(0,1)),
    CHECK (ENABLED IN(0,1)),
    CONSTRAINT PK960 PRIMARY KEY (METER_ALARM_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_COMPARISON(
    COMPARISON_ID    NUMBER(10, 0)    NOT NULL,
    NAME             VARCHAR2(256)    NOT NULL,
    SHOW_PCT         NUMBER(1, 0)     NOT NULL,
    OP_CODE          VARCHAR2(64)     NOT NULL,
    CHECK (SHOW_PCT IN(0,1)),
    CONSTRAINT PK962 PRIMARY KEY (COMPARISON_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_EVENT(
    REGION_SID              NUMBER(10, 0)    NOT NULL,
    METER_ALARM_ID          NUMBER(10, 0)    NOT NULL,
    METER_ALARM_EVENT_ID    NUMBER(10, 0)    NOT NULL,
    EVENT_DTM               DATE             NOT NULL,
    CONSTRAINT PK975 PRIMARY KEY (REGION_SID, METER_ALARM_ID, METER_ALARM_EVENT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_ISSUE_PERIOD(
    ISSUE_PERIOD_ID    NUMBER(10, 0)    NOT NULL,
    NAME               VARCHAR2(256)    NOT NULL,
    TEST_FUNCTION      VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK964 PRIMARY KEY (ISSUE_PERIOD_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_STAT_RUN(
    METER_ALARM_ID    NUMBER(10, 0)    NOT NULL,
    REGION_SID        NUMBER(10, 0)    NOT NULL,
    STATISTIC_ID      NUMBER(10, 0)    NOT NULL,
    STATISTIC_DTM     DATE             NOT NULL,
    CONSTRAINT PK977 PRIMARY KEY (METER_ALARM_ID, REGION_SID, STATISTIC_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_STATISTIC(
    STATISTIC_ID    NUMBER(10, 0)    NOT NULL,
    NAME            VARCHAR2(256)    NOT NULL,
    IS_AVERAGE      NUMBER(1, 0)     NOT NULL,
    IS_SUM          NUMBER(1, 0)     NOT NULL,
    COMP_PROC       VARCHAR2(256),
    CHECK (IS_AVERAGE IN(0,1)),
    CHECK (IS_SUM  IN(0,1)),
    CONSTRAINT PK963 PRIMARY KEY (STATISTIC_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_STATISTIC_JOB(
    REGION_SID         NUMBER(10, 0)    NOT NULL,
    STATISTIC_ID       NUMBER(10, 0)    NOT NULL,
    JOB_CREATED_DTM    DATE             NOT NULL,
    CONSTRAINT PK966 PRIMARY KEY (REGION_SID, STATISTIC_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_STATISTIC_PERIOD(
    REGION_SID       NUMBER(10, 0)     NOT NULL,
    STATISTIC_ID     NUMBER(10, 0)     NOT NULL,
    STATISTIC_DTM    DATE              NOT NULL,
    VAL              NUMBER(24, 10),
    AVERAGE_COUNT    NUMBER(10, 0),
    CONSTRAINT PK978 PRIMARY KEY (REGION_SID, STATISTIC_ID, STATISTIC_DTM)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ALARM_TEST_TIME(
    TEST_TIME_ID     NUMBER(10, 0)    NOT NULL,
    NAME             VARCHAR2(256)    NOT NULL,
    TEST_FUNCTION    VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK961 PRIMARY KEY (TEST_TIME_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_DOCUMENT(
    METER_DOCUMENT_ID    NUMBER(10, 0)     NOT NULL,
    MIME_TYPE            VARCHAR2(256)     NOT NULL,
    FILE_NAME            VARCHAR2(1024)    NOT NULL,
    DATA                 BLOB              NOT NULL,
    CONSTRAINT PK574 PRIMARY KEY (METER_DOCUMENT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_EXCEL_MAPPING(
    RAW_DATA_SOURCE_ID    NUMBER(10, 0)    NOT NULL,
    FIELD_NAME            VARCHAR2(256)    NOT NULL,
    COLUMN_NAME           VARCHAR2(256)    NOT NULL,
    COLUMN_INDEX          NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK1203 PRIMARY KEY (RAW_DATA_SOURCE_ID, FIELD_NAME)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_EXCEL_OPTION(
    RAW_DATA_SOURCE_ID    NUMBER(10, 0)    NOT NULL,
    WORKSHEET_INDEX       NUMBER(10, 0)    NOT NULL,
    ROW_INDEX             NUMBER(10, 0)    NOT NULL,
    CSV_DELIMITER         VARCHAR2(1),
    CONSTRAINT PK1202 PRIMARY KEY (RAW_DATA_SOURCE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_LIST_CACHE(
    REGION_SID              NUMBER(10, 0)     NOT NULL,
    LAST_READING_DTM        DATE,
    ENTERED_DTM             DATE,
    VAL_NUMBER              NUMBER(24, 10),
    AVG_CONSUMPTION         NUMBER(24, 10),
    COST_NUMBER             NUMBER(24, 10),
    READ_BY_SID             NUMBER(10, 0),
    REALTIME_LAST_PERIOD    DATE,
    REALTIME_CONSUMPTION    NUMBER(24, 10),
    CONSTRAINT PK1319 PRIMARY KEY (REGION_SID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_LIVE_DATA(
    REGION_SID               NUMBER(10, 0)     NOT NULL,
    LIVE_DATA_DURATION_ID    NUMBER(10, 0)     NOT NULL,
    START_DTM                DATE              NOT NULL,
    METER_RAW_DATA_ID        NUMBER(10, 0),
    END_DTM                  DATE              NOT NULL,
    MODIFIED_DTM             DATE              NOT NULL,
    CONSUMPTION              NUMBER(24, 10),
    CONSTRAINT PK911 PRIMARY KEY (REGION_SID, LIVE_DATA_DURATION_ID, START_DTM)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_METER_ALARM_STATISTIC(
    REGION_SID        NUMBER(10, 0)    NOT NULL,
    STATISTIC_ID      NUMBER(10, 0)    NOT NULL,
    NOT_BEFORE_DTM    DATE,
    LAST_COMP_DTM     DATE,
    CONSTRAINT PK965 PRIMARY KEY (REGION_SID, STATISTIC_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_ORPHAN_DATA(
    SERIAL_ID             VARCHAR2(256)     NOT NULL,
    START_DTM             DATE              NOT NULL,
    END_DTM               DATE              NOT NULL,
    METER_RAW_DATA_ID     NUMBER(10, 0)     NOT NULL,
    CONSUMPTION           NUMBER(24, 10)    NOT NULL,
    UOM                   VARCHAR2(256)     NOT NULL,
    RELATED_LOCATION_1    VARCHAR2(256),
    RELATED_LOCATION_2    VARCHAR2(256)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_RAW_DATA(
    METER_RAW_DATA_ID     NUMBER(10, 0)    NOT NULL,
    RAW_DATA_SOURCE_ID    NUMBER(10, 0)    NOT NULL,
    RECEIVED_DTM          DATE             NOT NULL,
    START_DTM             DATE             NOT NULL,
    END_DTM               DATE             NOT NULL,
    MIME_TYPE             VARCHAR2(256)    NOT NULL,
    ENCODING_NAME         VARCHAR2(256)    NOT NULL,
    MESSAGE_UID           NUMBER(10, 0),
    DATA                  BLOB             NOT NULL,
    STATUS_ID             NUMBER(10, 0)    NOT NULL,
    ORPHAN_COUNT          NUMBER(10, 0),
    MATCHED_COUNT         NUMBER(10, 0),
    CONSTRAINT PK913 PRIMARY KEY (METER_RAW_DATA_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_RAW_DATA_ERROR(
    METER_RAW_DATA_ID    NUMBER(10, 0)     NOT NULL,
    ERROR_ID             NUMBER(10, 0)     NOT NULL,
    MESSAGE              VARCHAR2(4000)    NOT NULL,
    RAISED_DTM           DATE              NOT NULL,
    DATA_DTM             DATE,
    CONSTRAINT PK931 PRIMARY KEY (METER_RAW_DATA_ID, ERROR_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_RAW_DATA_SOURCE(
    RAW_DATA_SOURCE_ID        NUMBER(10, 0)     NOT NULL,
    SOURCE_EMAIL              VARCHAR2(1024)    NOT NULL,
    PARSER_TYPE               VARCHAR2(256)     NOT NULL,
    HELPER_PKG                VARCHAR2(256)     NOT NULL,
    EXPORT_SYSTEM_VALUES      NUMBER(1, 0)      NOT NULL,
    EXPORT_AFTER_DTM          DATE,
    DEFAULT_ISSUE_USER_SID    NUMBER(10, 0),
    ORPHAN_COUNT              NUMBER(10, 0),
    MATCHED_COUNT             NUMBER(10, 0),
    CHECK (EXPORT_SYSTEM_VALUES IN(0,1)),
    CONSTRAINT PK919 PRIMARY KEY (RAW_DATA_SOURCE_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_RAW_DATA_STATUS(
    STATUS_ID           NUMBER(10, 0)    NOT NULL,
    DESCRIPTION         VARCHAR2(256)    NOT NULL,
    NEEDS_PROCESSING    NUMBER(1, 0)     NOT NULL,
    CHECK (NEEDS_PROCESSING IN(0,1)),
    CONSTRAINT PK932 PRIMARY KEY (STATUS_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_READING(
    REGION_SID             NUMBER(10, 0)     NOT NULL,
    METER_READING_ID       NUMBER(10, 0)     NOT NULL,
    READING_DTM            DATE              NOT NULL,
    VAL_NUMBER             NUMBER(24, 10),
    ENTERED_BY_USER_SID    NUMBER(10, 0)     NOT NULL,
    ENTERED_DTM            DATE              NOT NULL,
    NOTE                   VARCHAR2(4000),
    REFERENCE              VARCHAR2(1024),
    COST                   NUMBER(24, 10),
    METER_DOCUMENT_ID      NUMBER(10, 0),
    CREATED_INVOICE_ID     NUMBER(10, 0),
    CONSTRAINT PK407 PRIMARY KEY (METER_READING_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_READING_PERIOD(
    START_ID    NUMBER(10, 0)    NOT NULL,
    END_ID      NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK572 PRIMARY KEY (START_ID, END_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_SOURCE_DATA(
    REGION_SID           NUMBER(10, 0)     NOT NULL,
    START_DTM            DATE              NOT NULL,
    END_DTM              DATE              NOT NULL,
    METER_RAW_DATA_ID    NUMBER(10, 0),
    CONSUMPTION          NUMBER(24, 10)    NOT NULL
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_SOURCE_TYPE(
    METER_SOURCE_TYPE_ID       NUMBER(10, 0)    NOT NULL,
    NAME                       VARCHAR2(256)    NOT NULL,
    DESCRIPTION                VARCHAR2(512)    NOT NULL,
    MANUAL_DATA_ENTRY          NUMBER(1, 0)     NOT NULL,
    SUPPLIER_DATA_MANDATORY    NUMBER(1, 0)     NOT NULL,
    ARBITRARY_PERIOD           NUMBER(1, 0)     NOT NULL,
    REFERENCE_MANDATORY        NUMBER(1, 0)     NOT NULL,
    ADD_INVOICE_DATA           NUMBER(1, 0)     NOT NULL,
    REALTIME_METERING          NUMBER(1, 0)     NOT NULL,
    SHOW_IN_METER_LIST         NUMBER(1, 0)     NOT NULL,
    CHECK (MANUAL_DATA_ENTRY IN (0,1)),
    CHECK (SUPPLIER_DATA_MANDATORY IN (0,1)),
    CHECK (ARBITRARY_PERIOD IN (0,1)),
    CHECK (REFERENCE_MANDATORY IN (0,1)),
    CHECK (ADD_INVOICE_DATA IN (0,1)),
    CHECK (REALTIME_METERING IN(0,1)),
    CHECK (SHOW_IN_METER_LIST IN(0,1)),
    CONSTRAINT PK570 PRIMARY KEY (METER_SOURCE_TYPE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_UTILITY_CONTRACT(
    REGION_SID             NUMBER(10, 0)    NOT NULL,
    UTILITY_CONTRACT_ID    NUMBER(10, 0)    NOT NULL,
    ACTIVE                 NUMBER(1, 0)     NOT NULL,
    CHECK (ACTIVE IN (0,1)),
    CONSTRAINT PK908 PRIMARY KEY (REGION_SID, UTILITY_CONTRACT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.UTILITY_CONTRACT(
    UTILITY_CONTRACT_ID    NUMBER(10, 0)    NOT NULL,
    UTILITY_SUPPLIER_ID    NUMBER(10, 0)    NOT NULL,
    ACCOUNT_REF            VARCHAR2(256)    NOT NULL,
    FROM_DTM               DATE,
    TO_DTM                 DATE,
    ALERT_WHEN_DUE         NUMBER(1, 0)     NOT NULL,
    FILE_DATA              BLOB,
    FILE_MIME_TYPE         VARCHAR2(256),
    FILE_NAME              VARCHAR2(256),
    CREATED_BY_SID         NUMBER(10, 0),
    CONSTRAINT PK577 PRIMARY KEY (UTILITY_CONTRACT_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.UTILITY_INVOICE(
    UTILITY_INVOICE_ID         NUMBER(10, 0)     NOT NULL,
    UTILITY_CONTRACT_ID        NUMBER(10, 0)     NOT NULL,
    REFERENCE                  VARCHAR2(256)     NOT NULL,
    INVOICE_DTM                DATE              NOT NULL,
    COST_VALUE                 NUMBER(24, 16)    NOT NULL,
    COST_MEASURE_SID           NUMBER(10, 0),
    COST_CONV_ID               NUMBER(10, 0),
    CONSUMPTION                NUMBER(10, 0),
    CONSUMPTION_CONV_ID        NUMBER(10, 0),
    FILE_DATA                  BLOB,
    FILE_MIME_TYPE             VARCHAR2(256),
    FILE_NAME                  VARCHAR2(256),
    VERIFIED_BY_SID            NUMBER(10, 0),
    VERIFIED_DTM               DATE,
    CONSUMPTION_MEASURE_SID    NUMBER(10, 0),
    CONSTRAINT PK578 PRIMARY KEY (UTILITY_INVOICE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.UTILITY_SUPPLIER(
    UTILITY_SUPPLIER_ID    NUMBER(10, 0)     NOT NULL,
    SUPPLIER_NAME          VARCHAR2(1024)    NOT NULL,
    CONTACT_DETAILS        VARCHAR2(4000),
    CONSTRAINT PK576 PRIMARY KEY (UTILITY_SUPPLIER_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.METER_XML_OPTION(
    RAW_DATA_SOURCE_ID    NUMBER(10, 0)    NOT NULL,
    DATA_TYPE             VARCHAR2(256)    NOT NULL,
    XSLT                  SYS.XMLType      NOT NULL,
    CONSTRAINT PK1269 PRIMARY KEY (RAW_DATA_SOURCE_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.REGION_METER_ALARM(
    REGION_SID            NUMBER(10, 0)    NOT NULL,
    INHERITED_FROM_SID    NUMBER(10, 0)    NOT NULL,
    METER_ALARM_ID        NUMBER(10, 0)    NOT NULL,
    IGNORE                NUMBER(1, 0)     NOT NULL,
    IGNORE_CHILDREN       NUMBER(1, 0)     NOT NULL,
    CHECK (IGNORE IN(0,1)),
    CHECK (IGNORE_CHILDREN IN(0,1)),
    CONSTRAINT PK959 PRIMARY KEY (REGION_SID, METER_ALARM_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.REGION_PROC_DOC(
    REGION_SID    NUMBER(10, 0)    NOT NULL,
    DOC_ID        NUMBER(10, 0)    NOT NULL,
    INHERITED     NUMBER(1, 0)     NOT NULL,
    CHECK (INHERITED IN (0,1)),
    CONSTRAINT PK586 PRIMARY KEY (REGION_SID, DOC_ID)
) ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CSRIMP.REGION_PROC_FILE(
    REGION_SID           NUMBER(10, 0)    NOT NULL,
    METER_DOCUMENT_ID    NUMBER(10, 0)    NOT NULL,
    INHERITED            NUMBER(1, 0)     NOT NULL,
    CHECK (INHERITED IN (0,1)),
    CONSTRAINT PK587 PRIMARY KEY (REGION_SID, METER_DOCUMENT_ID)
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE CSRIMP.REGION_EVENT(
    REGION_SID    NUMBER(10, 0)    NOT NULL,
    EVENT_ID      NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK3 PRIMARY KEY (REGION_SID, EVENT_ID)
) ON COMMIT DELETE ROWS;

create global temporary table csrimp.map_cms_schema(
	old_oracle_schema		varchar2(30) not null,
	new_oracle_schema		varchar2(30) not null,
	constraint pk_map_cms_schema primary key (old_oracle_schema) using index,
	constraint uk_map_cms_schema unique (new_oracle_schema) using index
) on commit preserve rows;

create global temporary table csrimp.map_cms_tab_column(
	old_column_id			number(10) not null,
	new_column_id			number(10) not null,
	constraint pk_cms_map_tab_column primary key (old_column_id) using index,
	constraint uk_cms_map_tab_column unique (new_column_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_cms_uk_cons(
	old_uk_cons_id			number(10) not null,
	new_uk_cons_id			number(10) not null,
	constraint pk_map_cms_uk_cons primary key (old_uk_cons_id) using index,
	constraint uk_map_cms_uk_cons unique (new_uk_cons_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_cms_fk_cons(
	old_fk_cons_id			number(10) not null,
	new_fk_cons_id			number(10) not null,
	constraint pk_map_cms_fk_cons primary key (old_fk_cons_id) using index,
	constraint fk_map_cms_fk_cons unique (new_fk_cons_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_cms_ck_cons(
	old_ck_cons_id			number(10) not null,
	new_ck_cons_id			number(10) not null,
	constraint pk_map_cms_ck_cons primary key (old_ck_cons_id) using index,
	constraint uk_map_cms_ck_cons unique (new_ck_cons_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_cms_display_template(
	old_display_template_id			number(10) not null,
	new_display_template_id			number(10) not null,
	constraint pk_map_cms_display_template primary key (old_display_template_id) using index,
	constraint uk_map_cms_display_template unique (new_display_template_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_cms_image(
	old_image_id			number(10) not null,
	new_image_id			number(10) not null,
	constraint pk_map_cms_image primary key (old_image_id) using index,
	constraint uk_map_cms_image unique (new_image_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_cms_tag(
	old_tag_id			number(10) not null,
	new_tag_id			number(10) not null,
	constraint pk_map_cms_tag primary key (old_tag_id) using index,
	constraint uk_map_cms_tag unique (new_tag_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_flow_state(
	old_flow_state_id		number(10) not null,
	new_flow_state_id		number(10) not null,
	constraint pk_map_flow_state primary key (old_flow_state_id) using index,
	constraint uk_map_flow_state unique (new_flow_state_id) using index
) on commit preserve rows;
	
create global temporary table csrimp.map_flow_item(
	old_flow_item_id		number(10) not null,
	new_flow_item_id		number(10) not null,
	constraint pk_map_flow_item primary key (old_flow_item_id) using index,
	constraint uk_map_flow_item unique (new_flow_item_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_flow_state_log(
	old_flow_state_log_id		number(10) not null,
	new_flow_state_log_id		number(10) not null,
	constraint pk_map_flow_state_log primary key (old_flow_state_log_id) using index,
	constraint uk_map_flow_state_log unique (new_flow_state_log_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_flow_state_transition(
	old_flow_state_transition_id		number(10) not null,
	new_flow_state_transition_id		number(10) not null,
	constraint pk_map_flow_state_transition primary key (old_flow_state_transition_id) using index,
	constraint uk_map_flow_state_transition unique (new_flow_state_transition_id) using index
) on commit preserve rows;


create global temporary table csrimp.map_meter_raw_data_source (
	old_raw_data_source_id			number(10) not null,
	new_raw_data_source_id			number(10) not null,
	constraint pk_map_meter_raw_data_source primary key (old_raw_data_source_id) using index,
	constraint uk_map_meter_raw_data_source unique (new_raw_data_source_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_live_data_duration (
	old_live_data_duration_id			number(10) not null,
	new_live_data_duration_id			number(10) not null,
	constraint pk_map_live_data_duration primary key (old_live_data_duration_id) using index,
	constraint uk_map_live_data_duration unique (new_live_data_duration_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_utility_supplier (
	old_utility_supplier_id			number(10) not null,
	new_utility_supplier_id			number(10) not null,
	constraint pk_map_utility_supplier primary key (old_utility_supplier_id) using index,
	constraint uk_map_utility_supplier unique (new_utility_supplier_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_utility_contract (
	old_utility_contract_id			number(10) not null,
	new_utility_contract_id			number(10) not null,
	constraint pk_map_utility_contract primary key (old_utility_contract_id) using index,
	constraint uk_map_utility_contract unique (new_utility_contract_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_utility_invoice (
	old_utility_invoice_id			number(10) not null,
	new_utility_invoice_id			number(10) not null,
	constraint pk_map_utility_invoice primary key (old_utility_invoice_id) using index,
	constraint uk_map_utility_invoice unique (new_utility_invoice_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_alarm (
	old_meter_alarm_id			number(10) not null,
	new_meter_alarm_id			number(10) not null,
	constraint pk_map_meter_alarm primary key (old_meter_alarm_id) using index,
	constraint uk_map_meter_alarm unique (new_meter_alarm_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_alarm_statistic (
	old_statistic_id			number(10) not null,
	new_statistic_id			number(10) not null,
	constraint pk_map_meter_alarm_statistic primary key (old_statistic_id) using index,
	constraint uk_map_meter_alarm_statistic unique (new_statistic_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_alarm_comparison (
	old_comparison_id			number(10) not null,
	new_comparison_id			number(10) not null,
	constraint pk_map_meter_alarm_comparison primary key (old_comparison_id) using index,
	constraint uk_map_meter_alarm_comparison unique (new_comparison_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_alarm_test_time (
	old_test_time_id			number(10) not null,
	new_test_time_id			number(10) not null,
	constraint pk_map_test_time primary key (old_test_time_id) using index,
	constraint uk_map_test_time unique (new_test_time_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_alarm_issue_period (
	old_issue_period_id			number(10) not null,
	new_issue_period_id			number(10) not null,
	constraint pk_map_meter_alrm_iss_period primary key (old_issue_period_id) using index,
	constraint uk_map_meter_alrm_iss_period unique (new_issue_period_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_raw_data (
	old_meter_raw_data_id			number(10) not null,
	new_meter_raw_data_id			number(10) not null,
	constraint pk_map_map_meter_raw_data primary key (old_meter_raw_data_id) using index,
	constraint uk_map_map_meter_raw_data unique (new_meter_raw_data_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_reading (
	old_meter_reading_id			number(10) not null,
	new_meter_reading_id			number(10) not null,
	constraint pk_map_map_meter_reading primary key (old_meter_reading_id) using index,
	constraint uk_map_map_meter_reading unique (new_meter_reading_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_event (
	old_event_id			number(10) not null,
	new_event_id			number(10) not null,
	constraint pk_map_event primary key (old_event_id) using index,
	constraint uk_map_event unique (new_event_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_meter_document (
	old_meter_document_id			number(10) not null,
	new_meter_document_id			number(10) not null,
	constraint pk_map_meter_document primary key (old_meter_document_id) using index,
	constraint uk_map_meter_document unique (new_meter_document_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_pending_val(
	old_issue_pending_val_id			number(10) not null,
	new_issue_pending_val_id			number(10) not null,
	constraint pk_map_issue_pending_val primary key (old_issue_pending_val_id) using index,
	constraint uk_map_issue_pending_val unique (new_issue_pending_val_id) using index
) on commit preserve rows;
	
create global temporary table csrimp.map_issue_sheet_value(
	old_issue_sheet_value_id			number(10) not null,
	new_issue_sheet_value_id			number(10) not null,
	constraint pk_map_issue_sheet_value primary key (old_issue_sheet_value_id) using index,
	constraint uk_map_issue_sheet_value unique (new_issue_sheet_value_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_meter(
	old_issue_meter_id			number(10) not null,
	new_issue_meter_id			number(10) not null,
	constraint pk_map_issue_meter primary key (old_issue_meter_id) using index,
	constraint uk_map_issue_meter unique (new_issue_meter_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_meter_alarm (
	old_issue_meter_alarm_id			number(10) not null,
	new_issue_meter_alarm_id			number(10) not null,
	constraint pk_map_issue_meter_alarm primary key (old_issue_meter_alarm_id) using index,
	constraint uk_map_issue_meter_alarm unique (new_issue_meter_alarm_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_meter_data_source (
	old_issue_meter_data_source_id			number(10) not null,
	new_issue_meter_data_source_id			number(10) not null,
	constraint pk_map_issue_meter_data_source primary key (old_issue_meter_data_source_id) using index,
	constraint uk_map_issue_meter_data_source unique (new_issue_meter_data_source_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_meter_raw_data (
	old_issue_meter_raw_data_id			number(10) not null,
	new_issue_meter_raw_data_id			number(10) not null,
	constraint pk_map_issue_meter_raw_data primary key (old_issue_meter_raw_data_id) using index,
	constraint uk_map_issue_meter_raw_data unique (new_issue_meter_raw_data_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_priority (
	old_issue_priority_id			number(10) not null,
	new_issue_priority_id			number(10) not null,
	constraint pk_map_issue_priority primary key (old_issue_priority_id) using index,
	constraint uk_map_issue_priority unique (new_issue_priority_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue (
	old_issue_id			number(10) not null,
	new_issue_id			number(10) not null,
	constraint pk_map_issue primary key (old_issue_id) using index,
	constraint uk_map_issue unique (new_issue_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_log (
	old_issue_log_id			number(10) not null,
	new_issue_log_id			number(10) not null,
	constraint pk_map_issue_log primary key (old_issue_log_id) using index,
	constraint uk_map_issue_log unique (new_issue_log_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_issue_custom_field (
	old_issue_custom_field_id			number(10) not null,
	new_issue_custom_field_id			number(10) not null,
	constraint pk_map_issue_custom_field primary key (old_issue_custom_field_id) using index,
	constraint uk_map_issue_custom_field unique (new_issue_custom_field_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_correspondent (
	old_correspondent_id			number(10) not null,
	new_correspondent_id			number(10) not null,
	constraint pk_map_correspondent primary key (old_correspondent_id) using index,
	constraint uk_map_correspondent unique (new_correspondent_id) using index
) on commit preserve rows;

grant select,insert,update,delete on csrimp.correspondent to web_user;
grant select,insert,update,delete on csrimp.flow to web_user;
grant select,insert,update,delete on csrimp.flow_alert_type to web_user;
grant select,insert,update,delete on csrimp.flow_item to web_user;
grant select,insert,update,delete on csrimp.flow_item_alert to web_user;
grant select,insert,update,delete on csrimp.flow_state to web_user;
grant select,insert,update,delete on csrimp.flow_state_log to web_user;
grant select,insert,update,delete on csrimp.flow_state_log_file to web_user;
grant select,insert,update,delete on csrimp.flow_state_role to web_user;
grant select,insert,update,delete on csrimp.flow_state_trans_helper to web_user;
grant select,insert,update,delete on csrimp.flow_state_transition to web_user;
grant select,insert,update,delete on csrimp.flow_state_transition_role to web_user;
grant select,insert,update,delete on csrimp.flow_transition_alert to web_user;
grant select,insert,update,delete on csrimp.flow_transition_alert_role to web_user;
grant select,insert,update,delete on csrimp.cms_app_schema  to web_user;
grant select,insert,update,delete on csrimp.cms_app_schema_table  to web_user;
--grant select,insert,update,delete on csrimp.cms_context  to web_user;
--grant select,insert,update,delete on csrimp.cms_fast_context  to web_user;
grant select,insert,update,delete on csrimp.cms_image  to web_user;
--grant select,insert,update,delete on csrimp.cms_securable_object_whitelist  to web_user;
grant select,insert,update,delete on csrimp.cms_ck_cons  to web_user;
grant select,insert,update,delete on csrimp.cms_ck_cons_col  to web_user;
grant select,insert,update,delete on csrimp.cms_display_template  to web_user;
grant select,insert,update,delete on csrimp.cms_filter to web_user;
grant select,insert,update,delete on csrimp.cms_fk_cons to web_user;
grant select,insert,update,delete on csrimp.cms_fk_cons_col to web_user;
grant select,insert,update,delete on csrimp.cms_form to web_user;
grant select,insert,update,delete on csrimp.cms_image_tag  to web_user;
grant select,insert,update,delete on csrimp.cms_link_track  to web_user;
grant select,insert,update,delete on csrimp.cms_tab  to web_user;
grant select,insert,update,delete on csrimp.cms_tab_column  to web_user;
grant select,insert,update,delete on csrimp.cms_tab_column_measure  to web_user;
grant select,insert,update,delete on csrimp.cms_tag  to web_user;
grant select,insert,update,delete on csrimp.cms_uk_cons  to web_user;
grant select,insert,update,delete on csrimp.cms_uk_cons_col  to web_user;
grant select,insert,update,delete on csrimp.cms_web_publication  to web_user;
grant select,insert,update,delete on csrimp.cms_tab_column_role_permission  to web_user;
grant select,insert,update,delete on csrimp.cms_flow_tab_column_cons  to web_user;
grant select,insert,update,delete on csrimp.all_meter to web_user;
grant select,insert,update,delete on csrimp.event to web_user;
grant select,insert,update,delete on csrimp.live_data_duration to web_user;
grant select,insert,update,delete on csrimp.issue to web_user;
grant select,insert,update,delete on csrimp.issue_action to web_user;
grant select,insert,update,delete on csrimp.issue_action_log to web_user;
grant select,insert,update,delete on csrimp.issue_custom_field to web_user;
grant select,insert,update,delete on csrimp.issue_custom_field_opt_sel to web_user;
grant select,insert,update,delete on csrimp.issue_custom_field_option to web_user;
grant select,insert,update,delete on csrimp.issue_custom_field_str_val to web_user;
grant select,insert,update,delete on csrimp.issue_log to web_user;
grant select,insert,update,delete on csrimp.issue_log_file to web_user;
grant select,insert,update,delete on csrimp.issue_log_read to web_user;
grant select,insert,update,delete on csrimp.issue_meter to web_user;
grant select,insert,update,delete on csrimp.issue_meter_alarm to web_user;
grant select,insert,update,delete on csrimp.issue_meter_data_source to web_user;
grant select,insert,update,delete on csrimp.issue_meter_raw_data to web_user;
grant select,insert,update,delete on csrimp.issue_non_compliance to web_user;
grant select,insert,update,delete on csrimp.issue_pending_val to web_user;
grant select,insert,update,delete on csrimp.issue_priority to web_user;
grant select,insert,update,delete on csrimp.issue_scheduled_task to web_user;
grant select,insert,update,delete on csrimp.issue_sheet_value to web_user;
grant select,insert,update,delete on csrimp.issue_supplier to web_user;
grant select,insert,update,delete on csrimp.issue_survey_answer to web_user;
grant select,insert,update,delete on csrimp.issue_type to web_user;
grant select,insert,update,delete on csrimp.issue_user to web_user;
grant select,insert,update,delete on csrimp.meter_alarm to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_comparison to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_event to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_issue_period to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_stat_run to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_statistic to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_statistic_job to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_statistic_period to web_user;
grant select,insert,update,delete on csrimp.meter_alarm_test_time to web_user;
grant select,insert,update,delete on csrimp.meter_document to web_user;
grant select,insert,update,delete on csrimp.meter_excel_mapping to web_user;
grant select,insert,update,delete on csrimp.meter_excel_option to web_user;
grant select,insert,update,delete on csrimp.meter_list_cache to web_user;
grant select,insert,update,delete on csrimp.meter_live_data to web_user;
grant select,insert,update,delete on csrimp.meter_meter_alarm_statistic to web_user;
grant select,insert,update,delete on csrimp.meter_orphan_data to web_user;
grant select,insert,update,delete on csrimp.meter_raw_data to web_user;
grant select,insert,update,delete on csrimp.meter_raw_data_error to web_user;
grant select,insert,update,delete on csrimp.meter_raw_data_source to web_user;
grant select,insert,update,delete on csrimp.meter_raw_data_status to web_user;
grant select,insert,update,delete on csrimp.meter_reading to web_user;
grant select,insert,update,delete on csrimp.meter_reading_period to web_user;
grant select,insert,update,delete on csrimp.meter_source_data to web_user;
grant select,insert,update,delete on csrimp.meter_source_type to web_user;
grant select,insert,update,delete on csrimp.meter_utility_contract to web_user;
grant select,insert,update,delete on csrimp.utility_contract to web_user;
grant select,insert,update,delete on csrimp.utility_invoice to web_user;
grant select,insert,update,delete on csrimp.utility_supplier to web_user;
grant select,insert,update,delete on csrimp.meter_xml_option to web_user;
grant select,insert,update,delete on csrimp.region_meter_alarm to web_user;
grant select,insert,update,delete on csrimp.region_proc_doc to web_user;
grant select,insert,update,delete on csrimp.region_proc_file to web_user;
grant select,insert,update,delete on csrimp.region_event to web_user;

grant select on csr.correspondent_id_seq to csrimp;
grant select on csr.event_id_seq to csrimp;
grant select on csr.flow_state_transition_id_seq to csrimp;
grant select on csr.flow_state_log_id_seq to csrimp;
grant select on csr.flow_state_log_file_id_seq to csrimp;
grant select on csr.flow_state_id_seq to csrimp;
grant select on csr.flow_item_id_seq to csrimp;
grant select on csr.flow_item_alert_id_seq to csrimp;
grant select on csr.issue_id_seq to csrimp;
grant select on csr.issue_action_id_seq to csrimp;
grant select on csr.issue_action_log_id_seq to csrimp;
grant select on csr.issue_custom_field_id_seq to csrimp;
grant select on csr.issue_id_seq to csrimp;
grant select on csr.issue_log_file_id_seq to csrimp;
grant select on csr.issue_log_id_seq to csrimp;
grant select on csr.issue_meter_alarm_id_seq to csrimp;
grant select on csr.issue_meter_data_source_id_seq to csrimp;
grant select on csr.issue_meter_id_seq to csrimp;
grant select on csr.issue_meter_raw_data_id_seq to csrimp;
grant select on csr.issue_non_compliance_id_seq to csrimp;
grant select on csr.issue_pending_val_id_seq to csrimp;
grant select on csr.issue_priority_id_seq to csrimp;
grant select on csr.issue_scheduled_task_id_seq to csrimp;
grant select on csr.issue_sheet_value_id_seq to csrimp;
grant select on csr.issue_supplier_id_seq to csrimp;
grant select on csr.issue_survey_answer_id_seq to csrimp;
grant select on csr.issue_url_id_seq to csrimp;
grant select on csr.meter_alarm_id_seq to csrimp;
grant select on csr.meter_alarm_event_id_seq to csrimp;
grant select on csr.meter_comparison_id_seq to csrimp;
grant select on csr.meter_document_id_seq to csrimp;
grant select on csr.meter_issue_period_id_seq to csrimp;
grant select on csr.meter_test_time_id_seq to csrimp;
grant select on csr.meter_raw_data_id_seq to csrimp;
grant select on csr.meter_raw_data_error_id_seq to csrimp;
grant select on csr.meter_statistic_id_seq to csrimp;
grant select on csr.meter_raw_data_id_seq to csrimp;
grant select on csr.meter_raw_data_error_id_seq to csrimp;
grant select on csr.meter_reading_id_seq to csrimp;
grant select on csr.live_data_duration_id_seq to csrimp;
grant select on csr.raw_data_source_id_seq to csrimp;

grant insert, update on csr.flow to csrimp;
grant insert on csr.correspondent to csrimp;
grant insert on csr.flow_alert_type to csrimp;
grant insert on csr.flow_item to csrimp;
grant insert on csr.flow_item_alert to csrimp;
grant insert on csr.flow_state to csrimp;
grant insert on csr.flow_state_log to csrimp;
grant insert on csr.flow_state_log_file to csrimp;
grant insert on csr.flow_state_role to csrimp;
grant insert on csr.flow_state_trans_helper to csrimp;
grant insert on csr.flow_state_transition to csrimp;
grant insert on csr.flow_state_transition_role to csrimp;
grant insert on csr.flow_transition_alert to csrimp;
grant insert on csr.flow_transition_alert_role to csrimp;
grant insert on csr.all_meter to csrimp;
grant insert on csr.event to csrimp;
grant insert on csr.issue to csrimp;
grant insert on csr.issue_action to csrimp;
grant insert on csr.issue_action_log to csrimp;
grant insert on csr.issue_custom_field to csrimp;
grant insert on csr.issue_custom_field_opt_sel to csrimp;
grant insert on csr.issue_custom_field_option to csrimp;
grant insert on csr.issue_custom_field_str_val to csrimp;
grant insert on csr.issue_log to csrimp;
grant insert on csr.issue_log_file to csrimp;
grant insert on csr.issue_log_read to csrimp;
grant insert on csr.issue_meter to csrimp;
grant insert on csr.issue_meter_alarm to csrimp;
grant insert on csr.issue_meter_data_source to csrimp;
grant insert on csr.issue_meter_raw_data to csrimp;
grant insert on csr.issue_non_compliance to csrimp;
grant insert on csr.issue_pending_val to csrimp;
grant insert on csr.issue_priority to csrimp;
grant insert on csr.issue_scheduled_task to csrimp;
grant insert on csr.issue_sheet_value to csrimp;
grant insert on csr.issue_supplier to csrimp;
grant insert on csr.issue_survey_answer to csrimp;
grant insert on csr.issue_type to csrimp;
grant insert on csr.issue_user to csrimp;
grant insert on csr.live_data_duration to csrimp;
grant insert on csr.meter_alarm to csrimp;
grant insert on csr.meter_alarm_comparison to csrimp;
grant insert on csr.meter_alarm_event to csrimp;
grant insert on csr.meter_alarm_issue_period to csrimp;
grant insert on csr.meter_alarm_stat_run to csrimp;
grant insert on csr.meter_alarm_statistic to csrimp;
grant insert on csr.meter_alarm_statistic_job to csrimp;
grant insert on csr.meter_alarm_statistic_period to csrimp;
grant insert on csr.meter_alarm_test_time to csrimp;
grant insert on csr.meter_document to csrimp;
grant insert on csr.meter_excel_mapping to csrimp;
grant insert on csr.meter_excel_option to csrimp;
grant insert on csr.meter_list_cache to csrimp;
grant insert on csr.meter_live_data to csrimp;
grant insert on csr.meter_meter_alarm_statistic to csrimp;
grant insert on csr.meter_orphan_data to csrimp;
grant insert on csr.meter_raw_data to csrimp;
grant insert on csr.meter_raw_data_error to csrimp;
grant insert on csr.meter_raw_data_source to csrimp;
grant insert on csr.meter_raw_data_status to csrimp;
grant insert on csr.meter_reading to csrimp;
grant insert on csr.meter_reading_period to csrimp;
grant insert on csr.meter_source_data to csrimp;
grant insert on csr.meter_source_type to csrimp;
grant insert on csr.meter_utility_contract to csrimp;
grant insert on csr.utility_contract to csrimp;
grant insert on csr.utility_invoice to csrimp;
grant insert on csr.utility_supplier to csrimp;
grant insert on csr.meter_xml_option to csrimp;
grant insert on csr.region_meter_alarm to csrimp;
grant insert on csr.region_proc_doc to csrimp;
grant insert on csr.region_proc_file to csrimp;
grant insert on csr.region_event to csrimp;

grant insert on cms.app_schema  to csrimp;
grant insert on cms.app_schema_table  to csrimp;
grant insert on cms.context  to csrimp;
grant insert on cms.fast_context  to csrimp;
grant insert on cms.image  to csrimp;
grant insert on cms.securable_object_whitelist  to csrimp;
grant insert on cms.ck_cons  to csrimp;
grant insert on cms.ck_cons_col  to csrimp;
grant insert on cms.display_template  to csrimp;
grant insert on cms.filter  to csrimp;
grant insert on cms.fk_cons  to csrimp;
grant insert on cms.fk_cons_col  to csrimp;
grant insert on cms.form  to csrimp;
grant insert on cms.image_tag  to csrimp;
grant insert on cms.link_track  to csrimp;
grant select, insert, update on cms.tab  to csrimp;
grant insert on cms.tab_column  to csrimp;
grant insert on cms.tab_column_measure  to csrimp;
grant insert on cms.tag  to csrimp;
grant insert on cms.uk_cons  to csrimp;
grant insert on cms.uk_cons_col  to csrimp;
grant insert on cms.web_publication  to csrimp;
grant insert on cms.tab_column_role_permission  to csrimp;
grant insert on cms.flow_tab_column_cons  to csrimp;

grant select on cms.column_id_seq to csrimp;
grant select on cms.web_publication_id_seq to csrimp;
grant select on cms.display_template_id_seq to csrimp;
grant select on cms.item_id_seq to csrimp;
grant select on cms.temp_upload_id_seq to csrimp;
grant select on cms.uk_cons_id_seq to csrimp;
grant select on cms.fk_cons_id_seq to csrimp;
grant select on cms.ck_cons_id_seq to csrimp;
grant select on cms.tag_id_seq to csrimp;

CREATE GLOBAL TEMPORARY TABLE cms.imp_constraints
(
	owner							VARCHAR2(30) NOT NULL,
	table_name						VARCHAR2(30) NOT NULL,
	constraint_name					VARCHAR2(30) NOT NULL,
	constraint_type					VARCHAR2(1) NOT NULL,
	search_condition				CLOB,
	r_owner							VARCHAR2(30),
	r_constraint_name				VARCHAR2(30),
	deferrable						VARCHAR2(14) NOT NULL,
	deferred						VARCHAR2(9) NOT NULL,
	generated						VARCHAR2(14) NOT NULL,
	delete_rule						VARCHAR2(9),
	index_name						VARCHAR2(30)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_cons_columns
(
	owner							VARCHAR2(30) NOT NULL,
	table_name						VARCHAR2(30) NOT NULL,
	constraint_name					VARCHAR2(30) NOT NULL,
	column_name						VARCHAR2(30) NOT NULL,
	position						NUMBER
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_tables
(
	owner							VARCHAR2(30) NOT NULL,
	table_name						VARCHAR2(30) NOT NULL,
	table_id						NUMBER NOT NULL
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_tab_columns
(
	owner							VARCHAR2(30) NOT NULL,
	table_name						VARCHAR2(30) NOT NULL,
	column_name						VARCHAR2(30) NOT NULL,
	data_type						VARCHAR2(106) NOT NULL,
	data_length						NUMBER,
	data_precision					NUMBER,
	data_scale						NUMBER,
	nullable						VARCHAR2(1) NOT NULL,
	column_id						NUMBER NOT NULL,
	data_default					CLOB
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_indexes
(
	owner							VARCHAR2(30) NOT NULL,
	index_name						VARCHAR2(30) NOT NULL,
	table_owner						VARCHAR2(30) NOT NULL,
	table_name						VARCHAR2(30) NOT NULL,
	generated						VARCHAR2(1) NOT NULL
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_ind_columns
(
	index_owner						VARCHAR2(30) NOT NULL,
	index_name						VARCHAR2(30) NOT NULL,
	table_owner						VARCHAR2(30) NOT NULL,
	table_name						VARCHAR2(30) NOT NULL,
	column_name						VARCHAR2(30) NOT NULL,
	column_position					VARCHAR2(30) NOT NULL,
	descend							VARCHAR2(4)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_tab_privs
(
	grantee							VARCHAR2(30) NOT NULL,
	owner							VARCHAR2(30) NOT NULL,
	table_name						VARCHAR2(30) NOT NULL,
	privilege						VARCHAR2(30) NOT NULL
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_tab_comments
(
	owner							varchar2(30),
	table_name						varchar2(30),
	comments						varchar2(4000)
) ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE cms.imp_col_comments
(
	owner							varchar2(30),
	table_name						varchar2(30),
	column_name						varchar2(30),
	comments						varchar2(4000)
) ON COMMIT PRESERVE ROWS;

grant select,insert,update,delete on cms.imp_col_comments to web_user;
grant select,insert,update,delete on cms.imp_constraints to web_user;
grant select,insert,update,delete on cms.imp_cons_columns to web_user;
grant select,insert,update,delete on cms.imp_tables to web_user;
grant select,insert,update,delete on cms.imp_tab_columns to web_user;
grant select,insert,update,delete on cms.imp_indexes to web_user;
grant select,insert,update,delete on cms.imp_ind_columns to web_user;
grant select,insert,update,delete on cms.imp_tab_comments to web_user;
grant select,insert,update,delete on cms.imp_tab_privs to web_user;

grant select,insert,update,delete on csrimp.cms_tab to cms;
grant select,insert,update,delete on csrimp.cms_tab_column to cms;

begin
	for r in (select type_name from all_types where owner='CMS' and type_name in (
				'T_KEY_MAP_TABLE')) loop
		execute immediate 'DROP TYPE CMS.'||r.type_name;
	end loop;
end;
/

create or replace type cms.T_KEY_MAP as OBJECT (
	table_owner				VARCHAR2(30),
	table_name				VARCHAR2(30),
	id_column_name			VARCHAR2(30),
	map_table_name			VARCHAR2(30),
	map_old_column_name		VARCHAR2(30),
	map_new_column_name		VARCHAR2(30)
);
/

create or replace type cms.T_KEY_MAP_TABLE as table of cms.T_KEY_MAP;
/

create sequence cms.debug_ddl_log_id_seq;

create table cms.debug_ddl_log (
	id number(10) not null,
	dtm date default sysdate not null,
	ddl clob,
	constraint pk_debug_ddl_log primary key (id)
);

alter table csrimp.region_tree drop column name;

drop package csr.io_pkg;

drop table csrimp.map_sid;
drop table csrimp.map_acl;
drop table csrimp.map_password_regexp;
drop table csrimp.map_ip_rule;
drop table csrimp.map_form_allocation;
drop table csrimp.map_measure_conversion;
drop table csrimp.map_accuracy_type;
drop table csrimp.map_accuracy_type_option;
drop table csrimp.map_tag_group;
drop table csrimp.map_tag;
drop table csrimp.map_alert_frame;
drop table csrimp.map_customer_alert_type;
drop table csrimp.map_pending_ind;
drop table csrimp.map_pending_region;
drop table csrimp.map_pending_period;
drop table csrimp.map_pending_val;
drop table csrimp.map_approval_step_sheet;
drop table csrimp.map_attachment;
drop table csrimp.map_section_comment;
drop table csrimp.map_sheet;
drop table csrimp.map_sheet_value;
drop table csrimp.map_sheet_history;
drop table csrimp.map_sheet_value_change;
drop table csrimp.map_imp_conflict;
drop table csrimp.map_imp_ind;
drop table csrimp.map_imp_region;
drop table csrimp.map_imp_measure;
drop table csrimp.map_imp_val;
drop table csrimp.map_val;
drop table csrimp.map_ind_validation_rule;
drop table csrimp.map_delegation_ind_cond;
drop table csrimp.map_deleg_plan_col;
drop table csrimp.map_deleg_plan_col_deleg;
drop table csrimp.map_form_expr;
drop table csrimp.map_factor;
drop table csrimp.map_deleg_ind_group;
drop table csrimp.map_var_expl_group;
drop table csrimp.map_var_expl;

create global temporary table csrimp.map_sid(
	old_sid							number(10)	not null,
	new_sid							number(10)	not null,
	constraint pk_map_sid primary key (old_sid) using index,
	constraint uk_map_sid unique (new_sid) using index
) on commit preserve rows;

create global temporary table csrimp.map_acl(
	old_acl_id						number(10)	not null,
	new_acl_id						number(10)	not null,
	constraint pk_map_acl primary key (old_acl_id) using index,
	constraint uk_map_acl unique (new_acl_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_password_regexp(
	old_password_regexp_id			number(10)	not null,
	new_password_regexp_id			number(10)	not null,
	constraint pk_map_password_regexp primary key (old_password_regexp_id) using index,
	constraint uk_map_password_regexp unique (new_password_regexp_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_ip_rule(
	old_ip_rule_id			number(10)	not null,
	new_ip_rule_id			number(10)	not null,
	constraint pk_map_ip_rule primary key (old_ip_rule_id) using index,
	constraint uk_map_ip_rule unique (new_ip_rule_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_form_allocation(
	old_form_allocation_id			number(10)	not null,
	new_form_allocation_id			number(10)	not null,
	constraint pk_map_form_allocation primary key (old_form_allocation_id) using index,
	constraint uk_map_form_allocation unique (new_form_allocation_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_measure_conversion(
	old_measure_conversion_id		number(10)	not null,
	new_measure_conversion_id		number(10)	not null,
	constraint pk_map_measure_conversion primary key (old_measure_conversion_id) using index,
	constraint uk_map_measure_conversion unique (new_measure_conversion_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_accuracy_type(
	old_accuracy_type_id			number(10)	not null,
	new_accuracy_type_id			number(10)	not null,
	constraint pk_map_accuracy_type primary key (old_accuracy_type_id) using index,
	constraint uk_map_accuracy_type unique (new_accuracy_type_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_accuracy_type_option(
	old_accuracy_type_option_id		number(10)	not null,
	new_accuracy_type_option_id		number(10)	not null,
	constraint pk_map_accuracy_type_option primary key (old_accuracy_type_option_id) using index,
	constraint uk_map_accuracy_type_option unique (new_accuracy_type_option_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_tag_group(
	old_tag_group_id				number(10)	not null,
	new_tag_group_id				number(10)	not null,
	constraint pk_map_tag_group primary key (old_tag_group_id) using index,
	constraint uk_map_tag_group unique (new_tag_group_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_tag(
	old_tag_id						number(10)	not null,
	new_tag_id						number(10)	not null,
	constraint pk_map_tag primary key (old_tag_id) using index,
	constraint uk_map_tag unique (new_tag_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_alert_frame(
	old_alert_frame_id				number(10)	not null,
	new_alert_frame_id				number(10)	not null,
	constraint pk_map_alert_frame primary key (old_alert_frame_id) using index,
	constraint uk_map_alert_frame unique (new_alert_frame_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_customer_alert_type(
	old_customer_alert_type_id				number(10)	not null,
	new_customer_alert_type_id				number(10)	not null,
	constraint pk_map_customer_alert_type primary key (old_customer_alert_type_id) using index,
	constraint uk_map_customer_alert_type unique (new_customer_alert_type_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_pending_ind(
	old_pending_ind_id				number(10)	not null,
	new_pending_ind_id				number(10)	not null,
	constraint pk_map_pending_ind primary key (old_pending_ind_id) using index,
	constraint uk_map_pending_ind unique (new_pending_ind_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_pending_region(
	old_pending_region_id			number(10)	not null,
	new_pending_region_id			number(10)	not null,
	constraint pk_map_pending_region primary key (old_pending_region_id) using index,
	constraint uk_map_pending_region unique (new_pending_region_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_pending_period(
	old_pending_period_id			number(10)	not null,
	new_pending_period_id			number(10)	not null,
	constraint pk_map_pending_period primary key (old_pending_period_id) using index,
	constraint uk_map_pending_period unique (new_pending_period_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_pending_val(
	old_pending_val_id				number(10)	not null,
	new_pending_val_id				number(10)	not null,
	constraint pk_map_pending_val primary key (old_pending_val_id) using index,
	constraint uk_map_pending_val unique (new_pending_val_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_approval_step_sheet(
	old_approval_step_id			number(10)	not null,
	old_sheet_key					varchar2(255) not null,
	new_approval_step_id			number(10)	not null,
	new_sheet_key					varchar2(255) not null,
	constraint pk_map_approval_step_sheet primary key (old_approval_step_id, old_sheet_key) using index,
	constraint uk_map_approval_step_sheet unique (new_approval_step_id, new_sheet_key) using index
) on commit preserve rows;

create global temporary table csrimp.map_attachment(
	old_attachment_id				number(10)	not null,
	new_attachment_id				number(10)	not null,
	constraint pk_map_attachment primary key (old_attachment_id) using index,
	constraint uk_map_attachment unique (new_attachment_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_section_comment(
	old_section_comment_id			number(10)	not null,
	new_section_comment_id			number(10)	not null,
	constraint pk_map_section_comment primary key (old_section_comment_id) using index,
	constraint uk_map_section_comment unique (new_section_comment_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_sheet(
	old_sheet_id					number(10)	not null,
	new_sheet_id					number(10)	not null,
	constraint pk_map_sheet primary key (old_sheet_id) using index,
	constraint uk_map_sheet unique (new_sheet_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_sheet_value(
	old_sheet_value_id				number(10)	not null,
	new_sheet_value_id				number(10)	not null,
	constraint pk_map_sheet_value primary key (old_sheet_value_id) using index,
	constraint uk_map_sheet_value unique (new_sheet_value_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_sheet_history(
	old_sheet_history_id			number(10)	not null,
	new_sheet_history_id			number(10)	not null,
	constraint pk_map_sheet_history primary key (old_sheet_history_id) using index,
	constraint uk_map_sheet_history unique (new_sheet_history_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_sheet_value_change(
	old_sheet_value_change_id		number(10)	not null,
	new_sheet_value_change_id		number(10)	not null,
	constraint pk_map_sheet_value_change primary key (old_sheet_value_change_id) using index,
	constraint uk_map_sheet_value_change unique (new_sheet_value_change_id) using index
) on commit preserve rows;


create global temporary table csrimp.map_imp_conflict(
	old_imp_conflict_id				number(10)	not null,
	new_imp_conflict_id				number(10)	not null,
	constraint pk_map_imp_conflict primary key (old_imp_conflict_id) using index,
	constraint uk_map_imp_conflict unique (new_imp_conflict_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_imp_ind(
	old_imp_ind_id					number(10)	not null,
	new_imp_ind_id					number(10)	not null,
	constraint pk_map_imp_ind primary key (old_imp_ind_id) using index,
	constraint uk_map_imp_ind unique (new_imp_ind_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_imp_region(
	old_imp_region_id				number(10)	not null,
	new_imp_region_id				number(10)	not null,
	constraint pk_map_imp_region primary key (old_imp_region_id) using index,
	constraint uk_map_imp_region unique (new_imp_region_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_imp_measure(
	old_imp_measure_id				number(10)	not null,
	new_imp_measure_id				number(10)	not null,
	constraint pk_map_imp_measure primary key (old_imp_measure_id) using index,
	constraint uk_map_imp_measure unique (new_imp_measure_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_imp_val(
	old_imp_val_id					number(10)	not null,
	new_imp_val_id					number(10)	not null,
	constraint pk_map_imp_val primary key (old_imp_val_id) using index,
	constraint uk_map_imp_val unique (new_imp_val_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_val(
	old_val_id						number(10)	not null,
	new_val_id						number(10)	not null,
	constraint pk_map_val primary key (old_val_id) using index,
	constraint uk_map_val unique (new_val_id) using index
) on commit preserve rows;


-- ind validation rules
create global temporary table csrimp.map_ind_validation_rule(
	old_ind_validation_rule_id					number(10)	not null,
	new_ind_validation_rule_id					number(10)	not null,
	constraint pk_map_ind_validation_rule primary key (old_ind_validation_rule_id) using index,
	constraint uk_map_ind_validation_rule unique (new_ind_validation_rule_id) using index
) on commit preserve rows;


-- delegation conditionmaps
create global temporary table csrimp.map_delegation_ind_cond(
	old_delegation_ind_cond_id					number(10)	not null,
	new_delegation_ind_cond_id					number(10)	not null,
	constraint pk_map_delegation_ind_cond primary key (old_delegation_ind_cond_id) using index,
	constraint uk_map_delegation_ind_cond unique (new_delegation_ind_cond_id) using index
) on commit preserve rows;

-- plan maps
create global temporary table csrimp.map_deleg_plan_col(
	old_deleg_plan_col_id					number(10)	not null,
	new_deleg_plan_col_id					number(10)	not null,
	constraint pk_map_deleg_plan_col primary key (old_deleg_plan_col_id) using index,
	constraint uk_map_deleg_plan_col unique (new_deleg_plan_col_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_deleg_plan_col_deleg(
	old_deleg_plan_col_deleg_id					number(10)	not null,
	new_deleg_plan_col_deleg_id					number(10)	not null,
	constraint pk_map_dlg_plan_col_dlg primary key (old_deleg_plan_col_deleg_id) using index,
	constraint uk_map_dlg_plan_col_dlg unique (new_deleg_plan_col_deleg_id) using index
) on commit preserve rows;

-- form_expr map
create global temporary table csrimp.map_form_expr(
	old_form_expr_id					number(10)	not null,
	new_form_expr_id					number(10)	not null,
	constraint pk_map_form_expr primary key (old_form_expr_id) using index,
	constraint uk_map_form_expr unique (new_form_expr_id) using index
) on commit preserve rows;

-- factor map
create global temporary table csrimp.map_factor(
	old_factor_id					number(10)	not null,
	new_factor_id					number(10)	not null,
	constraint pk_map_factor primary key (old_factor_id) using index,
	constraint uk_map_factor unique (new_factor_id) using index
) on commit preserve rows;


-- deleg_ind_group map
create global temporary table csrimp.map_deleg_ind_group(
	old_deleg_ind_group_id					number(10)	not null,
	new_deleg_ind_group_id					number(10)	not null,
	constraint pk_map_deleg_ind_group primary key (old_deleg_ind_group_id) using index,
	constraint uk_map_deleg_ind_group unique (new_deleg_ind_group_id) using index
) on commit preserve rows;


create global temporary table csrimp.map_var_expl_group(
	old_var_expl_group_id					number(10)	not null,
	new_var_expl_group_id					number(10)	not null,
	constraint pk_map_var_expl_group primary key (old_var_expl_group_id) using index,
	constraint uk_map_var_expl_group unique (new_var_expl_group_id) using index
) on commit preserve rows;

create global temporary table csrimp.map_var_expl(
	old_var_expl_id							number(10)	not null,
	new_var_expl_id							number(10)	not null,
	constraint pk_map_var_expl primary key (old_var_expl_id) using index,
	constraint uk_map_var_expl unique (new_var_expl_id) using index
) on commit preserve rows;

grant execute on cms.tab_pkg to csrimp;

grant update on security.securable_object to csrimp;

@../csrimp/imp_pkg
@../../../aspen2/cms/db/tab_pkg
@../../../aspen2/cms/db/tab_body
@../csrimp/imp_body
@../schema_pkg
@../schema_body

@update_tail
