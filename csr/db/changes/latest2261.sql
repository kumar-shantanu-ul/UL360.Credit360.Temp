-- Please update version.sql too -- this keeps clean builds in sync
define version=2261
@update_header

-- *** Clean-up really old file-based quick_surveys *** 
--     (these have been broken for ages and haven't been used since 2010)
BEGIN
	FOR r IN (
		SELECT constraint_name
		  FROM all_constraints
		 WHERE owner='SUPPLIER'
		   AND table_name='CHAIN_QUESTIONNAIRE'
		   AND r_constraint_name IN (
			SELECT constraint_name
			  FROM all_constraints
			 WHERE owner='CSR'
			   AND table_name='QUICK_SURVEY'
			   AND constraint_type IN ('P','U')
			)
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE supplier.chain_questionnaire drop constraint '||r.constraint_name;
	END LOOP;
END;
/

begin
	security.user_pkg.logonadmin;
	for r in (
		select survey_sid from csr.quick_survey
		 where question_xml is null
	) loop
		security.securableobject_pkg.deleteso(security.security_pkg.getact, r.survey_sid);
	end loop;
end;
/

DROP TABLE csr.survey_allocation;
DROP TABLE csr.survey_response;
DROP TABLE csr.survey;
DROP PACKAGE csr.survey_pkg;

-- *** DDL ***
-- Create tables
CREATE SEQUENCE chain.product_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE TABLE chain.product_type (
	app_sid						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_type_id				NUMBER(10, 0)   NOT NULL,
	parent_product_type_id      NUMBER(10, 0),
	label						VARCHAR2(4000)  NOT NULL,
	CONSTRAINT pk_product_type PRIMARY KEY (app_sid, product_type_id),
	CONSTRAINT uk_product_type UNIQUE (app_sid, parent_product_type_id, label),
	CONSTRAINT fk_product_type_parent FOREIGN KEY (app_sid, parent_product_type_id) REFERENCES chain.product_type (app_sid, product_type_id),
	CONSTRAINT fk_product_type_app FOREIGN KEY (app_sid) REFERENCES chain.customer_options (app_sid)
);

CREATE TABLE chain.company_product_type (
	app_sid						NUMBER(10, 0)   DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	company_sid					NUMBER(10, 0)   NOT NULL,
	product_type_id				NUMBER(10, 0)   NOT NULL,
	CONSTRAINT pk_company_product_type PRIMARY KEY (app_sid, company_sid, product_type_id),
	CONSTRAINT fk_company_product_typ_company FOREIGN KEY (app_sid, company_sid) REFERENCES chain.company (app_sid, company_sid),
	CONSTRAINT fk_company_prd_typ_prd_typ FOREIGN KEY (app_sid, product_type_id) REFERENCES chain.product_type (app_sid, product_type_id)
);

CREATE TABLE chain.product_type_tag (
	app_sid						NUMBER(10, 0)   DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_type_id				NUMBER(10, 0)   NOT NULL,
	tag_id						NUMBER(10, 0)   NOT NULL,
	CONSTRAINT pk_product_type_tag PRIMARY KEY (app_sid, product_type_id, tag_id),
	CONSTRAINT fk_product_typ_tag_product_typ FOREIGN KEY (app_sid, product_type_id) REFERENCES chain.product_type (app_sid, product_type_id),
	CONSTRAINT fk_product_typ_tag_tag FOREIGN KEY (app_sid, tag_id) REFERENCES csr.tag (app_sid, tag_id)
);

CREATE TABLE csrimp.chain_product_type (
	csrimp_session_id			NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	product_type_id				NUMBER(10, 0)   NOT NULL,
	parent_product_type_id      NUMBER(10, 0),
	label						VARCHAR2(4000)  NOT NULL,
	CONSTRAINT pk_product_type PRIMARY KEY (csrimp_session_id, product_type_id),
	CONSTRAINT uk_product_type UNIQUE (csrimp_session_id, parent_product_type_id, label),
	CONSTRAINT fk_chain_product_type_is FOREIGN KEY (csrimp_session_id) REFERENCES csrimp.csrimp_session (csrimp_session_id) ON DELETE CASCADE
);

CREATE TABLE csrimp.chain_company_product_type (
	csrimp_session_id			NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	company_sid					NUMBER(10, 0)   NOT NULL,
	product_type_id				NUMBER(10, 0)   NOT NULL,
	CONSTRAINT pk_company_product_type PRIMARY KEY (csrimp_session_id, company_sid, product_type_id),
	CONSTRAINT fk_chain_company_prod_type_is FOREIGN KEY (csrimp_session_id) REFERENCES csrimp.csrimp_session (csrimp_session_id) ON DELETE CASCADE
);

CREATE TABLE csrimp.chain_product_type_tag (
	csrimp_session_id			NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	product_type_id				NUMBER(10, 0)   NOT NULL,
	tag_id						NUMBER(10, 0)   NOT NULL,
	CONSTRAINT pk_product_type_tag PRIMARY KEY (csrimp_session_id, product_type_id, tag_id),
	CONSTRAINT fk_chain_product_type_tag_is FOREIGN KEY (csrimp_session_id) REFERENCES csrimp.csrimp_session (csrimp_session_id) ON DELETE CASCADE
);

CREATE TABLE csrimp.map_chain_product_type (
	csrimp_session_id 			NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	old_product_type_id			NUMBER(10) NOT NULL,
	new_product_type_id			NUMBER(10) NOT NULL,
	CONSTRAINT pk_map_chain_product_type PRIMARY KEY (old_product_type_id) USING INDEX,
	CONSTRAINT uk_map_chain_product_type UNIQUE (new_product_type_id) USING INDEX,
	CONSTRAINT fk_map_chain_product_type_is FOREIGN KEY (csrimp_session_id) REFERENCES csrimp.csrimp_session (csrimp_session_id) ON DELETE CASCADE
);

CREATE SEQUENCE csr.property_tab_mobile_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE TABLE csr.property_tab_mobile (
	app_sid							NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	property_tab_mobile_id			NUMBER(10, 0)	NOT NULL,
	property_tab_mobile_type		NUMBER(10, 0)	NOT NULL,
	plugin_id						NUMBER(10, 0)	NOT NULL,
	plugin_type_id					NUMBER(10, 0)	NOT NULL,
	label							VARCHAR2(255)	NOT NULL,
	pos								NUMBER(10, 0)	NOT NULL,
	form_path						VARCHAR2(4000),
	form_data						VARCHAR2(4000),
	table_name						VARCHAR2(255),
	property_region_sid_col_name	VARCHAR2(255),
	space_region_sid_col_name		VARCHAR2(255),
	meter_group_key					VARCHAR2(255),
	CONSTRAINT pk_property_tab_mobile PRIMARY KEY (app_sid, property_tab_mobile_id),
	CONSTRAINT fk_property_tab_mobile_tab FOREIGN KEY (app_sid, plugin_id) REFERENCES csr.property_tab (app_sid, plugin_id),
	CONSTRAINT fk_property_tab_mobile_plg FOREIGN KEY (plugin_id, plugin_type_id) REFERENCES csr.plugin (plugin_id, plugin_type_id)
);

CREATE TABLE csr.QUICK_SURVEY_VERSION (
	APP_SID				NUMBER(10) DEFAULT sys_context('security','app') NOT NULL,
	SURVEY_SID			NUMBER(10) NOT NULL,
	SURVEY_VERSION		NUMBER(10) NOT NULL,
	QUESTION_XML		SYS.XMLType NOT NULL,
	LABEL				VARCHAR2(256) NOT NULL,
	START_DTM			DATE,
	END_DTM				DATE,
	PUBLISHED_DTM		DATE,
	CONSTRAINT PK_QUICK_SURVEY_VERSION PRIMARY KEY (APP_SID, SURVEY_SID, SURVEY_VERSION),
	CONSTRAINT FK_QS_VERSION_SURVEY FOREIGN KEY (APP_SID, SURVEY_SID) REFERENCES csr.QUICK_SURVEY(APP_SID, SURVEY_SID)
);

CREATE TABLE CSRIMP.PROPERTY_TAB_MOBILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PROPERTY_TAB_MOBILE_ID NUMBER(10,0) NOT NULL,
	FORM_DATA VARCHAR2(4000),
	FORM_PATH VARCHAR2(4000),
	LABEL VARCHAR2(255) NOT NULL,
	METER_GROUP_KEY VARCHAR2(255),
	PLUGIN_ID NUMBER(10,0) NOT NULL,
	PLUGIN_TYPE_ID NUMBER(10,0) NOT NULL,
	POS NUMBER(10,0) NOT NULL,
	PROPERTY_REGION_SID_COL_NAME VARCHAR2(255),
	PROPERTY_TAB_MOBILE_TYPE NUMBER(10,0) NOT NULL,
	SPACE_REGION_SID_COL_NAME VARCHAR2(255),
	TABLE_NAME VARCHAR2(255),
	CONSTRAINT PK_PROPERTY_TAB_MOBILE PRIMARY KEY (CSRIMP_SESSION_ID, PROPERTY_TAB_MOBILE_ID),
	CONSTRAINT FK_PROPERTY_TAB_MOBILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_PROPERTY_TAB_MOBILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_PROPERTY_TAB_MOBILE_ID NUMBER(10) NOT NULL,
	NEW_PROPERTY_TAB_MOBILE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_PROPERTY_TAB_MOBILE PRIMARY KEY (OLD_PROPERTY_TAB_MOBILE_ID) USING INDEX,
	CONSTRAINT UK_MAP_PROPERTY_TAB_MOBILE UNIQUE (NEW_PROPERTY_TAB_MOBILE_ID) USING INDEX,
	CONSTRAINT FK_MAP_PROPERTY_TAB_MOBILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

INSERT INTO csr.quick_survey_version (app_sid, survey_sid, survey_version, question_xml, label, start_dtm, end_dtm, published_dtm)
SELECT app_sid, survey_sid, 0, nvl(question_xml, '<questions/>'), nvl(label, 'survey'), start_dtm, end_dtm, null
  FROM csr.quick_survey;

INSERT INTO csr.quick_survey_version (app_sid, survey_sid, survey_version, question_xml, label, start_dtm, end_dtm, published_dtm)
SELECT app_sid, survey_sid, 1, nvl(question_xml, '<questions/>'), nvl(label, 'survey'), start_dtm, end_dtm, null
  FROM csr.quick_survey;

-- These have been dropped from clean but renamed on live
ALTER TABLE csr.QUICK_SURVEY RENAME COLUMN RESULT_PROVIDER TO  XXX_RESULT_PROVIDER;
ALTER TABLE csr.QUICK_SURVEY RENAME COLUMN QUESTION_XML TO XXX_QUESTION_XML;
ALTER TABLE csr.QUICK_SURVEY RENAME COLUMN LABEL TO XXX_LABEL;
ALTER TABLE csr.QUICK_SURVEY RENAME COLUMN START_DTM TO XXX_START_DTM;
ALTER TABLE csr.QUICK_SURVEY RENAME COLUMN END_DTM TO XXX_END_DTM;
ALTER TABLE csr.QUICK_SURVEY ADD LAST_MODIFIED_DTM DATE;
UPDATE csr.QUICK_SURVEY SET LAST_MODIFIED_DTM=CREATED_DTM;
ALTER TABLE csr.QUICK_SURVEY MODIFY LAST_MODIFIED_DTM NOT NULL;

ALTER TABLE csr.QUICK_SURVEY ADD CURRENT_VERSION NUMBER(10);
ALTER TABLE csr.QUICK_SURVEY ADD CONSTRAINT CHK_QUICK_SURVEY_CURR_VERSION CHECK (CURRENT_VERSION > 0);
ALTER TABLE csr.QUICK_SURVEY ADD CONSTRAINT FK_QUICK_SURVEY_CURR_VERSION
	FOREIGN KEY (APP_SID, SURVEY_SID, CURRENT_VERSION) REFERENCES csr.QUICK_SURVEY_VERSION (APP_SID, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED;

UPDATE csr.quick_survey
   SET current_version = 1;

ALTER TABLE csr.QUICK_SURVEY_QUESTION ADD SURVEY_VERSION NUMBER(10);
UPDATE csr.QUICK_SURVEY_QUESTION SET SURVEY_VERSION=0;
ALTER TABLE csr.QUICK_SURVEY_QUESTION MODIFY SURVEY_VERSION NOT NULL;

DROP TABLE csr.QS_DIMENSION_QUESTION;
DROP TABLE csr.QS_DIMENSION;
DROP SEQUENCE csr.qs_dimension_id_seq;
DROP SEQUENCE csr.qs_expr_status_action_id_seq;
DROP SEQUENCE csr.qs_response_status_id_seq;
DROP SEQUENCE csr.qs_question_report_id_seq;
DROP TABLE CSR.QS_QUESTION_REPORT;
DROP TABLE csr.QS_EXPR_DEPENDENCY;

ALTER TABLE csr.QUICK_SURVEY_EXPR ADD SURVEY_VERSION NUMBER(10);
ALTER TABLE csr.QUICK_SURVEY_RESPONSE ADD SURVEY_VERSION NUMBER(10);

UPDATE csr.QUICK_SURVEY_EXPR SET SURVEY_VERSION=0;
UPDATE csr.QUICK_SURVEY_RESPONSE SET SURVEY_VERSION=1;

ALTER TABLE csr.QUICK_SURVEY_EXPR MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE csr.QUICK_SURVEY_RESPONSE MODIFY SURVEY_VERSION NOT NULL;

ALTER TABLE csr.QUICK_SURVEY_EXPR DROP CONSTRAINT FK_QS_QS_EXPR;
ALTER TABLE csr.QUICK_SURVEY_QUESTION DROP CONSTRAINT REFQUICK_SURVEY1310;
ALTER TABLE csr.QUICK_SURVEY_RESPONSE DROP CONSTRAINT REFQUICK_SURVEY896;

ALTER TABLE csr.QUICK_SURVEY_EXPR ADD CONSTRAINT FK_QS_QS_EXPR FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION) REFERENCES csr.QUICK_SURVEY_VERSION(APP_SID, SURVEY_SID, SURVEY_VERSION);
ALTER TABLE csr.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QUICK_SURV_QUEST_SURV_VER FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION) REFERENCES csr.QUICK_SURVEY_VERSION(APP_SID, SURVEY_SID, SURVEY_VERSION);
ALTER TABLE csr.QUICK_SURVEY_RESPONSE ADD CONSTRAINT FK_QUICK_SURV_RESP_SURV_VER FOREIGN KEY (APP_SID, SURVEY_SID, SURVEY_VERSION) REFERENCES csr.QUICK_SURVEY_VERSION(APP_SID, SURVEY_SID, SURVEY_VERSION);

BEGIN
	-- Remove all constraints referencing the old PK. There are some client references and some references on live
	-- that are different to the clean build, so do so dynamically.
	FOR r IN (
		SELECT owner, table_name, constraint_name
		  FROM all_constraints
		 WHERE r_owner = 'CSR'
		   AND r_constraint_name = 'PK638'
	) LOOP
		EXECUTE IMMEDIATE 'ALTER TABLE '||r.owner||'.'||r.table_name||' DROP CONSTRAINT '||r.constraint_name;
	END LOOP;
END;
/

ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT PK638 DROP INDEX;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT PK_QUICK_SURVEY_QUESTION PRIMARY KEY (APP_SID, QUESTION_ID, SURVEY_VERSION);

ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QSQ_QSA_MEASURE;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT CONS_QS_QUES_MEASURE DROP INDEX;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT CONS_QS_QUES_MEASURE UNIQUE (APP_SID, QUESTION_ID, SURVEY_VERSION, MEASURE_SID);

ALTER TABLE CSR.QS_FILTER_CONDITION DROP CONSTRAINT FK_QS_FIL_COND_CMP_OP;
BEGIN
	FOR r IN (
		SELECT owner, table_name, constraint_name
		  FROM all_constraints
		 WHERE owner = 'CSR'
		   AND table_name = 'QS_QUESTION_OPTION'
		   AND constraint_name = 'QS_Q_OPT_PARENT_OPT'
	) LOOP		
		EXECUTE IMMEDIATE 'ALTER TABLE '||r.owner||'.'||r.table_name||' DROP CONSTRAINT '||r.constraint_name;
	END LOOP;
END;
/
ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QS_Q_OPT_ANSWER;

ALTER TABLE CSR.QS_SUBMISSION_FILE DROP CONSTRAINT FK_SUBMSN_FILE_QSS;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QSA_SUBMSN_ID;
ALTER TABLE CSR.QUICK_SURVEY_RESPONSE DROP CONSTRAINT FK_QS_RESP_LAST_SUBMSN;

ALTER TABLE csr.QS_QUESTION_OPTION ADD SURVEY_VERSION NUMBER(10);
UPDATE csr.QS_QUESTION_OPTION SET SURVEY_VERSION=0;
ALTER TABLE csr.QS_QUESTION_OPTION MODIFY SURVEY_VERSION NOT NULL;

ALTER TABLE CSR.QS_QUESTION_OPTION DROP CONSTRAINT PK_QS_QUESTION_OPTION DROP INDEX;
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT PK_QS_QUESTION_OPTION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_OPTION_ID, SURVEY_VERSION);

DROP INDEX CSR.IX_QS_QUESTION_OPTION;
CREATE UNIQUE INDEX CSR.IX_QS_QUESTION_OPTION ON CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, SURVEY_VERSION, NVL(UPPER(LOOKUP_KEY),'QOID_'||TO_CHAR(QUESTION_OPTION_ID)));

DROP INDEX CSR.IX_QS_QUESTION;
CREATE UNIQUE INDEX CSR.IX_QS_QUESTION ON CSR.QUICK_SURVEY_QUESTION(APP_SID, SURVEY_SID, SURVEY_VERSION, NVL(UPPER(LOOKUP_KEY),'QID_'||TO_CHAR(QUESTION_ID)));

INSERT INTO CSR.QUICK_SURVEY_QUESTION (app_sid, question_id, parent_id, survey_sid, pos, label, is_visible, question_type, score, lookup_key, maps_to_ind_sid, max_score, upload_score, custom_question_type_id, weight, measure_sid, dont_normalise_score, has_score_expression, has_max_score_expr, survey_version)
SELECT app_sid, question_id, parent_id, survey_sid, pos, label, is_visible, question_type, score, lookup_key, maps_to_ind_sid, max_score, upload_score, custom_question_type_id, weight, measure_sid, dont_normalise_score, has_score_expression, has_max_score_expr, 1
  FROM csr.quick_survey_question;

INSERT INTO csr.QS_QUESTION_OPTION (app_sid, question_option_id, question_id, parent_option_id, pos, label, is_visible, score, color, lookup_key, maps_to_ind_sid, option_action, survey_version)
SELECT app_sid, question_option_id, question_id, parent_option_id, pos, label, is_visible, score, color, lookup_key, maps_to_ind_sid, option_action, 1
  FROM csr.QS_QUESTION_OPTION;

ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD SURVEY_VERSION NUMBER(10);
UPDATE csr.QUICK_SURVEY_ANSWER SET SURVEY_VERSION=1;
ALTER TABLE csr.QUICK_SURVEY_ANSWER MODIFY SURVEY_VERSION NOT NULL;

ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD SURVEY_VERSION NUMBER(10);
ALTER TABLE CSR.QS_ANSWER_FILE ADD SURVEY_VERSION NUMBER(10);
ALTER TABLE CSR.QS_FILTER_CONDITION ADD SURVEY_VERSION NUMBER(10);
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD SURVEY_VERSION NUMBER(10);
ALTER TABLE CSR.QUICK_SURVEY_SUBMISSION ADD SURVEY_VERSION NUMBER(10);
ALTER TABLE CSR.QS_SUBMISSION_FILE ADD SURVEY_VERSION NUMBER(10);

UPDATE csr.ISSUE_SURVEY_ANSWER SET SURVEY_VERSION=1;
UPDATE csr.QS_ANSWER_FILE SET SURVEY_VERSION=1;
UPDATE csr.QS_FILTER_CONDITION SET SURVEY_VERSION=0;
UPDATE csr.QUICK_SURVEY_EXPR_ACTION SET SURVEY_VERSION=0;
UPDATE csr.QUICK_SURVEY_SUBMISSION SET SURVEY_VERSION=1;
UPDATE CSR.QS_SUBMISSION_FILE SET SURVEY_VERSION=1;

ALTER TABLE CSR.ISSUE_SURVEY_ANSWER MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSR.QS_ANSWER_FILE MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSR.QS_FILTER_CONDITION MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_SUBMISSION MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSR.QS_SUBMISSION_FILE MODIFY SURVEY_VERSION NOT NULL;

begin
	for r in (select constraint_name from all_constraints where table_name='QUICK_SURVEY_SUBMISSION' and owner='CSR' and constraint_type='P') loop
		execute immediate 'ALTER TABLE csr.QUICK_SURVEY_SUBMISSION DROP primary key DROP INDEX';
	end loop;
end;
/
ALTER TABLE csr.QUICK_SURVEY_SUBMISSION ADD CONSTRAINT PK_QUICK_SURVEY_SUBMISSION PRIMARY KEY (APP_SID, SURVEY_RESPONSE_ID, SUBMISSION_ID, SURVEY_VERSION);
ALTER TABLE csr.QUICK_SURVEY_SUBMISSION ADD CONSTRAINT UK_QUICK_SURVEY_SUBMISSION UNIQUE (APP_SID, SURVEY_RESPONSE_ID, SUBMISSION_ID);

ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD CONSTRAINT FK_ISS_SURV_ANS_QSTN FOREIGN KEY (APP_SID, QUESTION_ID, SURVEY_VERSION) REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE CSR.QS_ANSWER_FILE ADD CONSTRAINT FK_QS_ANS_FILE_QSTN_ID FOREIGN KEY (APP_SID, QUESTION_ID, SURVEY_VERSION) REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE CSR.QS_FILTER_CONDITION ADD CONSTRAINT FK_QS_FIL_COND_QN FOREIGN KEY (APP_SID, QUESTION_ID, SURVEY_VERSION) REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, SURVEY_VERSION);
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT REFQUICK_SURVEY_QUESTION2195 FOREIGN KEY (APP_SID, QUESTION_ID, SURVEY_VERSION) REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, SURVEY_VERSION);
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QSQ_QSA_MEASUREX FOREIGN KEY (APP_SID, QUESTION_ID, SURVEY_VERSION) REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT FK_EXPR_SHOW_QUESTION_ID FOREIGN KEY (APP_SID, SHOW_QUESTION_ID, SURVEY_VERSION) REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, SURVEY_VERSION);
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QS_QUES_PARENT_QUES FOREIGN KEY (APP_SID, PARENT_ID, SURVEY_VERSION) REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, SURVEY_VERSION);

ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QSQ_QSA_MEASURE FOREIGN KEY (APP_SID, QUESTION_ID, SURVEY_VERSION, MEASURE_SID) REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, SURVEY_VERSION, MEASURE_SID) DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE CSR.QS_FILTER_CONDITION ADD CONSTRAINT FK_QS_FIL_COND_CMP_OP FOREIGN KEY (APP_SID, QUESTION_ID, COMPARE_TO_OPTION_ID, SURVEY_VERSION) REFERENCES csr.qs_question_option (APP_SID, QUESTION_ID, QUESTION_OPTION_ID, SURVEY_VERSION);
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT QS_Q_OPT_PARENT_OPT FOREIGN KEY (APP_SID, QUESTION_ID, PARENT_OPTION_ID, SURVEY_VERSION) REFERENCES csr.qs_question_option (APP_SID, QUESTION_ID, QUESTION_OPTION_ID, SURVEY_VERSION);
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QS_Q_OPT_ANSWER FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_OPTION_ID, SURVEY_VERSION) REFERENCES csr.qs_question_option (APP_SID, QUESTION_ID, QUESTION_OPTION_ID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE CSR.QS_SUBMISSION_FILE ADD CONSTRAINT FK_SUBMSN_FILE_QSS FOREIGN KEY (APP_SID, SURVEY_RESPONSE_ID, SUBMISSION_ID, SURVEY_VERSION) REFERENCES csr.QUICK_SURVEY_SUBMISSION (APP_SID, SURVEY_RESPONSE_ID, SUBMISSION_ID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QSA_SUBMSN_ID FOREIGN KEY (APP_SID, SURVEY_RESPONSE_ID, SUBMISSION_ID, SURVEY_VERSION) REFERENCES csr.QUICK_SURVEY_SUBMISSION (APP_SID, SURVEY_RESPONSE_ID, SUBMISSION_ID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE CSR.QUICK_SURVEY_RESPONSE ADD CONSTRAINT FK_QS_RESP_LAST_SUBMSN FOREIGN KEY (APP_SID, SURVEY_RESPONSE_ID, LAST_SUBMISSION_ID) REFERENCES csr.QUICK_SURVEY_SUBMISSION (APP_SID, SURVEY_RESPONSE_ID, SUBMISSION_ID) DEFERRABLE INITIALLY DEFERRED;


ALTER TABLE csr.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT FK_QS_EXPR_QS_EXPR_ACTION;
ALTER TABLE csr.QUICK_SURVEY_EXPR DROP CONSTRAINT PK_QS_EXPR DROP INDEX;
ALTER TABLE csr.QUICK_SURVEY_EXPR ADD CONSTRAINT PK_QS_EXPR PRIMARY KEY (APP_SID, EXPR_ID, SURVEY_VERSION);
ALTER TABLE csr.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT FK_QS_EXPR_QS_EXPR_ACTION FOREIGN KEY (APP_SID, EXPR_ID, SURVEY_VERSION) REFERENCES csr.QUICK_SURVEY_EXPR (APP_SID, EXPR_ID, SURVEY_VERSION);

DROP INDEX CSR.UK_QS_EXPR;
CREATE UNIQUE INDEX CSR.UK_QS_EXPR ON CSR.QUICK_SURVEY_EXPR(APP_SID, SURVEY_SID, SURVEY_VERSION, NVL(UPPER(NAME),'UK_QS_EXPR_'||TO_CHAR(EXPR_ID)));

ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT UK_QS_EXPR_ACTION DROP INDEX;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT UK_QS_EXPR_ACTION  UNIQUE (APP_SID, QUICK_SURVEY_EXPR_ACTION_ID, SURVEY_SID, SURVEY_VERSION, EXPR_ID);

INSERT INTO csr.quick_survey_expr (app_sid, survey_sid, expr_id, expr, description, name, survey_version)
SELECT app_sid, survey_sid, expr_id, expr, description, name, 1
  FROM csr.quick_survey_expr;

ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT CHK_QS_EXPR_ACTION_TYPE_FK;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT FK_QS_EXPR_STATUS_ACTION;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP COLUMN QS_EXPR_STATUS_ACTION_ID;
DELETE FROM CSR.QUICK_SURVEY_EXPR_ACTION WHERE ACTION_TYPE = 'status';
ALTER TABLE csr.quick_survey_response DROP CONSTRAINT FK_QS_STATUS_RESPONSE;
ALTER TABLE csr.quick_survey_response DROP COLUMN QS_RESPONSE_STATUS_ID;
DROP TABLE csr.qs_expr_status_action;
DROP TABLE csr.qs_response_status;

ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD  CONSTRAINT CHK_QS_EXPR_ACTION_TYPE_FK CHECK ((ACTION_TYPE = 'nc' AND QS_EXPR_NON_COMPL_ACTION_ID IS NOT NULL
  AND QS_EXPR_MSG_ACTION_ID IS NULL AND SHOW_QUESTION_ID IS NULL)
OR
(ACTION_TYPE = 'msg' AND QS_EXPR_NON_COMPL_ACTION_ID IS NULL
  AND QS_EXPR_MSG_ACTION_ID IS NOT NULL AND SHOW_QUESTION_ID IS NULL)
OR
(ACTION_TYPE = 'show_q' AND QS_EXPR_NON_COMPL_ACTION_ID IS NULL
  AND QS_EXPR_MSG_ACTION_ID IS NULL AND SHOW_QUESTION_ID IS NOT NULL));

DECLARE
	v_qs_expr_non_compl_action_id number;
	v_qs_expr_msg_action_id number;
BEGIN
	FOR r IN (
		SELECT app_sid, quick_survey_expr_action_id, action_type, survey_sid,
			   expr_id, qs_expr_non_compl_action_id, qs_expr_msg_action_id,
			   show_question_id
		  FROM csr.quick_survey_expr_action
		 WHERE survey_version = 0
	) LOOP
		v_qs_expr_non_compl_action_id := NULL;
		v_qs_expr_msg_action_id := NULL;
		
		IF r.qs_expr_non_compl_action_id IS NOT NULL THEN
			FOR nc IN (
				SELECT app_sid, assign_to_role_sid, due_dtm_abs, due_dtm_relative, due_dtm_relative_unit,
					   title, detail, send_email_on_creation, non_comp_default_id
				  FROM csr.qs_expr_non_compl_action
				 WHERE qs_expr_non_compl_action_id = r.qs_expr_non_compl_action_id
				   AND app_sid = r.app_sid
			) LOOP
				INSERT INTO csr.qs_expr_non_compl_action (
					app_sid, qs_expr_non_compl_action_id, assign_to_role_sid, due_dtm_abs, due_dtm_relative,
					due_dtm_relative_unit, title, detail, send_email_on_creation, non_comp_default_id)
				VALUES (
					nc.app_sid, csr.qs_expr_nc_action_id_seq.nextval, nc.assign_to_role_sid, nc.due_dtm_abs, nc.due_dtm_relative,
					nc.due_dtm_relative_unit, nc.title, nc.detail, nc.send_email_on_creation, nc.non_comp_default_id)
				RETURNING qs_expr_non_compl_action_id INTO v_qs_expr_non_compl_action_id;

				INSERT INTO csr.qs_expr_nc_action_involve_role (app_sid, qs_expr_non_compl_action_id, involve_role_sid)
				SELECT app_sid, v_qs_expr_non_compl_action_id, involve_role_sid
				  FROM csr.qs_expr_nc_action_involve_role
				 WHERE qs_expr_non_compl_action_id = r.qs_expr_non_compl_action_id
				   AND app_sid = r.app_sid;
			END LOOP;
		END IF;
		
		IF r.qs_expr_msg_action_id IS NOT NULL THEN
			FOR m IN (
				SELECT app_sid, msg, css_class
				  FROM csr.qs_expr_msg_action
				 WHERE qs_expr_msg_action_id = r.qs_expr_msg_action_id
				   AND app_sid = r.app_sid
			) LOOP
				INSERT INTO csr.qs_expr_msg_action (app_sid, qs_expr_msg_action_id, msg, css_class)
				VALUES (m.app_sid, csr.qs_expr_msg_action_id_seq.nextval, m.msg, m.css_class)
				RETURNING qs_expr_msg_action_id INTO v_qs_expr_msg_action_id;
			END LOOP;
		END IF;
		
		INSERT INTO csr.quick_survey_expr_action (
			app_sid, quick_survey_expr_action_id, action_type, survey_sid,
			expr_id, qs_expr_non_compl_action_id, qs_expr_msg_action_id,
			show_question_id, survey_version
		)
		VALUES (
			r.app_sid, csr.qs_expr_action_id_seq.nextval, r.action_type, r.survey_sid,
			r.expr_id, v_qs_expr_non_compl_action_id, v_qs_expr_msg_action_id,
			r.show_question_id, 1
		);
	END LOOP;
END;
/
-- ** Indexes **
DROP INDEX CSR.IX_EXPR_SHOW_QUESTION_ID;
DROP INDEX CSR.IX_ISS_SURV_ANS_QSN_ID;
DROP INDEX CSR.IX_QSR_LAST_SUBMSN_ID;
DROP INDEX CSR.IX_QSURVEY_RESP_SURVEY;
DROP INDEX CSR.IX_QS_ANSWER_QUESTION;
DROP INDEX CSR.IX_QS_ANSWER_SUBMSN;
DROP INDEX CSR.IX_QS_ANS_FILE_QSN_ID;
DROP INDEX CSR.IX_QS_FILTER_CON_QUESTION_ID;
DROP INDEX CSR.IX_QS_FIL_COND_CMP_OP;
DROP INDEX CSR.IX_QS_QUESTION_O_QUESTION_ID;
DROP INDEX CSR.IX_QS_QUESTION_SURVEY;
DROP INDEX CSR.IX_QUICK_SURVEY__PARENT_ID;
DROP INDEX CSR.IX_QUICK_SURVEY__QUESTION_ID_M;
DROP INDEX CSR.IX_QUICK_SURVEY__QUESTION_ID_Q;

BEGIN
	FOR r IN (
		SELECT owner, index_name
		  FROM all_indexes
		 WHERE owner = 'CSR'
		   AND index_name = 'IX_QS_Q_OPT_ANSWER'
	) LOOP		
		EXECUTE IMMEDIATE 'DROP INDEX '||r.owner||'.'||r.index_name;
	END LOOP;
END;
/

CREATE INDEX CSR.IX_ISS_SURV_ANS_QSTN ON CSR.ISSUE_SURVEY_ANSWER(APP_SID,QUESTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_ANS_FILE_QSTN_ID ON CSR.QS_ANSWER_FILE(APP_SID,QUESTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_FIL_COND_CMP_OP ON CSR.QS_FILTER_CONDITION(APP_SID,QUESTION_ID,COMPARE_TO_OPTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_FIL_COND_QN ON CSR.QS_FILTER_CONDITION(APP_SID,QUESTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_Q_OPT_PARENT_OPT ON CSR.QS_QUESTION_OPTION(APP_SID,QUESTION_ID,PARENT_OPTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QUICK_SURVEY_QUESTION2195 ON CSR.QS_QUESTION_OPTION(APP_SID,QUESTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QUICK_SURVEY_CURR_VERSION ON CSR.QUICK_SURVEY(APP_SID,SURVEY_SID,CURRENT_VERSION);
CREATE INDEX CSR.IX_QSA_SUBMSN_ID ON CSR.QUICK_SURVEY_ANSWER(APP_SID,SURVEY_RESPONSE_ID,SUBMISSION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QSQ_QSA_MEASURE ON CSR.QUICK_SURVEY_ANSWER(APP_SID,QUESTION_ID,SURVEY_VERSION,MEASURE_SID);
CREATE INDEX CSR.IX_QSQ_QSA_MEASUREX ON CSR.QUICK_SURVEY_ANSWER(APP_SID,QUESTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_Q_OPT_ANSWER ON CSR.QUICK_SURVEY_ANSWER(APP_SID,QUESTION_ID,QUESTION_OPTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_QS_EXPR ON CSR.QUICK_SURVEY_EXPR(APP_SID,SURVEY_SID,SURVEY_VERSION);
CREATE INDEX CSR.IX_EXPR_SHOW_QUESTION_ID ON CSR.QUICK_SURVEY_EXPR_ACTION(APP_SID,SHOW_QUESTION_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_EXPR_QS_EXPR_ACTION ON CSR.QUICK_SURVEY_EXPR_ACTION(APP_SID,EXPR_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_QUES_PARENT_QUES ON CSR.QUICK_SURVEY_QUESTION(APP_SID,PARENT_ID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QUICK_SURV_QUEST_SURV_VER ON CSR.QUICK_SURVEY_QUESTION(APP_SID,SURVEY_SID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_RESP_LAST_SUBMSN ON CSR.QUICK_SURVEY_RESPONSE(APP_SID,SURVEY_RESPONSE_ID,LAST_SUBMISSION_ID);
CREATE INDEX CSR.IX_QUICK_SURV_RESP_SURV_VER ON CSR.QUICK_SURVEY_RESPONSE(APP_SID,SURVEY_SID,SURVEY_VERSION);
CREATE INDEX CSR.IX_QS_VERSION_SURVEY ON CSR.QUICK_SURVEY_VERSION(APP_SID,SURVEY_SID);


-- **** CSREXP/IMP *****
CREATE TABLE CSRIMP.QUICK_SURVEY_VERSION (
	CSRIMP_SESSION_ID	NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	SURVEY_SID			NUMBER(10) NOT NULL,
	SURVEY_VERSION		NUMBER(10) NOT NULL,
	QUESTION_XML		SYS.XMLType NOT NULL,
	LABEL				VARCHAR2(256) NOT NULL,
	START_DTM			DATE,
	END_DTM				DATE,
	PUBLISHED_DTM		DATE,
	CONSTRAINT PK_QUICK_SURVEY_VERSION PRIMARY KEY (CSRIMP_SESSION_ID, SURVEY_SID, SURVEY_VERSION),
	 CONSTRAINT FK_QUICK_SURVEY_VER_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
);

INSERT INTO csrimp.quick_survey_version (CSRIMP_SESSION_ID, survey_sid, survey_version, question_xml, label, start_dtm, end_dtm, published_dtm)
SELECT CSRIMP_SESSION_ID, survey_sid, 0, question_xml, label, start_dtm, end_dtm, null
  FROM csrimp.quick_survey;


ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT CHK_QS_EXPR_ACTION_TYPE_FK;
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR_ACTION ADD  CONSTRAINT CHK_QS_EXPR_ACTION_TYPE_FK CHECK ((ACTION_TYPE = 'nc' AND QS_EXPR_NON_COMPL_ACTION_ID IS NOT NULL
  AND QS_EXPR_MSG_ACTION_ID IS NULL AND SHOW_QUESTION_ID IS NULL)
OR
(ACTION_TYPE = 'msg' AND QS_EXPR_NON_COMPL_ACTION_ID IS NULL
  AND QS_EXPR_MSG_ACTION_ID IS NOT NULL AND SHOW_QUESTION_ID IS NULL)
OR
(ACTION_TYPE = 'show_q' AND QS_EXPR_NON_COMPL_ACTION_ID IS NULL
  AND QS_EXPR_MSG_ACTION_ID IS NULL AND SHOW_QUESTION_ID IS NOT NULL));

ALTER TABLE CSRIMP.QUICK_SURVEY DROP COLUMN RESULT_PROVIDER;
ALTER TABLE CSRIMP.QUICK_SURVEY DROP COLUMN QUESTION_XML;
ALTER TABLE CSRIMP.QUICK_SURVEY DROP COLUMN LABEL;
ALTER TABLE CSRIMP.QUICK_SURVEY DROP COLUMN START_DTM;
ALTER TABLE CSRIMP.QUICK_SURVEY DROP COLUMN END_DTM;
ALTER TABLE CSRIMP.QUICK_SURVEY ADD LAST_MODIFIED_DTM DATE;
UPDATE CSRIMP.QUICK_SURVEY SET LAST_MODIFIED_DTM=CREATED_DTM;
ALTER TABLE CSRIMP.QUICK_SURVEY MODIFY LAST_MODIFIED_DTM NOT NULL;
ALTER TABLE CSRIMP.QUICK_SURVEY ADD CURRENT_VERSION NUMBER(10);
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QUICK_SURVEY_QUESTION SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION MODIFY SURVEY_VERSION NOT NULL;
DROP TABLE CSRIMP.QS_DIMENSION_QUESTION;
DROP TABLE CSRIMP.QS_DIMENSION;
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QUICK_SURVEY_EXPR SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QUICK_SURVEY_RESPONSE ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QUICK_SURVEY_RESPONSE SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QUICK_SURVEY_RESPONSE MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QS_QUESTION_OPTION SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QUICK_SURVEY_ANSWER ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QUICK_SURVEY_ANSWER SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QUICK_SURVEY_ANSWER MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.ISSUE_SURVEY_ANSWER ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.ISSUE_SURVEY_ANSWER SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.ISSUE_SURVEY_ANSWER MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QS_ANSWER_FILE ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QS_ANSWER_FILE SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QS_ANSWER_FILE MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QS_FILTER_CONDITION ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QS_FILTER_CONDITION SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QS_FILTER_CONDITION MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR_ACTION ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QUICK_SURVEY_EXPR_ACTION SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR_ACTION MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QUICK_SURVEY_SUBMISSION ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QUICK_SURVEY_SUBMISSION SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QUICK_SURVEY_SUBMISSION MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QS_SUBMISSION_FILE ADD SURVEY_VERSION NUMBER(10);
UPDATE CSRIMP.QS_SUBMISSION_FILE SET SURVEY_VERSION=0;
ALTER TABLE CSRIMP.QS_SUBMISSION_FILE MODIFY SURVEY_VERSION NOT NULL;
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR_ACTION DROP COLUMN QS_EXPR_STATUS_ACTION_ID;
ALTER TABLE CSRIMP.quick_survey_response DROP COLUMN QS_RESPONSE_STATUS_ID;
DROP TABLE CSRIMP.qs_expr_status_action;
DROP TABLE CSRIMP.qs_response_status;
DROP TABLE CSRIMP.qs_question_report;
DROP TABLE CSRIMP.qs_expr_dependency;
DROP TABLE CSRIMP.map_qs_dimension;
DROP TABLE csrimp.map_qs_expr_status_action;
DROP TABLE csrimp.map_qs_response_status;

ALTER TABLE CSRIMP.QUICK_SURVEY ADD CONSTRAINT CHK_QUICK_SURVEY_CURR_VERSION CHECK (CURRENT_VERSION > 0);
ALTER TABLE CSRIMP.QUICK_SURVEY DROP CONSTRAINT CHK_QUICK_SURVEY_AUDIENCE;
ALTER TABLE CSRIMP.QUICK_SURVEY ADD CONSTRAINT CHK_QUICK_SURVEY_AUDIENCE CHECK (AUDIENCE IN ('everyone','existing','chain','audit','chain.product'));
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION DROP CONSTRAINT PK_QUICK_SURVEY_QUESTION DROP INDEX;
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION ADD CONSTRAINT PK_QUICK_SURVEY_QUESTION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, SURVEY_VERSION);
ALTER TABLE CSRIMP.QS_QUESTION_OPTION DROP CONSTRAINT PK_QS_QUESTION_OPTION DROP INDEX;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION ADD CONSTRAINT PK_QS_QUESTION_OPTION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_OPTION_ID, SURVEY_VERSION);
ALTER TABLE CSRIMP.QUICK_SURVEY_SUBMISSION DROP CONSTRAINT PK_QUICK_SURVEY_SUBMISSION DROP INDEX;
ALTER TABLE CSRIMP.QUICK_SURVEY_SUBMISSION ADD CONSTRAINT PK_QUICK_SURVEY_SUBMISSION PRIMARY KEY (CSRIMP_SESSION_ID, SURVEY_RESPONSE_ID, SUBMISSION_ID, SURVEY_VERSION);
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR DROP CONSTRAINT PK_QS_EXPR DROP INDEX;
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR ADD CONSTRAINT PK_QS_EXPR PRIMARY KEY (CSRIMP_SESSION_ID, EXPR_ID, SURVEY_VERSION);
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION DROP CONSTRAINT CONS_QS_QUES_MEASURE DROP INDEX;
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION ADD CONSTRAINT CONS_QS_QUES_MEASURE  UNIQUE (CSRIMP_SESSION_ID, QUESTION_ID, MEASURE_SID, SURVEY_VERSION);

ALTER TABLE CSR.TAG_GROUP ADD (
	APPLIES_TO_CHAIN_PRODUCTS NUMBER(1,0) DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_APPLIES_TO_CHAIN_PROD_1_0 CHECK (APPLIES_TO_CHAIN_PRODUCTS IN (1, 0))
);

ALTER TABLE CSRIMP.TAG_GROUP ADD (
	APPLIES_TO_CHAIN_PRODUCTS NUMBER(1)
);
UPDATE CSRIMP.TAG_GROUP SET APPLIES_TO_CHAIN_PRODUCTS=0;
ALTER TABLE CSRIMP.TAG_GROUP MODIFY APPLIES_TO_CHAIN_PRODUCTS NOT NULL;
ALTER TABLE CSRIMP.TAG_GROUP ADD (CONSTRAINT CHK_APPLIES_TO_CHAIN_PROD_1_0 CHECK (APPLIES_TO_CHAIN_PRODUCTS IN (1, 0)));


-- *** Grants ***
grant select,insert,update,delete on csrimp.quick_survey_version to web_user;
grant select,insert,update,delete on csr.quick_survey_version to csrimp;
grant select, insert, update, delete on csrimp.property_tab_mobile to web_user;
grant select, insert, update on csr.property_tab_mobile to csrimp;
grant select on csr.property_tab_mobile_id_seq to csrimp;
grant select on csr.qs_expr_msg_action_id_seq to csrimp;
grant select on chain.product_type_id_seq to csrimp;
grant select, insert, update on chain.product_type to csrimp;
grant select, insert, update on chain.product_type to CSR;
grant select, insert, update on chain.product_type_tag to csrimp;
grant select, insert, update on chain.product_type_tag to CSR;
grant select, insert, update on chain.company_product_type to csrimp;
grant select, insert, update on chain.company_product_type to CSR;

-- ** Cross schema constraints ***

-- *** Views ***
CREATE OR REPLACE VIEW csr.v$quick_survey AS
	SELECT qs.app_sid, qs.survey_sid, d.label draft_survey_label, l.label live_survey_label,
		   NVL(l.label, d.label) label, qs.audience, qs.created_dtm,
		   CASE WHEN l.survey_sid IS NOT NULL THEN 1 ELSE 0 END survey_is_published,
		   CASE WHEN qs.last_modified_dtm > l.published_dtm THEN 1 ELSE 0 END survey_has_unpublished_changes
	  FROM csr.quick_survey qs
	  JOIN csr.quick_survey_version d ON qs.survey_sid = d.survey_sid
	  LEFT JOIN csr.quick_survey_version l ON qs.survey_sid = l.survey_sid AND qs.current_version = l.survey_version
	 WHERE d.survey_version = 0;

CREATE OR REPLACE VIEW csr.V$DELEG_PLAN_COL AS
	SELECT deleg_plan_col_id, deleg_plan_sid, d.name label, dpc.is_hidden, 'Delegation' type, dpcd.delegation_sid object_sid
	  FROM deleg_plan_col dpc
		JOIN deleg_plan_col_deleg dpcd ON dpc.deleg_plan_col_deleg_id = dpcd.deleg_plan_col_deleg_id
		JOIN delegation d ON dpcd.delegation_sid = d.delegation_sid
	 UNION
	SELECT deleg_plan_col_id, deleg_plan_sid, qs.label, dpc.is_hidden, 'Survey' type, dpcs.survey_sid object_sid
	  FROM deleg_plan_col dpc
		JOIN deleg_plan_col_survey dpcs ON dpc.deleg_plan_col_survey_id = dpcs.deleg_plan_col_survey_id
		JOIN v$quick_survey qs ON dpcs.survey_sid = qs.survey_sid
	;

CREATE OR REPLACE VIEW csr.v$quick_survey_response AS
	SELECT qsr.app_sid, qsr.survey_response_id, qsr.survey_sid, qsr.user_sid, qsr.user_name,
		   qsr.created_dtm, qsr.guid, qss.submitted_dtm, qsr.qs_campaign_sid, qss.overall_score,
		   qss.overall_max_score, qss.score_threshold_id, qss.submission_id, qss.survey_version
	  FROM quick_survey_response qsr 
	  JOIN quick_survey_submission qss ON qsr.survey_response_id = qss.survey_response_id
	   AND NVL(qsr.last_submission_id, 0) = qss.submission_id
	   AND qsr.survey_version > 0 -- filter out draft submissions
;

CREATE OR REPLACE VIEW csr.v$audit AS
	SELECT ia.internal_audit_sid, ia.region_sid, r.description region_description, ia.audit_dtm, ia.label, 
		   ia.auditor_user_sid, ca.full_name auditor_full_name, sr.submitted_dtm survey_completed, 
		   NVL(nc.cnt, 0) open_non_compliances, ia.survey_sid, ia.auditor_name, ia.auditor_organisation,
		   r.region_type, rt.class_name region_type_class_name, SUBSTR(ia.notes, 1, 50) short_notes,
		   ia.notes full_notes, iat.internal_audit_type_id audit_type_id, iat.label audit_type_label,
		   qs.label survey_label, ia.app_sid, ia.internal_audit_type_id, iat.auditor_role_sid,
		   iat.audit_contact_role_sid, ia.audit_closure_type_id, act.label closure_label, act.icon_image_filename,
		   ia.created_by_user_sid, ia.survey_response_id, ia.created_dtm, ca.email auditor_email,
		   iat.filename as template_filename, iat.assign_issues_to_role, cvru.user_giving_cover_sid cover_auditor_sid,
		   fi.flow_sid, f.label flow_label, ia.flow_item_id, fi.current_state_id, fs.label flow_state_label,
		   iat.summary_survey_sid, sqs.label summary_survey_label, ia.summary_response_id, act.is_failure,
		   ia.auditor_company_sid, ac.name auditor_company_name
	  FROM internal_audit ia
	  LEFT JOIN (
			SELECT auc.app_sid, auc.internal_audit_sid, auc.user_giving_cover_sid,
				   ROW_NUMBER() OVER (PARTITION BY auc.internal_audit_sid ORDER BY LEVEL DESC, uc.start_dtm DESC,  uc.user_cover_id DESC) rn,
				   CONNECT_BY_ROOT auc.user_being_covered_sid user_being_covered_sid
			  FROM audit_user_cover auc
			  JOIN user_cover uc ON auc.user_cover_id = uc.user_cover_id
			 CONNECT BY NOCYCLE PRIOR auc.user_being_covered_sid = auc.user_giving_cover_sid
		) cvru
	    ON ia.internal_audit_sid = cvru.internal_audit_sid
	   AND ia.app_sid = cvru.app_sid AND ia.auditor_user_sid = cvru.user_being_covered_sid
	   AND cvru.rn = 1
	  JOIN csr_user ca ON NVL(cvru.user_giving_cover_sid , ia.auditor_user_sid) = ca.csr_user_sid AND ia.app_sid = ca.app_sid
	  LEFT JOIN internal_audit_type iat ON ia.internal_audit_type_id = iat.internal_audit_type_id
	  LEFT JOIN v$quick_survey qs ON ia.survey_sid = qs.survey_sid AND ia.app_sid = qs.app_sid
	  LEFT JOIN v$quick_survey sqs ON iat.summary_survey_sid = sqs.survey_sid AND iat.app_sid = sqs.app_sid
	  LEFT JOIN (
			SELECT anc.app_sid, anc.internal_audit_sid, COUNT(DISTINCT anc.non_compliance_id) cnt
			  FROM audit_non_compliance anc
			  JOIN issue_non_compliance inc ON anc.non_compliance_id = inc.non_compliance_id AND anc.app_sid = inc.app_sid
			  JOIN issue i ON inc.issue_non_compliance_id = i.issue_non_compliance_id AND inc.app_sid = i.app_sid
			 WHERE i.resolved_dtm IS NULL
			   AND i.rejected_dtm IS NULL
			   AND i.deleted = 0
			 GROUP BY anc.app_sid, anc.internal_audit_sid
			) nc ON ia.internal_audit_sid = nc.internal_audit_sid AND ia.app_sid = nc.app_sid
	  LEFT JOIN v$quick_survey_response sr ON ia.survey_response_id = sr.survey_response_id AND ia.app_sid = sr.app_sid
	  JOIN v$region r ON ia.region_sid = r.region_sid
	  JOIN region_type rt ON r.region_type = rt.region_type
	  LEFT JOIN audit_closure_type act ON ia.audit_closure_type_id = act.audit_closure_type_id AND ia.app_sid = act.app_sid
	  LEFT JOIN flow_item fi
	    ON ia.flow_item_id = fi.flow_item_id
	  LEFT JOIN flow_state fs
	    ON fs.flow_state_id = fi.current_state_id
	  LEFT JOIN flow f
	    ON f.flow_sid = fi.flow_sid
	  LEFT JOIN chain.company ac
	    ON ia.auditor_company_sid = ac.company_sid AND ia.app_sid = ac.app_sid
	 WHERE ia.deleted = 0;

CREATE OR REPLACE VIEW csr.v$quick_survey_answer AS
	SELECT qsa.app_sid, qsa.survey_response_id, qsa.question_id, qsa.note, qsa.score, qsa.question_option_id,
		   qsa.val_number, qsa.measure_conversion_id, qsa.measure_sid, qsa.region_sid, qsa.answer,
		   qsa.html_display, qsa.max_score, qsa.version_stamp, qsa.submission_id, qsa.survey_version
	  FROM quick_survey_answer qsa
	  JOIN v$quick_survey_response qsr ON qsa.survey_response_id = qsr.survey_response_id AND qsa.submission_id = qsr.submission_id;

CREATE OR REPLACE VIEW csr.v$quick_survey_unans_quest AS
    SELECT qsr.app_sid, qsr.survey_sid, qsr.survey_response_id, qsq.question_id, qsq.pos AS question_pos, qsq.question_type, qsq.label AS question_label
	  FROM csr.v$quick_survey_response qsr
	  JOIN csr.quick_survey_question qsq ON qsq.app_sid = qsr.app_sid AND qsq.survey_sid = qsr.survey_sid AND qsr.survey_version = qsq.survey_version
	 WHERE qsq.parent_id IS NULL
	   AND qsq.is_visible = 1
	   AND qsq.question_type NOT IN ('section', 'pagebreak', 'files', 'richtext')      
	   AND ( -- questions without nested answers
	    (qsq.question_type IN ('note', 'number', 'slider', 'date', 'regionpicker', 'radio', 'rtquestion')
		 AND (qsq.question_id IN (
		   SELECT question_id 
		     FROM csr.v$quick_survey_answer
		    WHERE app_sid = qsr.app_sid
		     AND survey_response_id = qsr.survey_response_id
			 AND (answer IS NULL AND question_option_id IS NULL AND val_number IS NULL AND region_sid IS NULL))))
		-- questions with nested answers
		OR (qsq.question_type = 'checkboxgroup'
		 AND NOT EXISTS ( -- consider as unanswered if none of the options are ticked
		   SELECT qsq1.question_id 
		     FROM csr.quick_survey_question qsq1, csr.v$quick_survey_answer qsa1           
		    WHERE qsa1.app_sid = qsr.app_sid
			  AND qsa1.survey_response_id = qsr.survey_response_id 
			  AND qsq1.parent_id = qsq.question_id
			  AND qsq1.question_id = qsa1.question_id
			  AND qsq1.survey_version = qsa1.survey_version
			  AND qsq1.is_visible = 1
			  AND qsa1.val_number = 1))
		OR (qsq.question_type = 'matrix'
		 AND EXISTS ( -- consider as unanswered if any of the options/matrix-rows are not filled
		   SELECT qsq1.question_id 
		     FROM csr.quick_survey_question qsq1, csr.quick_survey_answer qsa1           
			WHERE qsa1.app_sid = qsr.app_sid
			  AND qsa1.survey_response_id = qsr.survey_response_id
			  AND qsq1.parent_id = qsq.question_id
			  AND qsq1.question_id = qsa1.question_id
			  AND qsq1.survey_version = qsa1.survey_version
			  AND qsq1.is_visible = 1
			  AND qsa1.question_option_id IS NULL))
		);



-- *** Data changes ***
-- RLS
DECLARE
    FEATURE_NOT_ENABLED EXCEPTION;
    PRAGMA EXCEPTION_INIT(FEATURE_NOT_ENABLED, -439);
    POLICY_ALREADY_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT(POLICY_ALREADY_EXISTS, -28101);
	type t_tabs is table of varchar2(30);
	v_list t_tabs;
begin	
	v_list := t_tabs(
		'PRODUCT_TYPE',
		'COMPANY_PRODUCT_TYPE',
		'PRODUCT_TYPE_TAG'
	);
	for i in 1 .. v_list.count loop
		begin
			dbms_rls.add_policy(
				object_schema   => 'CHAIN',
				object_name     => v_list(i),
				policy_name     => SUBSTR(v_list(i), 1, 26) || '_POL', 
				function_schema => 'CHAIN',
				policy_function => 'appSidCheck',
				statement_types => 'select, insert, update, delete',
				update_check	=> true,
				policy_type     => dbms_rls.static);
		exception
			when policy_already_exists then
				DBMS_OUTPUT.PUT_LINE('RLS policy '||v_list(i)||' already exists');
			WHEN FEATURE_NOT_ENABLED THEN
				DBMS_OUTPUT.PUT_LINE('RLS policy '||v_list(i)||' not applied as feature not enabled');
		end;
	end loop;
end;
/

DECLARE
    FEATURE_NOT_ENABLED EXCEPTION;
    PRAGMA EXCEPTION_INIT(FEATURE_NOT_ENABLED, -439);
    POLICY_ALREADY_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT(POLICY_ALREADY_EXISTS, -28101);
    TYPE T_TABS IS TABLE OF VARCHAR2(30);
    v_list T_TABS;
BEGIN
    v_list := t_tabs(
        'QUICK_SURVEY_VERSION',
		'PROPERTY_TAB_MOBILE'
    );
    FOR I IN 1 .. v_list.count
    LOOP
        BEGIN
            DBMS_RLS.ADD_POLICY(
                object_schema   => 'CSR',
                object_name     => v_list(i),
                policy_name     => SUBSTR(v_list(i), 1, 23)||'_POLICY',
                function_schema => 'CSR',
                policy_function => 'appSidCheck',
                statement_types => 'select, insert, update, delete',
                update_check    => true,
                policy_type     => dbms_rls.context_sensitive );
                DBMS_OUTPUT.PUT_LINE('Policy added to '||v_list(i));
        EXCEPTION
            WHEN POLICY_ALREADY_EXISTS THEN
                DBMS_OUTPUT.PUT_LINE('Policy exists for '||v_list(i));
            WHEN FEATURE_NOT_ENABLED THEN
                DBMS_OUTPUT.PUT_LINE('RLS policies not applied for '||v_list(i)||' as feature not enabled');
        END;
    END LOOP;
END;
/

DECLARE
	FEATURE_NOT_ENABLED EXCEPTION;
	PRAGMA EXCEPTION_INIT(FEATURE_NOT_ENABLED, -439);
    POLICY_ALREADY_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT(POLICY_ALREADY_EXISTS, -28101);
BEGIN
 	FOR r IN (
		SELECT c.owner, c.table_name, c.nullable, (SUBSTR(c.table_name, 1, 26) || '_POL') policy_name
		  FROM all_tables t
		  JOIN all_tab_columns c ON t.owner = c.owner AND t.table_name = c.table_name
		 WHERE t.owner IN ('CMS', 'CSRIMP') AND (t.dropped = 'NO' OR t.dropped IS NULL) AND c.column_name = 'CSRIMP_SESSION_ID'
		   AND t.table_name IN ('QUICK_SURVEY_VERSION', 'CHAIN_PRODUCT_TYPE', 'CHAIN_COMPANY_PRODUCT_TYPE', 'CHAIN_PRODUCT_TYPE_TAG', 
		   'MAP_CHAIN_PRODUCT_TYPE', 'PROPERTY_TAB_MOBILE', 'MAP_PROPERTY_TAB_MOBILE')
 	)
 	LOOP
		dbms_output.put_line('Writing policy '||r.policy_name);
		dbms_rls.add_policy(
			object_schema   => r.owner,
			object_name     => r.table_name,
			policy_name     => r.policy_name, 
			function_schema => 'CSRIMP',
			policy_function => 'SessionIDCheck',
			statement_types => 'select, insert, update, delete',
			update_check	=> true,
			policy_type     => dbms_rls.context_sensitive);
	END LOOP;
EXCEPTION
	WHEN POLICY_ALREADY_EXISTS THEN
		DBMS_OUTPUT.PUT_LINE('Policy exists');
	WHEN FEATURE_NOT_ENABLED THEN
		DBMS_OUTPUT.PUT_LINE('RLS policies not applied as feature not enabled');
END;
/

-- Data

begin
	security.user_pkg.logonadmin;
	update security.securable_object set class_id=4 where class_id = security.class_pkg.GetClassId('CSRSurvey');
	for r in (select * from security.securable_object_class where parent_class_id=security.class_pkg.GetClassId('CSRSurvey')) loop
		security.class_pkg.DeleteClass(SYS_CONTEXT('SECURITY','ACT'), r.class_id);
	end loop;
	security.class_pkg.DeleteClass(SYS_CONTEXT('SECURITY','ACT'), security.class_pkg.GetClassId('CSRSurvey'));
end;
/

-- output from chain.card_pkg.dumpcard
DECLARE
v_card_id         chain.card.card_id%TYPE;
v_desc            chain.card.description%TYPE;
v_class           chain.card.class_type%TYPE;
v_js_path         chain.card.js_include%TYPE;
v_js_class        chain.card.js_class_type%TYPE;
v_css_path        chain.card.css_include%TYPE;
v_actions         chain.T_STRING_LIST;
BEGIN
-- Chain.Cards.Filters.CompanyProductFilter
v_desc := 'Chain Core Company Product Filter';
v_class := 'Credit360.Chain.Cards.Filters.CompanyProductFilter';
v_js_path := '/csr/site/chain/cards/filters/companyProductFilter.js';
v_js_class := 'Chain.Cards.Filters.CompanyProductFilter';
v_css_path := '';
BEGIN
INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
RETURNING card_id INTO v_card_id;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
UPDATE chain.card
SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
WHERE js_class_type = v_js_class
RETURNING card_id INTO v_card_id;
END;
DELETE FROM chain.card_progression_action
WHERE card_id = v_card_id
AND action NOT IN ('default');
v_actions := chain.T_STRING_LIST('default');
FOR i IN v_actions.FIRST .. v_actions.LAST
LOOP
BEGIN
INSERT INTO chain.card_progression_action (card_id, action)
VALUES (v_card_id, v_actions(i));
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END LOOP;
END;
/

declare
	v_card_id		NUMBER(10);
begin
	/*chain.filter_pkg.CreateFilterType (
		in_description => 'Chain Company Product Filter',
		in_helper_pkg => 'chain.company_filter_pkg',
		in_js_class_type => 'Chain.Cards.Filters.CompanyProductFilter'
	);*/
	
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE LOWER(js_class_type) = LOWER('Chain.Cards.Filters.CompanyProductFilter');
	
	BEGIN
		INSERT INTO chain.filter_type (
			filter_type_id,
			description,
			helper_pkg,
			card_id
		) VALUES (
			chain.filter_type_id_seq.NEXTVAL,
			'Chain Company Product Filter',
			'chain.company_filter_pkg',
			v_card_id
		);
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
end;
/
	
-- ** New package grants **

-- *** Packages ***
@..\meter_pkg
@..\schema_pkg
@..\property_pkg
@..\tag_pkg
@..\chain\product_pkg
@..\quick_survey_pkg
@..\chain\setup_pkg
@..\csrimp\imp_pkg

@..\meter_body
@..\property_body
@..\tag_body
@..\chain\product_body
@..\schema_body
@..\flow_body
@..\trash_body
@..\audit_body
@..\supplier_body
@..\csrimp\imp_body
@..\quick_survey_body
@..\chain\setup_body
@..\chain\company_filter_body
@..\csr_app_body

@update_tail
