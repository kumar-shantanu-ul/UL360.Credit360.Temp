-- Please update version.sql too -- this keeps clean builds in sync
define version=1856
@update_header

insert into csr.plugin_type (plugin_type_id, description) values (4, 'User Profile panels');

declare
    v_cnt number(10):=0;
begin
    FOR r IN (  
        select rm.ind_sid, rm.lookup_key, i.lookup_key ind_lookup_key
          from csr.region_metric rm
            join csr.ind i on rm.ind_sid = i.ind_sid
         where rm.lookup_Key is not null
    )
    LOOP
        IF r.ind_lookup_key is not null and r.ind_lookup_key != r.lookup_key THEN
            dbms_output.put_line('overwriting ind lookup_key '||r.ind_lookup_key||' with '||r.lookup_key||' where ind_sid = '||r.ind_sid);
        END IF;
        update csr.ind set lookup_key = r.lookup_key where ind_sid = r.ind_sid;
        v_cnt := v_cnt + 1;
    END LOOP;
    dbms_output.put_line('fixed: '||v_cnt);
end;
/

alter table csr.region_metric drop column lookup_key;

CREATE SEQUENCE CSR.ACTIVITY_TYPE_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.ACTIVITY_SUB_TYPE_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.ACTIVITY_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.ACTIVITY_POST_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.ACTIVITY_POST_FILE_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.ACTIVITY_MONEY_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.ACTIVITY_MEMBER_TIME_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.USER_FEED_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  
CREATE SEQUENCE CSR.MATCHED_GIVING_POLICY_ID_SEQ START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 5 NOORDER;  

-- per region??
CREATE TABLE CSR.MATCHED_GIVING_POLICY (
	APP_SID         			NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	MATCHED_GIVING_POLICY_ID	NUMBER(10)  NOT NULL,
	DESCRIPTION 				CLOB,
	CONSTRAINT PK_MATCHED_GIVING_POLICY PRIMARY KEY (APP_SID, MATCHED_GIVING_POLICY_ID)
);

CREATE TABLE CSR.ACTIVITY_TYPE (
	APP_SID         			NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_TYPE_ID 			NUMBER(10) 	NOT NULL,
	USE_FLOW_SID				NUMBER(10)	NOT NULL,
	LABEL						VARCHAR2(255) NOT NULL,
	LOOKUP_KEY					VARCHAR2(255),
	BASE_CSS_CLASS				VARCHAR2(255) NOT NULL,
	HIDDEN						NUMBER(1) DEFAULT 0 NOT NULL,
	TRACK_TIME					NUMBER(1) DEFAULT 0 NOT NULL,
	TRACK_MONEY					NUMBER(1) DEFAULT 0 NOT NULL,
	MATCHED_GIVING_POLICY_ID    NUMBER(10),
	CONSTRAINT FK_ACT_TYPE_FLOW FOREIGN KEY(APP_SID, USE_FLOW_SID) REFERENCES CSR.FLOW(APP_SID, FLOW_SID),
	CONSTRAINT FK_ACT_TYPE_MATCH FOREIGN KEY(APP_SID, MATCHED_GIVING_POLICY_ID) REFERENCES CSR.MATCHED_GIVING_POLICY(APP_SID, MATCHED_GIVING_POLICY_ID),
	CONSTRAINT CK_ACT_TYPE_TIME CHECK (TRACK_TIME IN (0,1)),
	CONSTRAINT CK_ACT_TYPE_MONEY CHECK (TRACK_MONEY IN (0,1)),
	CONSTRAINT CK_ACT_TYPE_HIDDEN CHECK (HIDDEN IN (0,1)),
	CONSTRAINT CK_ACT_TYPE_MATCHED CHECK (TRACK_MONEY = 1 OR (TRACK_MONEY = 0 AND MATCHED_GIVING_POLICY_ID IS NULL)),
	CONSTRAINT PK_ACTIVITY_TYPE PRIMARY KEY (APP_SID, ACTIVITY_TYPE_ID)
);

CREATE UNIQUE INDEX CSR.IX_ACTIVITY_TYPE_1 ON CSR.ACTIVITY_TYPE(APP_SID, LOWER(LABEL));
CREATE UNIQUE INDEX CSR.IX_ACTIVITY_TYPE_2 ON CSR.ACTIVITY_TYPE(APP_SID, LOWER(LOOKUP_KEY));

CREATE TABLE CSR.ACTIVITY_SUB_TYPE (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_SUB_TYPE_ID 	NUMBER(10) 	NOT NULL,
	ACTIVITY_TYPE_ID 		NUMBER(10) 	NOT NULL,
	LABEL					VARCHAR2(255) NOT NULL,
	BASE_CSS_CLASS			VARCHAR2(255) NOT NULL,
	HIDDEN					NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT FK_ACT_SUB_TYPE_ACT_TYPE FOREIGN KEY(APP_SID, ACTIVITY_TYPE_ID) REFERENCES CSR.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID),
	CONSTRAINT UK_ACTIVITY_SUB_TYPE UNIQUE (APP_SID, ACTIVITY_TYPE_ID, ACTIVITY_SUB_TYPE_ID),
	CONSTRAINT CK_ACT_SUB_TYPE_HIDDEN CHECK (HIDDEN IN (0,1)),
	CONSTRAINT PK_ACTIVITY_SUB_TYPE PRIMARY KEY (APP_SID, ACTIVITY_SUB_TYPE_ID)
);

CREATE UNIQUE INDEX CSR.IX_ACTIVITY_SUB_TYPE_1 ON CSR.ACTIVITY_SUB_TYPE(APP_SID, ACTIVITY_TYPE_ID, LOWER(LABEL));

CREATE TABLE CSR.ACTIVITY (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_ID 			NUMBER(10) 	NOT NULL,
	REGION_SID				NUMBER(10)	NOT NULL,
	FLOW_ITEM_ID			NUMBER(10)	NOT NULL,
	ACTIVITY_TYPE_ID		NUMBER(10)	NOT NULL,
	ACTIVITY_SUB_TYPE_ID	NUMBER(10),
	LABEL					VARCHAR2(255) NOT NULL,
	SHORT_LABEL				VARCHAR2(255) NOT NULL,
	DESCRIPTION				CLOB,
	CREATED_BY_SID			NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY','SID') NOT NULL,
	CREATED_DTM				DATE DEFAULT SYSDATE NOT NULL,
	START_DTM				DATE,
	END_DTM					DATE,
	OPEN_DTM				DATE,
	CLOSE_DTM				DATE,
	ACTIVE 					NUMBER(1) DEFAULT 1 NOT NULL,
	IS_MEMBERS_ONLY			NUMBER(1) DEFAULT 0 NOT NULL,
	IMG_DATA           		BLOB,
    IMG_SHA1           		RAW(20),
    IMG_LAST_MODIFIED_DTM	DATE,
    IMG_MIME_TYPE      		VARCHAR2(2000),    
	CONSTRAINT FK_ACTIVITY_FLOW_ITEM FOREIGN KEY(APP_SID, FLOW_ITEM_ID) REFERENCES CSR.FLOW_ITEM(APP_SID, FLOW_ITEM_ID),
	CONSTRAINT FK_ACTIVITY_ACT_TYPE FOREIGN KEY(APP_SID, ACTIVITY_TYPE_ID) REFERENCES CSR.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID),
	CONSTRAINT FK_ACTIVITY_ACT_SUB_TYPE FOREIGN KEY(APP_SID, ACTIVITY_TYPE_ID, ACTIVITY_SUB_TYPE_ID) REFERENCES CSR.ACTIVITY_SUB_TYPE(APP_SID, ACTIVITY_TYPE_ID, ACTIVITY_SUB_TYPE_ID),
	CONSTRAINT FK_ACTIVITY_USER FOREIGN KEY(APP_SID, CREATED_BY_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID),
	CONSTRAINT FK_ACTIVITY_REGION FOREIGN KEY(APP_SID, REGION_SID) REFERENCES CSR.REGION(APP_SID, REGION_SID),
	CONSTRAINT CK_ACTIVITY_OPEN_DTM CHECK (OPEN_DTM IS NULL OR CLOSE_DTM IS NULL OR CLOSE_DTM > OPEN_DTM),
	CONSTRAINT CK_ACTIVITY_START_DTM CHECK (START_DTM IS NULL OR END_DTM IS NULL OR END_DTM > START_DTM),
	CONSTRAINT CK_ACTIVITY_MEM_ONLY CHECK (IS_MEMBERS_ONLY IN (0,1)),
	CONSTRAINT CK_ACTIVITY_ACTIVE CHECK (ACTIVE IN (0,1)),
	CONSTRAINT CK_ACTIVITY_IMG CHECK ((IMG_DATA IS NULL AND IMG_SHA1 IS NULL AND IMG_LAST_MODIFIED_DTM IS NULL AND IMG_MIME_TYPE IS NULL) OR (IMG_DATA IS NOT NULL AND IMG_SHA1 IS NOT NULL AND IMG_LAST_MODIFIED_DTM IS NOT NULL AND IMG_MIME_TYPE IS NOT NULL)),
	CONSTRAINT PK_ACTIVITY PRIMARY KEY (APP_SID, ACTIVITY_ID)
);

CREATE TABLE CSR.ACTIVITY_SHOWCASE (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_ID 			NUMBER(10) 	NOT NULL,
	CONSTRAINT FK_ACT_SHOWCASE_ACTIVITY FOREIGN KEY(APP_SID, ACTIVITY_ID) REFERENCES CSR.ACTIVITY(APP_SID, ACTIVITY_ID),
	CONSTRAINT PK_ACT_SHOWCASE PRIMARY KEY (APP_SID, ACTIVITY_ID)
);

CREATE TABLE CSR.ACTIVITY_MEMBER (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_ID 			NUMBER(10) 	NOT NULL,
	USER_SID 				NUMBER(10) 	NOT NULL,
	STATUS_LABEL			VARCHAR2(1024),
	IS_OWNER				NUMBER(1)	DEFAULT 0 NOT NULL,
	ACTIVE					NUMBER(1)	DEFAULT 1 NOT NULL,
	COMPLETED				NUMBER(1)	DEFAULT 0 NOT NULL,
	JOINED_DTM				DATE,
	CONSTRAINT CK_ACT_MEMBER_OWNER CHECK (IS_OWNER IN (0,1)),
	CONSTRAINT CK_ACT_MEMBER_ACTIVE CHECK (ACTIVE IN (0,1)),
	CONSTRAINT CK_ACT_MEMBER_COMPLETED CHECK (COMPLETED IN (0,1)),
	CONSTRAINT FK_ACTIVITY_MEMBER_ACTIVITY FOREIGN KEY(APP_SID, ACTIVITY_ID) REFERENCES CSR.ACTIVITY(APP_SID, ACTIVITY_ID),
	CONSTRAINT PK_ACTIVITY_MEMBER PRIMARY KEY (APP_SID, ACTIVITY_ID, USER_SID)
);

-- for time you need to be a member of the activity
CREATE TABLE CSR.ACTIVITY_MEMBER_TIME (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_MEMBER_TIME_ID NUMBER(10)	NOT NULL,
	ACTIVITY_ID 			NUMBER(10) 	NOT NULL,
	USER_SID 				NUMBER(10) 	NOT NULL,
	DESCRIPTION				VARCHAR2(1024) NOT NULL,
	HOURS					NUMBER(10,2) NOT NULL,
	DTM 					DATE NOT NULL,
	CONSTRAINT FK_ACT_MEMBER_TIME_USER FOREIGN KEY (APP_SID, ACTIVITY_ID, USER_SID) REFERENCES CSR.ACTIVITY_MEMBER(APP_SID, ACTIVITY_ID, USER_SID) ON DELETE CASCADE,
	CONSTRAINT PK_ACTIVITY_MEMBER_TIME PRIMARY KEY (APP_SID, ACTIVITY_MEMBER_TIME_ID)
);

-- anyone can add money to an activity
CREATE TABLE CSR.ACTIVITY_MONEY (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_MONEY_ID 		NUMBER(10)	NOT NULL,
	ACTIVITY_ID 			NUMBER(10) 	NOT NULL,
	USER_SID 				NUMBER(10) 	NOT NULL,
	DESCRIPTION				VARCHAR2(1024) NOT NULL,
	AMOUNT					NUMBER(24,2) NOT NULL,
	CURRENCY_CODE    		VARCHAR2(10) NOT NULL,
	IS_ANONYMOUS			NUMBER(1) DEFAULT 0 NOT NULL,
	DTM 					DATE NOT NULL,
	CONSTRAINT FK_ACT_MONEY_ACTIVITY FOREIGN KEY (APP_SID, ACTIVITY_ID) REFERENCES CSR.ACTIVITY(APP_SID, ACTIVITY_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ACT_MONEY_USER FOREIGN KEY (APP_SID, USER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT FK_ACT_MONEY_CURRENCY FOREIGN KEY (APP_SID, CURRENCY_CODE) REFERENCES CSR.CURRENCY(APP_SID, CURRENCY_CODE),
	CONSTRAINT PK_ACTIVITY_MONEY PRIMARY KEY (APP_SID, ACTIVITY_MONEY_ID)
);

CREATE TABLE CSR.ACTIVITY_POST (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_POST_ID 		NUMBER(10)  NOT NULL,
	ACTIVITY_ID 			NUMBER(10) 	NOT NULL,
	USER_SID 				NUMBER(10) 	NOT NULL,
	POST_TEXT				CLOB NOT NULL, 					
	POST_DTM				DATE DEFAULT SYSDATE NOT NULL,
	CONSTRAINT FK_ACTIVITY_POST FOREIGN KEY (APP_SID, ACTIVITY_ID, USER_SID) REFERENCES CSR.ACTIVITY_MEMBER(APP_SID, ACTIVITY_ID, USER_SID),
	CONSTRAINT PK_ACTIVITY_POST PRIMARY KEY (APP_SID, ACTIVITY_POST_ID)	
);

CREATE TABLE CSR.ACTIVITY_POST_FILE (
	APP_SID         				NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_POST_FILE_ID 	NUMBER(10)  NOT NULL,
	ACTIVITY_POST_ID 		NUMBER(10)  NOT NULL,
	FILENAME				VARCHAR2(2000) NOT NULL,
    DATA           			BLOB NOT NULL,
    SHA1           			RAW(20) NOT NULL,
    MIME_TYPE      			VARCHAR2(2000) NOT NULL,
	CONSTRAINT FK_ACT_POST_FILE_ACT_POST FOREIGN KEY (APP_SID, ACTIVITY_POST_ID) REFERENCES CSR.ACTIVITY_POST(APP_SID, ACTIVITY_POST_ID) ON DELETE CASCADE,
	CONSTRAINT PK_ACTIVITY_POST_FILE PRIMARY KEY (APP_SID, ACTIVITY_POST_FILE_ID)	
);

CREATE TABLE CSR.ACTIVITY_LIKE (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_ID				NUMBER(10) 	NOT NULL,
	LIKED_BY_USER_SID		NUMBER(10) 	NOT NULL,
	LIKED_DTM				DATE DEFAULT SYSDATE NOT NULL,
	CONSTRAINT FK_ACT_LIKE_USER FOREIGN KEY (APP_SID, LIKED_BY_USER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT FK_ACT_LIKE_ACT_POST FOREIGN KEY (APP_SID, ACTIVITY_ID) REFERENCES CSR.ACTIVITY(APP_SID, ACTIVITY_ID) ON DELETE CASCADE,
	CONSTRAINT PK_ACTIVITY_LIKE PRIMARY KEY (APP_SID, ACTIVITY_ID, LIKED_BY_USER_SID)	
);

CREATE TABLE CSR.ACTIVITY_POST_LIKE (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_POST_ID		NUMBER(10) 	NOT NULL,
	LIKED_BY_USER_SID		NUMBER(10) 	NOT NULL,
	LIKED_DTM				DATE DEFAULT SYSDATE NOT NULL,
	CONSTRAINT FK_ACT_POST_LIKE_USER FOREIGN KEY (APP_SID, LIKED_BY_USER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT FK_ACT_POST_LIKE_ACT_POST FOREIGN KEY (APP_SID, ACTIVITY_POST_ID) REFERENCES CSR.ACTIVITY_POST(APP_SID, ACTIVITY_POST_ID) ON DELETE CASCADE,
	CONSTRAINT PK_ACTIVITY_POST_LIKE PRIMARY KEY (APP_SID, ACTIVITY_POST_ID, LIKED_BY_USER_SID)	
);

CREATE TABLE CSR.USER_FOLLOWER (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	USER_SID				NUMBER(10) 	NOT NULL,
	FOLLOWER_SID			NUMBER(10) 	NOT NULL,
	FOLLOWED_DTM			DATE DEFAULT SYSDATE NOT NULL,
	CONSTRAINT FK_USER_FOLLOWER_USER_1 FOREIGN KEY (APP_SID, USER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT FK_USER_FOLLOWER_USER_2 FOREIGN KEY (APP_SID, FOLLOWER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT PK_USER_FOLLOWER PRIMARY KEY (APP_SID, USER_SID, FOLLOWER_SID)	
);

CREATE UNIQUE INDEX CSR.IX_USER_FOLLOWER_1 ON CSR.USER_FOLLOWER(APP_SID, FOLLOWER_SID);
CREATE UNIQUE INDEX CSR.IX_USER_FOLLOWER_2 ON CSR.USER_FOLLOWER(APP_SID, USER_SID);

CREATE TABLE CSR.ACTIVITY_FOLLOWER (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	ACTIVITY_ID				NUMBER(10) 	NOT NULL,
	FOLLOWER_SID			NUMBER(10) 	NOT NULL,
	FOLLOWED_DTM			DATE DEFAULT SYSDATE NOT NULL,
	CONSTRAINT FK_ACTIVITY_FOLLOWER_ACTIVITY FOREIGN KEY (APP_SID, ACTIVITY_ID) REFERENCES CSR.ACTIVITY(APP_SID, ACTIVITY_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ACTIVITY_FOLLOWER_USER_2 FOREIGN KEY (APP_SID, FOLLOWER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT PK_ACTIVITY_FOLLOWER PRIMARY KEY (APP_SID, ACTIVITY_ID, FOLLOWER_SID)	
);

CREATE INDEX CSR.IX_ACTIVITY_FOLLOWER_1 ON CSR.ACTIVITY_FOLLOWER(APP_SID, FOLLOWER_SID);
CREATE INDEX CSR.IX_ACTIVITY_FOLLOWER_2 ON CSR.ACTIVITY_FOLLOWER(APP_SID, ACTIVITY_ID);

ALTER TABLE CSR.CSR_USER ADD (
    AVATAR           			BLOB,
    AVATAR_LAST_MODIFIED_DTM    DATE,
    AVATAR_SHA1    				RAW(20),
    AVATAR_MIME_TYPE      		VARCHAR2(2000),
    CONSTRAINT CK_USER_AVATAR CHECK ((AVATAR IS NULL AND AVATAR_LAST_MODIFIED_DTM IS NULL AND AVATAR_SHA1 IS NULL AND AVATAR_MIME_TYPE IS NULL)
    	OR (AVATAR IS NOT NULL AND AVATAR_LAST_MODIFIED_DTM IS NOT NULL AND AVATAR_SHA1 IS NOT NULL AND AVATAR_MIME_TYPE IS NOT NULL))
);

-- hack
/*
CREATE TABLE CSR.CSR_USER_PROFILE (
	APP_SID         			NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	CSR_USER_SID				NUMBER(10) NOT NULL, 
    AVATAR           			BLOB,
    AVATAR_LAST_MODIFIED_DTM    DATE,
    AVATAR_SHA1    				RAW(20),
    AVATAR_MIME_TYPE      		VARCHAR2(2000),
    CONSTRAINT CK_USER_AVATAR CHECK ((AVATAR IS NULL AND AVATAR_LAST_MODIFIED_DTM IS NULL AND AVATAR_SHA1 IS NULL AND AVATAR_MIME_TYPE IS NULL)
    	OR (AVATAR IS NOT NULL AND AVATAR_LAST_MODIFIED_DTM IS NOT NULL AND AVATAR_SHA1 IS NOT NULL AND AVATAR_MIME_TYPE IS NOT NULL)),
    CONSTRAINT PK_CSR_USER_PROFILE PRIMARY KEY (APP_SID, CSR_USER_SID)
);
*/

-- new
CREATE TABLE CSR.USER_FEED_ACTION (
	USER_FEED_ACTION_ID		NUMBER(10) NOT NULL,
	LABEL 					VARCHAR2(255) NOT NULL,
	ACTION_URL				VARCHAR2(2048),
	ACTION_TEXT  			VARCHAR2(2048),
	ACTION_IMG_URL 			VARCHAR2(2048),
	CONSTRAINT PK_USER_FEED_ACTION PRIMARY KEY (USER_FEED_ACTION_ID)
);

BEGIN
	INSERT INTO CSR.USER_FEED_ACTION (USER_FEED_ACTION_ID, LABEL, ACTION_URL, ACTION_TEXT, ACTION_IMG_URL)
		VALUES (1, 'Activity Post', '/csr/site/activity/activity.acds?id={targetActivityId}', '{actingUserFullName} posted an update on the {targetActivity} activity','/csr/site/activity/activityImage.ashx?id={targetParam1}');
	INSERT INTO CSR.USER_FEED_ACTION (USER_FEED_ACTION_ID, LABEL, ACTION_URL, ACTION_TEXT, ACTION_IMG_URL)
		VALUES (2, 'Activity Like', '/csr/site/activity/activity.acds?id={targetActivityId}', '{actingUserFullName} liked the {targetActivity} activity','/csr/site/activity/activityImage.ashx?id={targetActivityId}');
	INSERT INTO CSR.USER_FEED_ACTION (USER_FEED_ACTION_ID, LABEL, ACTION_URL, ACTION_TEXT, ACTION_IMG_URL)
		VALUES (3, 'Activity Follow', '/csr/site/activity/activity.acds?id={targetActivityId}', '{actingUserFullName} followed the {targetActivity} activity','/csr/site/activity/activityImage.ashx?id={targetActivityId}');
	-- join activity 
	-- complete activity 
	-- log time
END;
/

CREATE TABLE CSR.USER_PROFILE_PANEL (
    APP_SID         NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    PLUGIN_ID       NUMBER(10, 0) NOT NULL,
    PLUGIN_TYPE_ID  NUMBER(10, 0) DEFAULT 4 NOT NULL,
    POS             NUMBER(10, 0) NOT NULL,
    LABEL           VARCHAR2(50),
    CONSTRAINT PK_USER_PROFILE_PANEL PRIMARY KEY (APP_SID, PLUGIN_ID),
    CONSTRAINT FK_USER_PROFILE_PANEL_PLUGIN FOREIGN KEY (PLUGIN_ID, PLUGIN_TYPE_ID) REFERENCES CSR.PLUGIN(PLUGIN_ID, PLUGIN_TYPE_ID),
    CONSTRAINT CHK_USER_PROF_PNL_PLUGIN_TYPE CHECK (PLUGIN_TYPE_ID=4)
);

CREATE TABLE CSR.USER_FEED (
	APP_SID         		NUMBER(10)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	USER_FEED_ID 			NUMBER(10) 	NOT NULL,
	ACTING_USER_SID			NUMBER(10) 	DEFAULT SYS_CONTEXT('SECURITY','SID') NOT NULL,
	TARGET_USER_SID			NUMBER(10),
	TARGET_ACTIVITY_ID		NUMBER(10),
	USER_FEED_ACTION_ID		NUMBER(10) 	NOT NULL,
	ACTION_DTM				DATE DEFAULT SYSDATE NOT NULL,
	TARGET_PARAM_1			VARCHAR2(2048),
	TARGET_PARAM_2			VARCHAR2(2048),
	TARGET_PARAM_3			VARCHAR2(2048),
	CONSTRAINT FK_USER_FEED_USER_1 FOREIGN KEY (APP_SID, ACTING_USER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT FK_USER_FEED_USER_2 FOREIGN KEY (APP_SID, TARGET_USER_SID) REFERENCES CSR.CSR_USER(APP_SID, CSR_USER_SID) ON DELETE CASCADE,
	CONSTRAINT FK_USER_FEED_ACTIVITY FOREIGN KEY (APP_SID, TARGET_ACTIVITY_ID) REFERENCES CSR.ACTIVITY(APP_SID, ACTIVITY_ID) ON DELETE CASCADE,
	CONSTRAINT FK_USR_FEED_USR_FEED_ACTION FOREIGN KEY (USER_FEED_ACTION_ID) REFERENCES CSR.USER_FEED_ACTION(USER_FEED_ACTION_ID),
	CONSTRAINT PK_USER_FEED PRIMARY KEY (APP_SID, USER_FEED_ID)	
);



CREATE OR REPLACE VIEW CSR.V$ACTIVITY AS 
    SELECT a.app_sid, a.activity_id, 
        a.region_sid, r.description region_description,
        a.label, a.short_label, a.description, 
        a.activity_type_Id, t.label activity_type_label,
        a.activity_sub_type_Id, st.label activity_sub_type_label,
        a.created_by_sid, cu.full_name created_by_name, a.created_dtm, 
        a.flow_item_id, fs.flow_state_Id, fs.label flow_state_label, fs.state_colour, 
        c.name country_name, c.currency country_currency,
        t.track_time, t.track_money, NVL(st.base_css_class, t.base_css_class) base_css_class,
        CASE WHEN (open_dtm IS NULL OR SYSDATE >= open_dtm) AND (close_dtm IS NULL OR SYSDATE < close_dtm) THEN 1 ELSE 0 END is_running,
        a.start_dtm, a.end_dtm, a.open_dtm, a.close_dtm, a.is_members_only, a.active, t.matched_giving_policy_id,
        a.img_last_modified_dtm, a.img_sha1, a.img_mime_type
      FROM activity a
      JOIN v$region r ON a.region_sid = r.region_sid AND a.app_sid = r.app_sid
      JOIN activity_type t ON a.activity_type_id = t.activity_type_id AND a.app_sid = t.app_sid
      JOIN flow_item fi ON a.flow_item_id = fi.flow_item_id AND a.app_sid = fi.app_sid
      JOIN flow_state fs ON fi.current_state_id = fs.flow_state_id
      JOIN csr_user cu ON a.created_by_sid = cu.csr_user_sid AND a.app_sid = cu.app_sid
      LEFT JOIN activity_sub_type st ON a.activity_sub_type_id = st.activity_sub_type_id AND a.activity_type_id = st.activity_type_id AND a.app_sid = t.app_sid
      LEFT JOIN postcode.country c ON r.geo_country = c.country;

CREATE OR REPLACE VIEW CSR.V$MY_ACTIVITY AS
	SELECT a.app_sid, a.activity_id, a.region_sid, a.region_description, a.label, a.short_label, a.description,
		a.activity_type_Id, a.activity_type_label, a.activity_sub_type_Id, a.activity_sub_type_label, a.created_by_sid,
		a.created_by_name, a.created_dtm, a.flow_item_id, a.flow_state_Id, a.flow_state_label, a.state_colour, a.country_name,
		a.country_currency, a.track_time, a.track_money, a.base_css_class, a.is_running, a.start_dtm, a.end_dtm, a.open_dtm,
		a.close_dtm, a.is_members_only, a.active
	  FROM v$activity a
	  JOIN activity_member am ON a.activity_id = am.activity_id AND a.app_sid = am.app_sid         
	 WHERE am.user_sid = SYS_CONTEXT('SECURITY','SID')
	   AND a.active = 1
	   AND a.is_running = 1;

CREATE OR REPLACE VIEW CSR.V$USER_FEED AS
    SELECT uf.user_feed_id, uf.action_dtm, 
    	uf.acting_user_sid, cua.full_name acting_user_full_name,
        uf.target_user_sid, cut.full_name target_user_full_name, 
        uf.target_activity_id, a.label target_activity,
        target_param_1, target_param_2, target_param_3,
        ufa.action_text, ufa.action_url, ufa.label action_label, ufa.action_img_url
      FROM user_feed uf
      JOIN user_feed_action ufa ON uf.user_feed_action_id = ufa.user_feed_action_id
      JOIN csr_user cua ON uf.acting_user_sid = cua.csr_user_sid AND uf.app_sid = cua.app_sid
      LEFT JOIN csr_user cut ON uf.target_user_sid = cut.csr_user_sid AND uf.app_sid = cut.app_sid
      LEFT JOIN activity a ON uf.target_activity_id = a.activity_id AND uf.app_sid = a.app_sid
     ;

declare
	policy_already_exists exception;
	pragma exception_init(policy_already_exists, -28101);
	type t_tabs is table of varchar2(30);
	v_list t_tabs;
begin	
	v_list := t_tabs(
		'ACTIVITY',
		'ACTIVITY_FOLLOWER',
		'ACTIVITY_MEMBER',
		'ACTIVITY_MEMBER_TIME',
		'ACTIVITY_MONEY',
		'ACTIVITY_POST',
		'ACTIVITY_POST_FILE',
		'ACTIVITY_POST_LIKE',
		'ACTIVITY_SHOWCASE',
		'ACTIVITY_SUB_TYPE',
		'ACTIVITY_TYPE',
		'USER_FEED',
		'USER_FOLLOWER',
		'MATCHED_GIVING_POLICY',
		'USER_PROFILE_PANEL'--,
--		'CSR_USER_PROFILE' -- hack
	);
	for i in 1 .. v_list.count loop
		begin			
		    dbms_rls.add_policy(
		        object_schema   => 'CSR',
		        object_name     => v_list(i),
		        policy_name     => SUBSTR(v_list(i), 1, 23)||'_POLICY',
		        function_schema => 'CSR',
		        policy_function => 'appSidCheck',
		        statement_types => 'select, insert, update, delete',
		        update_check	=> true,
		        policy_type     => dbms_rls.context_sensitive );
		    	dbms_output.put_line('Policy added to '||v_list(i));
		exception
			when policy_already_exists then
				dbms_output.put_line('Policy exists for '||v_list(i));				
		end;
	end loop;
end;
/


CREATE FUNCTION csr.SetPlugin(
	in_plugin_type_id	IN 	plugin.plugin_type_id%TYPE,
	in_js_class			IN  plugin.js_class%TYPE,
	in_description		IN  plugin.description%TYPE,
	in_js_include		IN  plugin.js_include%TYPE,
	in_cs_class			IN  plugin.cs_class%TYPE DEFAULT 'Credit360.Plugins.PluginDto'
) RETURN plugin.plugin_id%TYPE
AS
	v_plugin_id		plugin.plugin_id%TYPE;
BEGIN
	BEGIN
		INSERT INTO csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class)
			 VALUES (csr.plugin_id_seq.nextval, in_plugin_type_id, in_description,  in_js_include, in_js_class, in_cs_class)
		  RETURNING plugin_id INTO v_plugin_id;
	EXCEPTION WHEN dup_val_on_index THEN
		UPDATE csr.plugin 
		   SET description = in_description,
		   	js_include = in_js_include,
		   	cs_class = in_cs_class
		 WHERE plugin_type_id = in_plugin_type_id
		   AND js_class = in_js_class
	    RETURNING plugin_id INTO v_plugin_id;
	END;
	  
	RETURN v_plugin_id;
END;
/


DECLARE
    v_plugin_id     csr.plugin.plugin_id%TYPE;
BEGIN
    -- your feed
    v_plugin_id := csr.SetPlugin(
        in_plugin_type_id   => 4, --csr.csr_data_pkg.PLUGIN_TYPE_USER_PROFILE_PANEL,
        in_js_class         => 'Activity.MyFeedPanel',
        in_description      => 'My feed',
        in_js_include       => '/csr/site/activity/controls/MyFeedPanel.js',
        in_cs_class         => 'Credit360.UserProfile.MyFeedDto'
    );
    -- your activities
    v_plugin_id := csr.SetPlugin(
        in_plugin_type_id   => 4, --csr.csr_data_pkg.PLUGIN_TYPE_USER_PROFILE_PANEL,
        in_js_class         => 'Activity.MyActivitiesPanel',
        in_description      => 'My activities',
        in_js_include       => '/csr/site/activity/controls/MyActivitiesPanel.js',
        in_cs_class         => 'Credit360.UserProfile.MyActivitiesDto'
    );
END;
/

drop function csr.setplugin;


BEGIN
INSERT INTO CSR.CAPABILITY (NAME, ALLOW_BY_DEFAULT) VALUES ('Activity management', 0);
INSERT INTO CSR.CAPABILITY (NAME, ALLOW_BY_DEFAULT) VALUES ('View all avatars', 0);
END;
/


CREATE OR REPLACE PACKAGE CSR.plugin_pkg
AS
END;
/

GRANT EXECUTE ON csr.plugin_pkg TO WEB_USER;

CREATE OR REPLACE PACKAGE CSR.activity_pkg
AS
END;
/

GRANT EXECUTE ON csr.activity_pkg TO WEB_USER;


CREATE OR REPLACE PACKAGE CSR.user_profile_pkg
AS
END;
/

GRANT EXECUTE ON csr.user_profile_pkg TO WEB_USER;


@..\region_metric_pkg
@..\property_pkg
@..\plugin_pkg
@..\activity_pkg
@..\csr_data_pkg
@..\user_profile_pkg

@..\region_metric_body
@..\property_body
@..\plugin_body
@..\activity_body
@..\user_profile_body

@update_tail
