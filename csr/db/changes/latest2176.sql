-- Please update version.sql too -- this keeps clean builds in sync
define version=2176
@update_header

DECLARE
	v_exists number;
BEGIN
	SELECT count(*)
	  INTO v_exists
	  FROM all_indexes
	 WHERE owner='CHAIN'
	   AND index_name='UK_CTC_UNIQUE_PERMISSION_SET'
	   AND uniqueness = 'UNIQUE';
  
	IF v_exists = 0 THEN
		DELETE FROM CHAIN.COMPANY_TYPE_CAPABILITY
		 WHERE (app_sid, primary_company_type_id, secondary_company_type_id, primary_company_group_type_id, capability_id, tertiary_company_type_id, permission_set)
		NOT IN (
			SELECT app_sid, primary_company_type_id, secondary_company_type_id, primary_company_group_type_id, capability_id, tertiary_company_type_id, MIN(permission_set) AS permission_set
			  FROM CHAIN.COMPANY_TYPE_CAPABILITY
			 GROUP BY app_sid, primary_company_type_id, secondary_company_type_id, primary_company_group_type_id, capability_id, tertiary_company_type_id
		);
		

		DELETE FROM CHAIN.COMPANY_TYPE_CAPABILITY
	   	 WHERE ROWID
	    NOT IN (
			 SELECT MIN(ROWID)
			  FROM CHAIN.COMPANY_TYPE_CAPABILITY
			 GROUP BY app_sid, primary_company_type_id, secondary_company_type_id, primary_company_group_type_id, capability_id, tertiary_company_type_id
		);

		EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX CHAIN.UK_CTC_UNIQUE_PERMISSION_SET ON CHAIN.COMPANY_TYPE_CAPABILITY(APP_SID, PRIMARY_COMPANY_TYPE_ID, PRIMARY_COMPANY_GROUP_TYPE_ID, CAPABILITY_ID, NVL2(SECONDARY_COMPANY_TYPE_ID, NVL2(TERTIARY_COMPANY_TYPE_ID, ''T'' || TERTIARY_COMPANY_TYPE_ID || ''R'' || SECONDARY_COMPANY_TYPE_ID, ''R'' || SECONDARY_COMPANY_TYPE_ID), ''C'' || PRIMARY_COMPANY_TYPE_ID))';
	END IF;
END;
/


-- *** DDL ***
-- Create tables
CREATE TABLE CHAIN.COMPANY_TYPE_ROLE(
	APP_SID				NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	COMPANY_TYPE_ID		NUMBER(10, 0)	NOT NULL,
	ROLE_SID			NUMBER(10, 0)	NOT NULL,
	MANDATORY			NUMBER(1)		DEFAULT 1 NOT NULL,
	CASCADE_TO_SUPPLIER	NUMBER(1)		DEFAULT 0 NOT NULL,
	POS					NUMBER(10)		NOT NULL,
	CONSTRAINT CHK_CMPY_TYP_RL_MAND 	CHECK (MANDATORY IN (0,1)),
	CONSTRAINT CHK_CMPY_TYP_RL_CAC2SUP 	CHECK (CASCADE_TO_SUPPLIER IN (0,1)),
	CONSTRAINT FK_CMPY_TYP_RL_ROLE		FOREIGN KEY (APP_SID, ROLE_SID) REFERENCES CSR.ROLE (APP_SID, ROLE_SID),
	CONSTRAINT FK_CMPY_TYP_RL_CMPY_TYP	FOREIGN KEY (APP_SID, COMPANY_TYPE_ID) REFERENCES CHAIN.COMPANY_TYPE (APP_SID, COMPANY_TYPE_ID),
	CONSTRAINT PK_COMPANY_TYPE_ROLE		PRIMARY KEY (APP_SID, COMPANY_TYPE_ID, ROLE_SID)
);

CREATE SEQUENCE CHAIN.ACTIVITY_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE SEQUENCE CHAIN.ACTIVITY_LOG_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;
	
CREATE SEQUENCE CHAIN.ACTIVITY_LOG_FILE_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE SEQUENCE CHAIN.ACTIVITY_TYPE_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;
	
CREATE SEQUENCE CHAIN.ACTIVITY_TYPE_ACTION_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;
	
CREATE SEQUENCE CHAIN.ACTIVITY_OUTCM_TYP_ACTN_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE SEQUENCE CHAIN.OUTCOME_TYPE_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE TABLE CHAIN.ACTIVITY(
    APP_SID                   NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_ID               NUMBER(10, 0)     NOT NULL,
	DESCRIPTION               CLOB              NOT NULL,
    TARGET_COMPANY_SID        NUMBER(10, 0)     NOT NULL,
    CREATED_BY_COMPANY_SID    NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'CHAIN_COMPANY') NOT NULL,
    ACTIVITY_TYPE_ID          NUMBER(10, 0)     NOT NULL,
    ASSIGNED_TO_USER_SID      NUMBER(10, 0)     NOT NULL,
    TARGET_USER_SID           NUMBER(10, 0),
    ACTIVITY_DTM              DATE              NOT NULL,
    ORIGINAL_ACTIVITY_DTM     DATE              NOT NULL,
    CREATED_DTM               DATE              DEFAULT SYSDATE NOT NULL,
    CREATED_BY_ACTIVITY_ID    NUMBER(10, 0),
    CREATED_BY_SID            NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','SID') NOT NULL,
    OUTCOME_TYPE_ID           NUMBER(10, 0),
    OUTCOME_REASON            CLOB,
    LOCATION                  VARCHAR2(1000),
    LOCATION_TYPE             NUMBER(10, 0),
    CONSTRAINT PK_ACTIVITY PRIMARY KEY (APP_SID, ACTIVITY_ID),
    CONSTRAINT UK_ACTIVITY UNIQUE (APP_SID, ACTIVITY_ID,ACTIVITY_TYPE_ID)
);

CREATE TABLE CHAIN.ACTIVITY_OUTCOME_TYPE(
    APP_SID             NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    OUTCOME_TYPE_ID     NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ACTIVITY_OUTCOME_TYPE PRIMARY KEY (APP_SID, ACTIVITY_TYPE_ID, OUTCOME_TYPE_ID)
);

CREATE TABLE CHAIN.ACTIVITY_OUTCOME_TYPE_ACTION(
    APP_SID                            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_OUTCOME_TYP_ACTION_ID     NUMBER(10, 0)    NOT NULL,
    ACTIVITY_TYPE_ID                   NUMBER(10, 0)    NOT NULL,
    OUTCOME_TYPE_ID                    NUMBER(10, 0)    NOT NULL,
    GENERATE_ACTIVITY_TYPE_ID          NUMBER(10, 0)    NOT NULL,
    ALLOW_USER_INTERACTION             NUMBER(1, 0)     DEFAULT 0,
    CONSTRAINT CHK_ACT_OUT_ACT_ALLOW_USR_INT CHECK (ALLOW_USER_INTERACTION IN (0,1)),
    CONSTRAINT PK_ACTIVITY_OUTCOME_TYPE_ACTN PRIMARY KEY (APP_SID, ACTIVITY_OUTCOME_TYP_ACTION_ID),
	CONSTRAINT UK_ACTIVITY_OUTCOME_TYPE_ACTN UNIQUE (APP_SID, ACTIVITY_TYPE_ID, OUTCOME_TYPE_ID, GENERATE_ACTIVITY_TYPE_ID)
);

CREATE TABLE CHAIN.ACTIVITY_TAG(
    APP_SID             NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_ID         NUMBER(10, 0)    NOT NULL,
    TAG_ID              NUMBER(10, 0)    NOT NULL,
    ACTIVITY_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    TAG_GROUP_ID        NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ACTIVITY_TAG PRIMARY KEY (APP_SID, ACTIVITY_ID, TAG_ID)
);

CREATE TABLE CHAIN.ACTIVITY_TYPE_ALERT(
    APP_SID                   NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_TYPE_ID          NUMBER(10, 0)    NOT NULL,
    CUSTOMER_ALERT_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    LABEL                     VARCHAR2(255)    NOT NULL,
    USE_SUPPLIER_COMPANY      NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    ALLOW_MANUAL_EDITING      NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    CONSTRAINT PK_ACTIVITY_TYPE_ALERT PRIMARY KEY (APP_SID, ACTIVITY_TYPE_ID, CUSTOMER_ALERT_TYPE_ID)
);

CREATE TABLE CHAIN.ACTIVITY_TYPE_ALERT_ROLE(
    APP_SID                   NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    ACTIVITY_TYPE_ID          NUMBER(10, 0)    NOT NULL,
    CUSTOMER_ALERT_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    ROLE_SID                  NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ACTIVITY_TYPE_ALERT_ROLE PRIMARY KEY (ACTIVITY_TYPE_ID, CUSTOMER_ALERT_TYPE_ID, ROLE_SID, APP_SID)
);

CREATE TABLE CHAIN.ACTIVITY_TYPE_DEFAULT_USER(
    APP_SID             NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    USER_SID            NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ACTIVITY_TYPE_DEFAULT_USER PRIMARY KEY (APP_SID, ACTIVITY_TYPE_ID, USER_SID)
);

CREATE TABLE CHAIN.ACTIVITY_TYPE_TAG_GROUP(
    APP_SID             NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    TAG_GROUP_ID        NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ACTIVITY_TYPE_TAG_GROUP PRIMARY KEY (APP_SID, ACTIVITY_TYPE_ID, TAG_GROUP_ID)
);

CREATE TABLE CHAIN.ACTIVITY_USER(
    APP_SID         NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_ID     NUMBER(10, 0)    NOT NULL,
    USER_SID        NUMBER(10, 0)    NOT NULL,
    ADDED_DTM       DATE             DEFAULT SYSDATE NOT NULL,
    ADDED_BY_SID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_ACTIVITY_USER PRIMARY KEY (APP_SID, ACTIVITY_ID, USER_SID)
);

CREATE TABLE CHAIN.ACTIVITY_LOG(
    APP_SID                   NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_LOG_ID           NUMBER(10, 0)     NOT NULL,
    ACTIVITY_ID               NUMBER(10, 0)     NOT NULL,
    MESSAGE                   CLOB              NOT NULL,
    LOGGED_DTM                DATE              DEFAULT SYSDATE NOT NULL,
    IS_SYSTEM_GENERATED       NUMBER(1, 0)      DEFAULT 0 NOT NULL,
    LOGGED_BY_USER_SID        NUMBER(10, 0)     NOT NULL,
	REPLY_TO_ACTIVITY_LOG_ID  NUMBER(10),
    PARAM_1                   VARCHAR2(2048),
    PARAM_2                   VARCHAR2(2048),
    PARAM_3                   VARCHAR2(2048),
    IS_VISIBLE_TO_SUPPLIER    NUMBER(1, 0)      DEFAULT 0 NOT NULL,
    CONSTRAINT CHK_ACT_LOG_IS_VIS_TO_SUP CHECK (IS_VISIBLE_TO_SUPPLIER IN (0,1)),
    CONSTRAINT PK_ISSUE_LOG PRIMARY KEY (APP_SID, ACTIVITY_LOG_ID)
);

CREATE TABLE CHAIN.ACTIVITY_LOG_FILE(
    APP_SID                 NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_LOG_FILE_ID    NUMBER(10, 0)    NOT NULL,
    ACTIVITY_LOG_ID         NUMBER(10, 0)    NOT NULL,
    FILENAME                VARCHAR2(255)    NOT NULL,
    MIME_TYPE               VARCHAR2(256)    NOT NULL,
    DATA                    BLOB             NOT NULL,
    SHA1                    RAW(20)          NOT NULL,
    UPLOADED_DTM            DATE             DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_ACTIVITY_LOG_FILE PRIMARY KEY (APP_SID, ACTIVITY_LOG_FILE_ID)
);

CREATE TABLE CHAIN.ACTIVITY_TYPE(
    APP_SID                  NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_TYPE_ID         NUMBER(10, 0)    NOT NULL,
    LABEL                    VARCHAR2(255)    NOT NULL,
    CSS_CLASS                VARCHAR2(255)    NOT NULL,
    DUE_DTM_RELATIVE         NUMBER(10, 0),
    DUE_DTM_RELATIVE_UNIT    VARCHAR2(1)      DEFAULT 'd',
    HAS_TARGET_USER          NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    HAS_LOCATION             NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    USER_CAN_CREATE          NUMBER(1, 0)     DEFAULT 1 NOT NULL,
	HELPER_PKG				 VARCHAR2(255),	
	LOOKUP_KEY               VARCHAR2(255),
    CONSTRAINT CHK_ACT_TYP_DUE_DTM_REL_UNIT CHECK (DUE_DTM_RELATIVE_UNIT IN ('d','m')),
    CONSTRAINT CHK_ACT_TYP_HAS_LOC CHECK (HAS_LOCATION IN (0,1)),
    CONSTRAINT PK_ACTIVITY_TYPE PRIMARY KEY (APP_SID, ACTIVITY_TYPE_ID)
);

CREATE TABLE CHAIN.ACTIVITY_TYPE_ACTION(
    APP_SID                      NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    ACTIVITY_TYPE_ACTION_ID      NUMBER(10, 0)    NOT NULL,
    ACTIVITY_TYPE_ID             NUMBER(10, 0)    NOT NULL,
    GENERATE_ACTIVITY_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    ALLOW_USER_INTERACTION       NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    CONSTRAINT CHK_ACT_TO_GEN_USER_INTER CHECK (ALLOW_USER_INTERACTION IN (0,1)),
    CONSTRAINT PK_ACTIVITY_TYPE_ACTION PRIMARY KEY (APP_SID, ACTIVITY_TYPE_ACTION_ID),
	CONSTRAINT UK_ACTIVITY_TYPE_ACTION UNIQUE (APP_SID, ACTIVITY_TYPE_ID, GENERATE_ACTIVITY_TYPE_ID)
);

CREATE TABLE CHAIN.OUTCOME_TYPE(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    OUTCOME_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    LABEL              VARCHAR2(255)    NOT NULL,
    IS_SUCCESS         NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    IS_FAILURE         NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    IS_DEFERRED        NUMBER(1, 0)     DEFAULT 0,
    REQUIRE_REASON     NUMBER(1, 0)     DEFAULT 0 NOT NULL,
	LOOKUP_KEY         VARCHAR2(255),
    CONSTRAINT PK_OUTCOME_TYPE PRIMARY KEY (APP_SID, OUTCOME_TYPE_ID)
);

-- CSRIMP
-- Data tables
CREATE TABLE CSRIMP.CHAIN_ACTIVITY_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	CSS_CLASS VARCHAR2(255) NOT NULL,
	DUE_DTM_RELATIVE NUMBER(10,0),
	DUE_DTM_RELATIVE_UNIT VARCHAR2(1),
	HAS_LOCATION NUMBER(1,0) NOT NULL,
	HAS_TARGET_USER NUMBER(1,0) NOT NULL,
	HELPER_PKG VARCHAR2(255),
	LABEL VARCHAR2(255) NOT NULL,
	LOOKUP_KEY VARCHAR2(255),
	USER_CAN_CREATE NUMBER(1,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACTIVITY_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID),
	CONSTRAINT FK_CHAIN_ACTIVITY_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_OUTCOME_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OUTCOME_TYPE_ID NUMBER(10,0) NOT NULL,
	IS_DEFERRED NUMBER(1,0),
	IS_FAILURE NUMBER(1,0) NOT NULL,
	IS_SUCCESS NUMBER(1,0) NOT NULL,
	LABEL VARCHAR2(255) NOT NULL,
	LOOKUP_KEY VARCHAR2(255),
	REQUIRE_REASON NUMBER(1,0) NOT NULL,
	CONSTRAINT PK_CHAIN_OUTCOME_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OUTCOME_TYPE_ID),
	CONSTRAINT FK_CHAIN_OUTCOME_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVI_OUTCOM_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	OUTCOME_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACTIVI_OUTCOM_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID, OUTCOME_TYPE_ID),
	CONSTRAINT FK_CHAIN_ACTIVI_OUTCOM_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVITY (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION CLOB NOT NULL,
	ACTIVITY_DTM DATE NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	ASSIGNED_TO_USER_SID NUMBER(10,0) NOT NULL,
	CREATED_BY_ACTIVITY_ID NUMBER(10,0),
	CREATED_BY_COMPANY_SID NUMBER(10,0) NOT NULL,
	CREATED_BY_SID NUMBER(10,0) NOT NULL,
	CREATED_DTM DATE NOT NULL,
	LOCATION VARCHAR2(1000),
	LOCATION_TYPE NUMBER(10,0),
	ORIGINAL_ACTIVITY_DTM DATE NOT NULL,
	OUTCOME_REASON CLOB,
	OUTCOME_TYPE_ID NUMBER(10,0),
	TARGET_COMPANY_SID NUMBER(10,0) NOT NULL,
	TARGET_USER_SID NUMBER(10,0),
	CONSTRAINT PK_CHAIN_ACTIVITY PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_ID),
	CONSTRAINT FK_CHAIN_ACTIVITY_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVITY_LOG (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_LOG_ID NUMBER(10,0) NOT NULL,
	ACTIVITY_ID NUMBER(10,0) NOT NULL,
	IS_SYSTEM_GENERATED NUMBER(1,0) NOT NULL,
	IS_VISIBLE_TO_SUPPLIER NUMBER(1,0) NOT NULL,
	LOGGED_BY_USER_SID NUMBER(10,0) NOT NULL,
	LOGGED_DTM DATE NOT NULL,
	MESSAGE CLOB NOT NULL,
	REPLY_TO_ACTIVITY_LOG_ID NUMBER(10),
	PARAM_1 VARCHAR2(2048),
	PARAM_2 VARCHAR2(2048),
	PARAM_3 VARCHAR2(2048),
	CONSTRAINT PK_CHAIN_ACTIVITY_LOG PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_LOG_ID),
	CONSTRAINT FK_CHAIN_ACTIVITY_LOG_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVITY_LOG_FILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_LOG_FILE_ID NUMBER(10,0) NOT NULL,
	ACTIVITY_LOG_ID NUMBER(10,0) NOT NULL,
	DATA BLOB NOT NULL,
	FILENAME VARCHAR2(255) NOT NULL,
	MIME_TYPE VARCHAR2(256) NOT NULL,
	SHA1 BLOB NOT NULL,
	UPLOADED_DTM DATE NOT NULL,
	CONSTRAINT PK_CHAIN_ACTIVITY_LOG_FILE PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_LOG_FILE_ID),
	CONSTRAINT FK_CHAIN_ACTIVITY_LOG_FILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTI_TYPE_TAG_GROU (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	TAG_GROUP_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACTI_TYPE_TAG_GROU PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID, TAG_GROUP_ID),
	CONSTRAINT FK_CHAIN_ACTI_TYPE_TAG_GROU_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVITY_USER (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_ID NUMBER(10,0) NOT NULL,
	USER_SID NUMBER(10,0) NOT NULL,
	ADDED_BY_SID NUMBER(10,0) NOT NULL,
	ADDED_DTM DATE NOT NULL,
	CONSTRAINT PK_CHAIN_ACTIVITY_USER PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_ID, USER_SID),
	CONSTRAINT FK_CHAIN_ACTIVITY_USER_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVITY_TAG (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_ID NUMBER(10,0) NOT NULL,
	TAG_ID NUMBER(10,0) NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	TAG_GROUP_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACTIVITY_TAG PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_ID, TAG_ID),
	CONSTRAINT FK_CHAIN_ACTIVITY_TAG_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVI_TYPE_ACTION (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ACTION_ID NUMBER(10,0) NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	ALLOW_USER_INTERACTION NUMBER(1,0) NOT NULL,
	GENERATE_ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACTIVI_TYPE_ACTION PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ACTION_ID),
	CONSTRAINT FK_CHAIN_ACTIVI_TYPE_ACTION_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACT_OUTC_TYPE_ACT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_OUTCOME_TYP_ACTION_ID NUMBER(10,0) NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	ALLOW_USER_INTERACTION NUMBER(1,0),
	GENERATE_ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	OUTCOME_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACT_OUTC_TYPE_ACT PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_OUTCOME_TYP_ACTION_ID),
	CONSTRAINT FK_CHAIN_ACT_OUTC_TYPE_ACT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACTIVIT_TYPE_ALERT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	CUSTOMER_ALERT_TYPE_ID NUMBER(10,0) NOT NULL,
	ALLOW_MANUAL_EDITING NUMBER(1,0) NOT NULL,
	LABEL VARCHAR2(255) NOT NULL,
	USE_SUPPLIER_COMPANY NUMBER(1,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACTIVIT_TYPE_ALERT PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID, CUSTOMER_ALERT_TYPE_ID),
	CONSTRAINT FK_CHAIN_ACTIVIT_TYPE_ALERT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACT_TYPE_ALER_ROLE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	CUSTOMER_ALERT_TYPE_ID NUMBER(10,0) NOT NULL,
	ROLE_SID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACT_TYPE_ALER_ROLE PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID, CUSTOMER_ALERT_TYPE_ID, ROLE_SID),
	CONSTRAINT FK_CHAIN_ACT_TYPE_ALER_ROLE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.CHAIN_ACT_TYPE_DEFA_USER (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	USER_SID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_ACT_TYPE_DEFA_USER PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID, USER_SID),
	CONSTRAINT FK_CHAIN_ACT_TYPE_DEFA_USER_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_CHAIN_ACTIVITY (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ACTIVITY_ID NUMBER(10) NOT NULL,
	NEW_ACTIVITY_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_ACTIVITY PRIMARY KEY (OLD_ACTIVITY_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_ACTIVITY UNIQUE (NEW_ACTIVITY_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_ACTIVITY_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_CHAIN_ACTIVITY_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ACTIVITY_TYPE_ID NUMBER(10) NOT NULL,
	NEW_ACTIVITY_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_ACTIVITY_TYPE PRIMARY KEY (OLD_ACTIVITY_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_ACTIVITY_TYPE UNIQUE (NEW_ACTIVITY_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_ACTIVITY_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_CHAIN_OUTCOME_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_OUTCOME_TYPE_ID NUMBER(10) NOT NULL,
	NEW_OUTCOME_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_OUTCOME_TYPE PRIMARY KEY (OLD_OUTCOME_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_OUTCOME_TYPE UNIQUE (NEW_OUTCOME_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_OUTCOME_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_CHAIN_ACTIVITY_LOG (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ACTIVITY_LOG_ID NUMBER(10) NOT NULL,
	NEW_ACTIVITY_LOG_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_ACTIVITY_LOG PRIMARY KEY (OLD_ACTIVITY_LOG_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_ACTIVITY_LOG UNIQUE (NEW_ACTIVITY_LOG_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_ACTIVITY_LOG_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_CHAIN_ACTIV_LOG_FILE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ACTIVITY_LOG_FILE_ID NUMBER(10) NOT NULL,
	NEW_ACTIVITY_LOG_FILE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_ACTIV_LOG_FILE PRIMARY KEY (OLD_ACTIVITY_LOG_FILE_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_ACTIV_LOG_FILE UNIQUE (NEW_ACTIVITY_LOG_FILE_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_ACTIV_LOG_FILE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_CHAIN_ACTI_TYPE_ACTI (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ACTIVITY_TYPE_ACTION_ID NUMBER(10) NOT NULL,
	NEW_ACTIVITY_TYPE_ACTION_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_ACTI_TYPE_ACTI PRIMARY KEY (OLD_ACTIVITY_TYPE_ACTION_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_ACTI_TYPE_ACTI UNIQUE (NEW_ACTIVITY_TYPE_ACTION_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_ACTI_TYPE_ACTI_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

CREATE TABLE CSRIMP.MAP_CHAIN_AC_OUT_TYP_AC (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_ACTIVITY_OUTCM_TYP_ACTN_ID NUMBER(10) NOT NULL,
	NEW_ACTIVITY_OUTCM_TYP_ACTN_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_AC_OUT_TYP_AC PRIMARY KEY (OLD_ACTIVITY_OUTCM_TYP_ACTN_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_AC_OUT_TYP_AC UNIQUE (NEW_ACTIVITY_OUTCM_TYP_ACTN_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_AC_OUT_TYP_AC_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);

-- Alter tables
ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_COMPANY 
    FOREIGN KEY (APP_SID, TARGET_COMPANY_SID)
    REFERENCES CHAIN.COMPANY(APP_SID, COMPANY_SID);
	
ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_CREATED_BY_COMPANY 
    FOREIGN KEY (APP_SID, CREATED_BY_COMPANY_SID)
    REFERENCES CHAIN.COMPANY(APP_SID, COMPANY_SID);

ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_ACTVTY_TYPE 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_ACTVTY_OUTCOME_TYPE 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID, OUTCOME_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_OUTCOME_TYPE(APP_SID, ACTIVITY_TYPE_ID, OUTCOME_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_CREATED_BY_ACTVTY 
    FOREIGN KEY (APP_SID, CREATED_BY_ACTIVITY_ID)
    REFERENCES CHAIN.ACTIVITY(APP_SID, ACTIVITY_ID);
	
ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_ACTVTY_USER 
    FOREIGN KEY (APP_SID, ACTIVITY_ID, ASSIGNED_TO_USER_SID)
    REFERENCES CHAIN.ACTIVITY_USER(APP_SID, ACTIVITY_ID, USER_SID)
	DEFERRABLE INITIALLY DEFERRED;
	
ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_ASS_TO_CHAIN_USER
    FOREIGN KEY (APP_SID, ASSIGNED_TO_USER_SID)
    REFERENCES CHAIN.CHAIN_USER(APP_SID, USER_SID);
	
ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_TARGET_CHAIN_USER
    FOREIGN KEY (APP_SID, TARGET_USER_SID)
    REFERENCES CHAIN.CHAIN_USER(APP_SID, USER_SID);
	
ALTER TABLE CHAIN.ACTIVITY ADD CONSTRAINT FK_ACTVTY_CREATE_BY_CHAIN_USER
    FOREIGN KEY (APP_SID, CREATED_BY_SID)
    REFERENCES CHAIN.CHAIN_USER(APP_SID, USER_SID);

ALTER TABLE CHAIN.ACTIVITY_OUTCOME_TYPE ADD CONSTRAINT FK_ACT_OUTCM_TYPE_OUTCM_TYPE
    FOREIGN KEY (APP_SID, OUTCOME_TYPE_ID)
    REFERENCES CHAIN.OUTCOME_TYPE(APP_SID, OUTCOME_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY_OUTCOME_TYPE ADD CONSTRAINT FK_ACT_OUTCM_TYPE_ACT_TYPE 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY_OUTCOME_TYPE_ACTION ADD CONSTRAINT FK_ACT_OUTCM_TYP_ACTN_ACT_TYP 
    FOREIGN KEY (APP_SID, GENERATE_ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY_OUTCOME_TYPE_ACTION ADD CONSTRAINT FK_ACT_OUT_ACTN_ACT_OUT_TYP 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID, OUTCOME_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_OUTCOME_TYPE(APP_SID, ACTIVITY_TYPE_ID, OUTCOME_TYPE_ID);
	
grant select, references on csr.tag_group_member to chain;

ALTER TABLE CHAIN.ACTIVITY_TAG ADD CONSTRAINT FK_ACTVTY_TAG_TAG_GROUP_MEMBR 
    FOREIGN KEY (APP_SID, TAG_GROUP_ID, TAG_ID)
    REFERENCES CSR.TAG_GROUP_MEMBER(APP_SID, TAG_GROUP_ID, TAG_ID);

ALTER TABLE CHAIN.ACTIVITY_TAG ADD CONSTRAINT FK_ACTY_TAG_ACTY_TYP_TAG_GRP 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID, TAG_GROUP_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE_TAG_GROUP(APP_SID, ACTIVITY_TYPE_ID, TAG_GROUP_ID);

ALTER TABLE CHAIN.ACTIVITY_TAG ADD CONSTRAINT FK_ACTVTY_TAG_ACTVTY 
    FOREIGN KEY (APP_SID, ACTIVITY_ID, ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY(APP_SID, ACTIVITY_ID, ACTIVITY_TYPE_ID);

grant select, insert, update, delete on csr.alert_template to chain;
grant select, insert, update, delete on csr.alert_template_body to chain;
grant select, insert, update, delete, references on csr.customer_alert_type to chain;
grant select, insert, update, delete on csr.customer_alert_type_param to chain;
	
ALTER TABLE CHAIN.ACTIVITY_TYPE_ALERT ADD CONSTRAINT FK_ACT_TYP_ALRT_CSTMR_ALRT_TYP 
    FOREIGN KEY (APP_SID, CUSTOMER_ALERT_TYPE_ID)
    REFERENCES CSR.CUSTOMER_ALERT_TYPE(APP_SID, CUSTOMER_ALERT_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY_TYPE_ALERT ADD CONSTRAINT FK_ACTY_TYPE_ALERT_ACTY_TYPE 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY_TYPE_ALERT_ROLE ADD CONSTRAINT FK_ACT_ALRT_ROLE_ACT_TYP_ALRT 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID, CUSTOMER_ALERT_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE_ALERT(APP_SID, ACTIVITY_TYPE_ID, CUSTOMER_ALERT_TYPE_ID);
	
ALTER TABLE CHAIN.ACTIVITY_TYPE_ALERT_ROLE ADD CONSTRAINT FK_ACT_ALRT_ROLE_ROLE
    FOREIGN KEY (APP_SID, ROLE_SID)
    REFERENCES CSR.ROLE(APP_SID, ROLE_SID);

ALTER TABLE CHAIN.ACTIVITY_TYPE_DEFAULT_USER ADD CONSTRAINT FK_ACT_TYP_DEFLT_USER_ACT_TYP 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);
	
ALTER TABLE CHAIN.ACTIVITY_TYPE_DEFAULT_USER ADD CONSTRAINT FK_ACT_TYP_DEFLT_USR_CHAIN_USR
    FOREIGN KEY (APP_SID, USER_SID)
    REFERENCES CHAIN.CHAIN_USER(APP_SID, USER_SID);

ALTER TABLE CHAIN.ACTIVITY_TYPE_TAG_GROUP ADD CONSTRAINT FK_ACT_TYP_TAG_GROUP_TAG_GRP 
    FOREIGN KEY (APP_SID, TAG_GROUP_ID)
    REFERENCES CSR.TAG_GROUP(APP_SID, TAG_GROUP_ID);

ALTER TABLE CHAIN.ACTIVITY_TYPE_TAG_GROUP ADD CONSTRAINT FK_ACT_TYPE_TAG_GROUP_ACT_TYP 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);
	
ALTER TABLE CHAIN.ACTIVITY_USER ADD CONSTRAINT FK_ACTVTY_USER_ACTVTY 
    FOREIGN KEY (APP_SID, ACTIVITY_ID)
    REFERENCES CHAIN.ACTIVITY(APP_SID, ACTIVITY_ID)
	DEFERRABLE INITIALLY DEFERRED;
	
ALTER TABLE CHAIN.ACTIVITY_USER ADD CONSTRAINT FK_ACTVTY_USER_CHAIN_USER
    FOREIGN KEY (APP_SID, USER_SID)
    REFERENCES CHAIN.CHAIN_USER(APP_SID, USER_SID);

ALTER TABLE CHAIN.ACTIVITY_LOG ADD CONSTRAINT FK_ACTVTY_LOG_ACTVTY 
    FOREIGN KEY (APP_SID, ACTIVITY_ID)
    REFERENCES CHAIN.ACTIVITY(APP_SID, ACTIVITY_ID);
	
ALTER TABLE CHAIN.ACTIVITY_LOG ADD CONSTRAINT FK_ACTVTY_LOG_CHAIN_USER
    FOREIGN KEY (APP_SID, LOGGED_BY_USER_SID)
    REFERENCES CHAIN.CHAIN_USER(APP_SID, USER_SID);
	
ALTER TABLE CHAIN.ACTIVITY_LOG ADD CONSTRAINT FK_ACTVTY_LOG_REPLY_ACTVTY_LOG
    FOREIGN KEY (APP_SID, REPLY_TO_ACTIVITY_LOG_ID)
    REFERENCES CHAIN.ACTIVITY_LOG(APP_SID, ACTIVITY_LOG_ID)
	DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE CHAIN.ACTIVITY_TYPE_ACTION ADD CONSTRAINT FK_ACTY_TYP_ACTN_GEN_ACTY_TYP 
    FOREIGN KEY (APP_SID, GENERATE_ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);

ALTER TABLE CHAIN.ACTIVITY_TYPE_ACTION ADD CONSTRAINT FK_ACTVTY_TYP_ACTN_ACTVTY_TYP 
    FOREIGN KEY (APP_SID, ACTIVITY_TYPE_ID)
    REFERENCES CHAIN.ACTIVITY_TYPE(APP_SID, ACTIVITY_TYPE_ID);
	
ALTER TABLE CHAIN.ACTIVITY_LOG_FILE ADD CONSTRAINT FK_ACTVTY_LOG_FILE_ACTVTY_LOG 
    FOREIGN KEY (APP_SID, ACTIVITY_LOG_ID)
    REFERENCES CHAIN.ACTIVITY_LOG(APP_SID, ACTIVITY_LOG_ID);
	
ALTER TABLE CSR.TAG_GROUP ADD (
	APPLIES_TO_CHAIN_ACTIVITIES NUMBER(1,0) DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_APPLIES_TO_CHAIN_1_0 CHECK (APPLIES_TO_CHAIN IN (1, 0)),
	CONSTRAINT CHK_APPLIES_TO_CHAIN_ACTVS_1_0 CHECK (APPLIES_TO_CHAIN_ACTIVITIES IN (1, 0))
);

ALTER TABLE CSRIMP.TAG_GROUP ADD (
	APPLIES_TO_CHAIN NUMBER(1),
	APPLIES_TO_CHAIN_ACTIVITIES NUMBER(1)
);
UPDATE CSRIMP.TAG_GROUP SET APPLIES_TO_CHAIN=0, APPLIES_TO_CHAIN_ACTIVITIES=0;
ALTER TABLE CSRIMP.TAG_GROUP MODIFY APPLIES_TO_CHAIN NOT NULL;
ALTER TABLE CSRIMP.TAG_GROUP ADD (CONSTRAINT CHK_APPLIES_TO_CHAIN_1_0 CHECK (APPLIES_TO_CHAIN IN (1, 0)));
ALTER TABLE CSRIMP.TAG_GROUP MODIFY APPLIES_TO_CHAIN_ACTIVITIES NOT NULL;
ALTER TABLE CSRIMP.TAG_GROUP ADD (CONSTRAINT CHK_APPLIES_TO_CHAIN_ACTVS_1_0 CHECK (APPLIES_TO_CHAIN_ACTIVITIES IN (1, 0)));

grant create table to chain;
/* CHAIN ACTIVITY DESCRIPTION INDEX */
create index chain.ix_activity_desc_search on chain.activity(description) indextype is ctxsys.context
parameters('datastore ctxsys.default_datastore stoplist ctxsys.empty_stoplist');

/* CHAIN ACTIVITY LOCATION INDEX */
create index chain.ix_activity_loc_search on chain.activity(location) indextype is ctxsys.context
parameters('datastore ctxsys.default_datastore stoplist ctxsys.empty_stoplist');

/* CHAIN ACTIVITY OUTCOME REASON INDEX */
create index chain.ix_activity_out_search on chain.activity(outcome_reason) indextype is ctxsys.context
parameters('datastore ctxsys.default_datastore stoplist ctxsys.empty_stoplist');

/* CHAIN ACTIVITY OUTCOME LOG MESSAGE INDEX */
create index chain.ix_activity_log_search on chain.activity_log(message) indextype is ctxsys.context
parameters('datastore ctxsys.default_datastore stoplist ctxsys.empty_stoplist');

revoke create table from chain;

-- *** Grants ***
grant select, references on csr.supplier to chain WITH GRANT OPTION;

--csrimp
grant select, insert, update, delete on csrimp.chain_activity_type to web_user;
grant select, insert, update, delete on csrimp.chain_outcome_type to web_user;
grant select, insert, update, delete on csrimp.chain_activi_outcom_type to web_user;
grant select, insert, update, delete on csrimp.chain_activity to web_user;
grant select, insert, update, delete on csrimp.chain_activity_log to web_user;
grant select, insert, update, delete on csrimp.chain_activity_log_file to web_user;
grant select, insert, update, delete on csrimp.chain_acti_type_tag_grou to web_user;
grant select, insert, update, delete on csrimp.chain_activity_user to web_user;
grant select, insert, update, delete on csrimp.chain_activity_tag to web_user;
grant select, insert, update, delete on csrimp.chain_activi_type_action to web_user;
grant select, insert, update, delete on csrimp.chain_act_outc_type_act to web_user;
grant select, insert, update, delete on csrimp.chain_activit_type_alert to web_user;
grant select, insert, update, delete on csrimp.chain_act_type_aler_role to web_user;
grant select, insert, update, delete on csrimp.chain_act_type_defa_user to web_user;

grant select, insert, update on chain.activity_type to csrimp;
grant select, insert, update on chain.activity_type to CSR;
grant select, insert, update on chain.outcome_type to csrimp;
grant select, insert, update on chain.outcome_type to CSR;
grant select, insert, update on chain.activity_outcome_type to csrimp;
grant select, insert, update on chain.activity_outcome_type to CSR;
grant select, insert, update on chain.activity to csrimp;
grant select, insert, update on chain.activity to CSR;
grant select, insert, update on chain.activity_log to csrimp;
grant select, insert, update on chain.activity_log to CSR;
grant select, insert, update on chain.activity_log_file to csrimp;
grant select, insert, update on chain.activity_log_file to CSR;
grant select, insert, update on chain.activity_type_tag_group to csrimp;
grant select, insert, update on chain.activity_type_tag_group to CSR;
grant select, insert, update on chain.activity_user to csrimp;
grant select, insert, update on chain.activity_user to CSR;
grant select, insert, update on chain.activity_tag to csrimp;
grant select, insert, update on chain.activity_tag to CSR;
grant select, insert, update on chain.activity_type_action to csrimp;
grant select, insert, update on chain.activity_type_action to CSR;
grant select, insert, update on chain.activity_outcome_type_action to csrimp;
grant select, insert, update on chain.activity_outcome_type_action to CSR;
grant select, insert, update on chain.activity_type_alert to csrimp;
grant select, insert, update on chain.activity_type_alert to CSR;
grant select, insert, update on chain.activity_type_alert_role to csrimp;
grant select, insert, update on chain.activity_type_alert_role to CSR;
grant select, insert, update on chain.activity_type_default_user to csrimp;
grant select, insert, update on chain.activity_type_default_user to CSR;

grant select on chain.activity_id_seq to csrimp;
grant select on chain.activity_id_seq to CSR;
grant select on chain.activity_type_id_seq to csrimp;
grant select on chain.activity_type_id_seq to CSR;
grant select on chain.outcome_type_id_seq to csrimp;
grant select on chain.outcome_type_id_seq to CSR;
grant select on chain.activity_log_id_seq to csrimp;
grant select on chain.activity_log_id_seq to CSR;
grant select on chain.activity_log_file_id_seq to csrimp;
grant select on chain.activity_log_file_id_seq to CSR;
grant select on chain.activity_type_action_id_seq to csrimp;
grant select on chain.activity_type_action_id_seq to CSR;
grant select on chain.activity_outcm_typ_actn_id_seq to csrimp;
grant select on chain.activity_outcm_typ_actn_id_seq to CSR;

grant execute on aspen2.utils_pkg to chain;

-- ** Cross schema constraints ***

-- *** Views ***
CREATE OR REPLACE VIEW chain.v$activity AS
SELECT a.activity_id, a.description, a.target_company_sid, a.created_by_company_sid, 
       a.activity_type_id, at.label activity_type_label, at.lookup_key activity_type_lookup_key,
	   a.assigned_to_user_sid, acu.full_name assigned_to_user_name, a.target_user_sid, 
	   tcu.full_name target_user_name, a.activity_dtm, a.original_activity_dtm, 
	   a.created_dtm, a.created_by_activity_id, a.created_by_sid, ccu.full_name created_by_user_name,
	   a.outcome_type_id, ot.label outcome_type_label, ot.is_success, ot.is_failure, ot.is_deferred,
	   a.outcome_reason, a.location, a.location_type,
	   CASE WHEN a.activity_dtm <= SYSDATE AND a.outcome_type_id IS NULL THEN 'Overdue'
	   WHEN a.activity_dtm > SYSDATE AND a.outcome_type_id IS NULL THEN 'Up-coming'
	   ELSE 'Completed' END status
  FROM activity a
  JOIN activity_type at ON at.activity_type_id = a.activity_type_id
  LEFT JOIN outcome_type ot ON ot.outcome_type_id = a.outcome_type_id
  JOIN csr.csr_user acu ON acu.csr_user_sid = a.assigned_to_user_sid
  LEFT JOIN csr.csr_user tcu ON tcu.csr_user_sid = a.target_user_sid
  JOIN csr.csr_user ccu ON ccu.csr_user_sid = a.created_by_sid;

CREATE OR REPLACE VIEW CHAIN.v$company AS
	SELECT c.app_sid, c.company_sid, c.created_dtm, c.name, c.activated_dtm, c.active, c.address_1, 
		   c.address_2, c.address_3, c.address_4, c.town, c.state, c.state_id, c.city, c.city_id, c.postcode, c.country_code, 
		   c.phone, c.fax, c.website, c.email, c.deleted, c.details_confirmed, c.stub_registration_guid, 
		   c.allow_stub_registration, c.approve_stub_registration, c.mapping_approval_required, 
		   c.user_level_messaging, c.sector_id,
		   cou.name country_name, s.description sector_description, c.can_see_all_companies, c.company_type_id,
		   ct.lookup_key company_type_lookup, c.supp_rel_code_label, c.supp_rel_code_label_mand,
		   c.parent_sid, p.name parent_name, p.country_code parent_country_code, pcou.name parent_company_name,
		   c.country_is_hidden, cs.region_sid
	  FROM company c
	  LEFT JOIN v$country cou ON c.country_code = cou.country_code
	  LEFT JOIN sector s ON c.sector_id = s.sector_id AND c.app_sid = s.app_sid
	  LEFT JOIN company_type ct ON c.company_type_id = ct.company_type_id
	  LEFT JOIN company p ON c.parent_sid = p.company_sid AND c.app_sid = p.app_sid
	  LEFT JOIN v$country pcou ON p.country_code = pcou.country_code
	  LEFT JOIN csr.supplier cs ON cs.company_sid = c.company_sid AND cs.app_sid = c.app_sid
	 WHERE c.app_sid = SYS_CONTEXT('SECURITY', 'APP')
	   AND c.deleted = 0
;

CREATE OR REPLACE VIEW chain.v$activity_log AS
SELECT al.activity_log_id, al.activity_id, al.message, al.logged_dtm, al.is_system_generated,
       al.logged_by_user_sid, al.param_1, al.param_2, al.param_3, al.is_visible_to_supplier,
	   al.reply_to_activity_log_id, cu.full_name logged_by_full_name, cu.email logged_by_email
  FROM activity_log al
  JOIN activity a ON al.activity_id = a.activity_id
  JOIN csr.csr_user cu ON al.logged_by_user_sid = cu.csr_user_sid
 WHERE a.app_sid = SYS_CONTEXT('SECURITY', 'APP')
   AND (a.created_by_company_sid = SYS_CONTEXT('SECURITY', 'CHAIN_COMPANY')
		OR (al.is_visible_to_supplier = 1
			AND a.target_company_sid = SYS_CONTEXT('SECURITY', 'CHAIN_COMPANY')
		)
	);

-- *** Data changes ***
--RLS
DECLARE
    FEATURE_NOT_ENABLED EXCEPTION;
    PRAGMA EXCEPTION_INIT(FEATURE_NOT_ENABLED, -439);
    POLICY_ALREADY_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT(POLICY_ALREADY_EXISTS, -28101);
	type t_tabs is table of varchar2(30);
	v_list t_tabs;
begin	
	v_list := t_tabs(
		'ACTIVITY',
		'ACTIVITY_OUTCOME_TYPE',
		'ACTIVITY_OUTCOME_TYPE_ACTION',
		'ACTIVITY_TAG',
		'ACTIVITY_TYPE_ALERT',
		'ACTIVITY_TYPE_ALERT_ROLE',
		'ACTIVITY_TYPE_DEFAULT_USER',
		'ACTIVITY_TYPE_TAG_GROUP',
		'ACTIVITY_USER',
		'ACTIVITY_LOG',
		'ACTIVITY_LOG_FILE',
		'ACTIVITY_TYPE',
		'ACTIVITY_TYPE_ACTION',
		'OUTCOME_TYPE',
		'COMPANY_TYPE_ROLE'
	);
	for i in 1 .. v_list.count loop
		begin
			dbms_rls.add_policy(
				object_schema   => 'CHAIN',
				object_name     => v_list(i),
				policy_name     => SUBSTR(v_list(i), 1, 26) || '_POL', 
				function_schema => 'CHAIN',
				policy_function => 'appSidCheck',
				statement_types => 'select, insert, update, delete',
				update_check	=> true,
				policy_type     => dbms_rls.static);
		exception
			when policy_already_exists then
				DBMS_OUTPUT.PUT_LINE('RLS policy '||v_list(i)||' already exists');
			WHEN FEATURE_NOT_ENABLED THEN
				DBMS_OUTPUT.PUT_LINE('RLS policy '||v_list(i)||' not applied as feature not enabled');
		end;
	end loop;
end;
/

grant execute on SYS.LOW_PRIORITY_JOB to chain;

DECLARE
    job BINARY_INTEGER;
BEGIN
    -- now and every minute afterwards
    -- 10g w/low_priority_job created
    DBMS_SCHEDULER.CREATE_JOB (
       job_name             => 'chain.activity_description_text',
       job_type             => 'PLSQL_BLOCK',
       job_action           => 'ctx_ddl.sync_index(''ix_activity_desc_search'');',
       job_class            => 'low_priority_job',
       start_date           => to_timestamp_tz('2009/01/01 01:00 +00:00','YYYY/MM/DD HH24:MI TZH:TZM'),
       repeat_interval      => 'FREQ=MINUTELY',
       enabled              => TRUE,
       auto_drop            => FALSE,
       comments             => 'Synchronise activity description text indexes');
       COMMIT;
END;
/

DECLARE
    job BINARY_INTEGER;
BEGIN
    -- now and every minute afterwards
    -- 10g w/low_priority_job created
    DBMS_SCHEDULER.CREATE_JOB (
       job_name             => 'chain.activity_location_text',
       job_type             => 'PLSQL_BLOCK',
       job_action           => 'ctx_ddl.sync_index(''ix_activity_loc_search'');',
       job_class            => 'low_priority_job',
       start_date           => to_timestamp_tz('2009/01/01 01:00 +00:00','YYYY/MM/DD HH24:MI TZH:TZM'),
       repeat_interval      => 'FREQ=MINUTELY',
       enabled              => TRUE,
       auto_drop            => FALSE,
       comments             => 'Synchronise activity location text indexes');
       COMMIT;
END;
/

DECLARE
    job BINARY_INTEGER;
BEGIN
    -- now and every minute afterwards
    -- 10g w/low_priority_job created
    DBMS_SCHEDULER.CREATE_JOB (
       job_name             => 'chain.activity_outcome_text',
       job_type             => 'PLSQL_BLOCK',
       job_action           => 'ctx_ddl.sync_index(''ix_activity_out_search'');',
       job_class            => 'low_priority_job',
       start_date           => to_timestamp_tz('2009/01/01 01:00 +00:00','YYYY/MM/DD HH24:MI TZH:TZM'),
       repeat_interval      => 'FREQ=MINUTELY',
       enabled              => TRUE,
       auto_drop            => FALSE,
       comments             => 'Synchronise activity outcome text indexes');
       COMMIT;
END;
/

DECLARE
    job BINARY_INTEGER;
BEGIN
    -- now and every minute afterwards
    -- 10g w/low_priority_job created
    DBMS_SCHEDULER.CREATE_JOB (
       job_name             => 'chain.activity_log_message_text',
       job_type             => 'PLSQL_BLOCK',
       job_action           => 'ctx_ddl.sync_index(''ix_activity_log_search'');',
       job_class            => 'low_priority_job',
       start_date           => to_timestamp_tz('2009/01/01 01:00 +00:00','YYYY/MM/DD HH24:MI TZH:TZM'),
       repeat_interval      => 'FREQ=MINUTELY',
       enabled              => TRUE,
       auto_drop            => FALSE,
       comments             => 'Synchronise activity log message text indexes');
       COMMIT;
END;
/

-- Data
BEGIN
	--chain.capability_pkg.RegisterCapability(chain.chain_pkg.CT_SUPPLIERS, chain.chain_pkg.MANAGE_ACTIVITIES, chain.chain_pkg.BOOLEAN_PERMISSION, chain.chain_pkg.IS_SUPPLIER_CAPABILITY);
	INSERT INTO chain.capability 
	(capability_id, capability_name, capability_type_id, perm_type, is_supplier) 
	VALUES 
	(chain.capability_id_seq.NEXTVAL, 'Manage activities', 2, 1, 1);
END;
/

BEGIN
	BEGIN
		INSERT INTO csr.std_alert_type (std_alert_type_id, description, send_trigger, sent_from) VALUES (5022,
		'Chain activity message',
		'Sent when a user adds a log entry message to a chain activity.',
		'The user who added the message.');
	EXCEPTION
		WHEN dup_val_on_index THEN
			UPDATE csr.std_alert_type SET
				description = 'Chain activity message',
				send_trigger = 'Sent when a user adds a log entry message to a chain activity.',
				sent_from = 'The user who added the message.'
			WHERE std_alert_type_id = 5022;
	END;

	BEGIN
		INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
		VALUES (5022, 0, 'TO_NAME', 'To full name', 'The name of the user the alert is being sent to', 1);
	EXCEPTION 
		WHEN dup_val_on_index THEN NULL;
	END;
	BEGIN
		INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
		VALUES (5022, 0, 'TO_FRIENDLY_NAME', 'To friendly name', 'The friendly name of the user the alert is being sent to', 2);
	EXCEPTION 
		WHEN dup_val_on_index THEN NULL;
	END;
	BEGIN
		INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
		VALUES (5022, 0, 'TO_EMAIL', 'To e-mail', 'The e-mail address of the user the alert is being sent to', 3);
	EXCEPTION 
		WHEN dup_val_on_index THEN NULL;
	END;
	BEGIN
		INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
		VALUES (5022, 0, 'FROM_NAME', 'From full name', 'The name of the user the alert is being sent from', 4);
	EXCEPTION 
		WHEN dup_val_on_index THEN NULL;
	END;
	BEGIN
		INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
		VALUES (5022, 0, 'FROM_FRIENDLY_NAME', 'From friendly name', 'The friendly name of the user the alert is being sent from', 5);
	EXCEPTION 
		WHEN dup_val_on_index THEN NULL;
	END;
	BEGIN
		INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
		VALUES (5022, 0, 'FROM_EMAIL', 'From e-mail', 'The e-mail address of the user the alert is being sent from', 6);
	EXCEPTION 
		WHEN dup_val_on_index THEN NULL;
	END;
	BEGIN	
		INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
		VALUES (5022, 0, 'MESSAGE', 'Message', 'The message that has been added to the activity log', 7);
	EXCEPTION 
		WHEN dup_val_on_index THEN NULL;
	END;
END;
/

-- ** New package grants **
-- dummy procs for grant
create or replace package chain.activity_pkg as
procedure dummy;
end;
/
create or replace package body chain.activity_pkg as
procedure dummy
as
begin
	null;
end;
end;
/

grant execute on chain.activity_pkg to web_user;

-- *** Packages ***
@..\chain\activity_pkg
@..\chain\chain_pkg
@..\chain\company_pkg
@..\chain\company_type_pkg
@..\chain\company_user_pkg
@..\role_pkg
@..\schema_pkg
@..\tag_pkg
@..\csrimp\imp_pkg
@..\..\..\postcode\db\geo_region_pkg

@..\chain\activity_body
@..\chain\company_body
@..\chain\company_type_body
@..\chain\company_user_body
@..\chain\setup_body
@..\alert_body
@..\role_body
@..\schema_body
@..\tag_body
@..\supplier_body
@..\issue_body
@..\csrimp\imp_body
@..\..\..\postcode\db\geo_region_body

@update_tail
