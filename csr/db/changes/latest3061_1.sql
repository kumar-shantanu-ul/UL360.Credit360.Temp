-- Please update version.sql too -- this keeps clean builds in sync
define version=3061
define minor_version=1
@update_header

-- *** DDL ***
-- Create tables
CREATE TABLE CSR.QUESTION(
	APP_SID					NUMBER(10, 0)	 DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	OWNED_BY_SURVEY_SID		NUMBER(10, 0)	 NULL,
	QUESTION_TYPE			VARCHAR2(20)	 NOT NULL,
	CUSTOM_QUESTION_TYPE_ID	NUMBER(10, 0),
	LOOKUP_KEY				VARCHAR2(255),
	MAPS_TO_IND_SID			NUMBER(10, 0),
	MEASURE_SID				NUMBER(10, 0),
	CONSTRAINT PK_QUESTION PRIMARY KEY (APP_SID, QUESTION_ID),
	CONSTRAINT CONS_QUESTION_MEASURE UNIQUE (APP_SID, QUESTION_ID, MEASURE_SID),
	CONSTRAINT CHK_Q_CUSTOM_QUESTION_ID CHECK ((QUESTION_TYPE!='custom' AND CUSTOM_QUESTION_TYPE_ID IS NULL) OR (QUESTION_TYPE='custom' AND CUSTOM_QUESTION_TYPE_ID IS NOT NULL)),
	CONSTRAINT FK_QUESTION_QUICK_SURVEY FOREIGN KEY (APP_SID, OWNED_BY_SURVEY_SID) REFERENCES CSR.QUICK_SURVEY(APP_SID, SURVEY_SID)
)
;

ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_QUESTION_IND
    FOREIGN KEY (APP_SID, MAPS_TO_IND_SID, MEASURE_SID)
    REFERENCES CSR.IND(APP_SID, IND_SID, MEASURE_SID)
;

ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_QUESTION_CUSTOMER
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_Q_CUST_QUEST_TYPE
    FOREIGN KEY (APP_SID, CUSTOM_QUESTION_TYPE_ID)
    REFERENCES CSR.QS_CUSTOM_QUESTION_TYPE(APP_SID, CUSTOM_QUESTION_TYPE_ID)
;

CREATE TABLE CSR.QUESTION_VERSION(
	APP_SID					NUMBER(10, 0)	 DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION		NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT			NUMBER(1)		 DEFAULT 1 NOT NULL,
	PARENT_ID				NUMBER(10, 0),
	PARENT_VERSION			NUMBER(10, 0),
	PARENT_DRAFT			NUMBER(10, 0),
	POS						NUMBER(10, 0),
	LABEL					VARCHAR2(4000),
	SCORE					NUMBER(13, 3),
	MAX_SCORE				NUMBER(10, 0),
	UPLOAD_SCORE			NUMBER(10, 0),
	WEIGHT					NUMBER(15, 5)	 DEFAULT 1 NOT NULL,
	DONT_NORMALISE_SCORE	NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	HAS_SCORE_EXPRESSION	NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	HAS_MAX_SCORE_EXPR		NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	REMEMBER_ANSWER			NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	COUNT_QUESTION			NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	ACTION					VARCHAR2(50),
	CONSTRAINT CHK_QV_DNT_NORM_SC_0_1 CHECK (DONT_NORMALISE_SCORE IN (0,1)),
	CONSTRAINT CHK_QV_HAS_SC_EXPR_0_1 CHECK (HAS_SCORE_EXPRESSION IN (0,1)),
	CONSTRAINT CHK_QV_MAX_SC_EXPR_0_1 CHECK (HAS_MAX_SCORE_EXPR IN (0,1)),
	CONSTRAINT CHK_QV_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_VERSION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
	CONSTRAINT FK_QUESTION_VERSION_QUESTION FOREIGN KEY (APP_SID, QUESTION_ID) REFERENCES CSR.QUESTION(APP_SID, QUESTION_ID),
	CONSTRAINT FK_QUESTION_VERSION_PARENT FOREIGN KEY (APP_SID, PARENT_ID) REFERENCES CSR.QUESTION(APP_SID, QUESTION_ID)
)
;

ALTER TABLE CSR.QUESTION_VERSION ADD CONSTRAINT FK_QV_CUSTOMER
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

-- qs_question_option
CREATE TABLE CSR.QUESTION_OPTION(
	APP_SID						NUMBER(10, 0)	 DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_OPTION_ID			NUMBER(10, 0)	 NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		 NOT NULL,
	POS							NUMBER(10, 0)	 DEFAULT 0 NOT NULL,
	LABEL						VARCHAR2(4000)	 NOT NULL,
    SCORE						NUMBER(13, 3),
	COLOR						NUMBER(10, 0),
	LOOKUP_KEY					VARCHAR2(1000),
	MAPS_TO_IND_SID				NUMBER(10, 0),
	OPTION_ACTION				VARCHAR2(50),
	NON_COMPLIANCE_POPUP		NUMBER(1, 0),
	NON_COMP_DEFAULT_ID			NUMBER(10, 0),
	NON_COMPLIANCE_TYPE_ID		NUMBER(10, 0),
	NON_COMPLIANCE_LABEL		VARCHAR2(255),
	NON_COMPLIANCE_DETAIL		VARCHAR2(4000),
	NON_COMP_ROOT_CAUSE			VARCHAR2(4000),
	NON_COMP_SUGGESTED_ACTION	VARCHAR2(4000),
	CONSTRAINT CHK_QO_NON_COMP_POPUP_0_1 CHECK (NON_COMPLIANCE_POPUP IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION PRIMARY KEY (APP_SID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
)
;

-- qs_question_option_nc_tag
CREATE TABLE CSR.QUESTION_OPTION_NC_TAG(
    APP_SID               NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    QUESTION_ID           NUMBER(10, 0)    NOT NULL,
    QUESTION_OPTION_ID    NUMBER(10, 0)    NOT NULL,
    QUESTION_VERSION      NUMBER(10, 0)    NOT NULL,
    QUESTION_DRAFT        NUMBER(1)        NOT NULL,
    TAG_ID                NUMBER(10, 0)    NOT NULL,
	CONSTRAINT CHK_QONT_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION_NC_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_OPTION_ID, QUESTION_VERSION, QUESTION_DRAFT, TAG_ID)
)
;

ALTER TABLE CSR.QUESTION_OPTION_NC_TAG ADD CONSTRAINT FK_Q_OPT_TAG_OPTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
    REFERENCES CSR.QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
;

-- qs_question_type
CREATE TABLE CSR.QUESTION_TYPE(
    QUESTION_TYPE    VARCHAR2(20)     NOT NULL,
    LABEL            VARCHAR2(255)    NOT NULL,
    ANSWER_TYPE      VARCHAR2(10),
    CONSTRAINT CK_QUES_TYPE_ANS_TYPE CHECK (ANSWER_TYPE IN ('val','option')),
    CONSTRAINT PK_QUESTION_TYPE PRIMARY KEY (QUESTION_TYPE)
)
;

INSERT INTO csr.question_type (question_type, label, answer_type)
SELECT question_type, label, answer_type
  FROM csr.qs_question_type;

ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_QV_QUESTION_TYPE
    FOREIGN KEY (QUESTION_TYPE)
    REFERENCES CSR.QUESTION_TYPE(QUESTION_TYPE)
;

ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT RefQS_QUESTION_TYPE2196;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QSQ_QUESTION_TYPE
    FOREIGN KEY (QUESTION_TYPE)
    REFERENCES CSR.QUESTION_TYPE(QUESTION_TYPE)
;

DROP TABLE CSR.QS_QUESTION_TYPE;

-- quick_survey_question_tag
CREATE TABLE CSR.QUESTION_TAG(
    APP_SID				NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    QUESTION_ID			NUMBER(10, 0)	NOT NULL,
    QUESTION_VERSION	NUMBER(10, 0)	NOT NULL,
    TAG_ID				NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT		NUMBER(1)		DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_QT_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0),
    CONSTRAINT PK_QUESTION_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, TAG_ID)
)
;

INSERT INTO csr.question (
	app_sid, question_id, question_type, lookup_key, maps_to_ind_sid,
	measure_sid, owned_by_survey_sid, custom_question_type_id
)
SELECT qsq.app_sid, qsq.question_id, qsq.question_type, qsq.lookup_key, qsq.maps_to_ind_sid,
	   qsq.measure_sid, qsq.survey_sid, qsq.custom_question_type_id
  FROM csr.quick_survey_question qsq
  JOIN (
		SELECT app_sid, question_id, CASE survey_version WHEN 9999999999 THEN 0 ELSE survey_version END survey_version
		  FROM (
			SELECT app_sid, question_id, MAX(CASE survey_version WHEN 0 THEN 9999999999 ELSE survey_version END) survey_version
			  FROM csr.quick_survey_question
			 GROUP BY app_sid, question_id
		  )
     ) t ON t.app_sid = qsq.app_sid
	    AND t.question_id = qsq.question_id
		AND t.survey_version = qsq.survey_version;

INSERT INTO csr.question_version (
	app_sid, question_id, question_draft, question_version,	parent_id, parent_draft, parent_version, pos,
	score, max_score, upload_score,
	weight, dont_normalise_score, has_score_expression, has_max_score_expr,
	remember_answer, count_question, label, action
)
SELECT 	app_sid, question_id, 0, survey_version, parent_id, 0, survey_version, pos,
	score, max_score, upload_score,
	weight, dont_normalise_score, has_score_expression, has_max_score_expr,
	remember_answer, count_question, label, action
  FROM csr.quick_survey_question
  ORDER BY question_id ASC;

INSERT INTO csr.question_option (
	app_sid, question_option_id, question_id, pos, label, question_draft, question_version, score,
	color, lookup_key, maps_to_ind_sid, option_action, non_compliance_popup, non_comp_default_id,
	non_compliance_type_id, non_compliance_label, non_compliance_detail, non_comp_root_cause, non_comp_suggested_action
)
SELECT app_sid, question_option_id, question_id, pos, label, 0, survey_version, score,
	color, lookup_key, maps_to_ind_sid, option_action, non_compliance_popup, non_comp_default_id,
	non_compliance_type_id, non_compliance_label, non_compliance_detail, non_comp_root_cause, non_comp_suggested_action
  FROM csr.qs_question_option;
  
INSERT INTO csr.question_option_nc_tag (
	app_sid, question_id, question_option_id, question_version, question_draft, tag_id
)
SELECT app_sid, question_id, question_option_id, survey_version, 0, tag_id
  FROM csr.qs_question_option_nc_tag;

INSERT INTO csr.question_tag (app_sid, question_id, question_version, tag_id, question_draft)
SELECT app_sid, question_id, survey_version, tag_id, 0
  FROM csr.quick_survey_question_tag;

ALTER TABLE CSR.QUESTION_TAG ADD CONSTRAINT FK_QUESTION_TAG_QUESTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
    REFERENCES CSR.QUESTION_VERSION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;

-- intentionally break quick_survey_pkg to protect the data while dicking with keys
CREATE OR REPLACE PACKAGE CSR.quick_survey_pkg AS
END quick_survey_pkg;
/

-- new csrimp tables
CREATE TABLE CSRIMP.QUESTION(
	CSRIMP_SESSION_ID		NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	OWNED_BY_SURVEY_SID		NUMBER(10, 0)	 NULL,
	QUESTION_TYPE			VARCHAR2(20)	 NOT NULL,
	CUSTOM_QUESTION_TYPE_ID	NUMBER(10, 0),
	LOOKUP_KEY				VARCHAR2(255),
	MAPS_TO_IND_SID			NUMBER(10, 0),
	MEASURE_SID				NUMBER(10, 0),
	CONSTRAINT PK_QUESTION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID),
	CONSTRAINT CONS_QUESTION_MEASURE UNIQUE (CSRIMP_SESSION_ID, QUESTION_ID, MEASURE_SID),
	CONSTRAINT CHK_Q_CUSTOM_QUESTION_ID CHECK ((QUESTION_TYPE!='custom' AND CUSTOM_QUESTION_TYPE_ID IS NULL) OR (QUESTION_TYPE='custom' AND CUSTOM_QUESTION_TYPE_ID IS NOT NULL)),
    CONSTRAINT FK_QUESTION_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;

CREATE TABLE CSRIMP.QUESTION_VERSION(
	CSRIMP_SESSION_ID		NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION		NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT			NUMBER(1)		 NOT NULL,
	PARENT_ID				NUMBER(10, 0),
	PARENT_VERSION			NUMBER(10, 0),
	PARENT_DRAFT			NUMBER(10, 0),
	POS						NUMBER(10, 0),
	LABEL					VARCHAR2(4000),
	SCORE					NUMBER(13, 3),
	MAX_SCORE				NUMBER(10, 0),
	UPLOAD_SCORE			NUMBER(10, 0),
	WEIGHT					NUMBER(15, 5)	 NOT NULL,
	DONT_NORMALISE_SCORE	NUMBER(1, 0)	 NOT NULL,
	HAS_SCORE_EXPRESSION	NUMBER(1, 0)	 NOT NULL,
	HAS_MAX_SCORE_EXPR		NUMBER(1, 0)	 NOT NULL,
	REMEMBER_ANSWER			NUMBER(1, 0)	 NOT NULL,
	COUNT_QUESTION			NUMBER(1, 0)	 NOT NULL,
	ACTION					VARCHAR2(50),
	CONSTRAINT CHK_QV_DNT_NORM_SC_0_1 CHECK (DONT_NORMALISE_SCORE IN (0,1)),
	CONSTRAINT CHK_QV_HAS_SC_EXPR_0_1 CHECK (HAS_SCORE_EXPRESSION IN (0,1)),
	CONSTRAINT CHK_QV_MAX_SC_EXPR_0_1 CHECK (HAS_MAX_SCORE_EXPR IN (0,1)),
	CONSTRAINT CHK_QV_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_VERSION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
    CONSTRAINT FK_QUESTION_VER_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;

CREATE TABLE CSRIMP.QUESTION_OPTION(
	CSRIMP_SESSION_ID			NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	QUESTION_OPTION_ID			NUMBER(10, 0)	 NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		 NOT NULL,
	POS							NUMBER(10, 0)	 NOT NULL,
	LABEL						VARCHAR2(4000)	 NOT NULL,
    SCORE						NUMBER(13, 3),
	COLOR						NUMBER(10, 0),
	LOOKUP_KEY					VARCHAR2(1000),
	MAPS_TO_IND_SID				NUMBER(10, 0),
	OPTION_ACTION				VARCHAR2(50),
	NON_COMPLIANCE_POPUP		NUMBER(1, 0),
	NON_COMP_DEFAULT_ID			NUMBER(10, 0),
	NON_COMPLIANCE_TYPE_ID		NUMBER(10, 0),
	NON_COMPLIANCE_LABEL		VARCHAR2(255),
	NON_COMPLIANCE_DETAIL		VARCHAR2(4000),
	NON_COMP_ROOT_CAUSE			VARCHAR2(4000),
	NON_COMP_SUGGESTED_ACTION	VARCHAR2(4000),
	CONSTRAINT CHK_QO_NON_COMP_POPUP_0_1 CHECK (NON_COMPLIANCE_POPUP IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
    CONSTRAINT FK_QUESTION_OPT_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;

CREATE TABLE CSRIMP.QUESTION_OPTION_NC_TAG(
	CSRIMP_SESSION_ID	  NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    QUESTION_ID           NUMBER(10, 0)    NOT NULL,
    QUESTION_OPTION_ID    NUMBER(10, 0)    NOT NULL,
    QUESTION_VERSION      NUMBER(10, 0)    NOT NULL,
    QUESTION_DRAFT        NUMBER(1)        NOT NULL,
    TAG_ID                NUMBER(10, 0)    NOT NULL,
	CONSTRAINT CHK_QONT_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION_NC_TAG PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_OPTION_ID, QUESTION_VERSION, QUESTION_DRAFT, TAG_ID),
    CONSTRAINT FK_QUESTION_OPT_NC_T_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;

CREATE TABLE CSRIMP.QUESTION_TAG(
	CSRIMP_SESSION_ID	NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    QUESTION_ID			NUMBER(10, 0)	NOT NULL,
    QUESTION_VERSION	NUMBER(10, 0)	NOT NULL,
    TAG_ID				NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT		NUMBER(1)		NOT NULL,
	CONSTRAINT CHK_QT_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0),
    CONSTRAINT PK_QUESTION_TAG PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, TAG_ID),
    CONSTRAINT FK_QUESTION_TAG_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;
  
-- Alter tables
-- qs_question_option_nc_tag
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NULL,
	SURVEY_SID				NUMBER(10, 0)		NULL
);

UPDATE csr.qs_question_option_nc_tag qsnt
   SET qsnt.question_version = qsnt.survey_version,
	   qsnt.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qsnt.app_sid AND qsq.question_id = qsnt.question_id AND qsq.survey_version = qsnt.survey_version);

ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG MODIFY SURVEY_SID NOT NULL;

-- qs_question_option
ALTER TABLE CSR.QS_QUESTION_OPTION ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NULL,
	SURVEY_SID				NUMBER(10, 0)		NULL,
	QUESTION_DRAFT			NUMBER(1)	 		DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_QSQO_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);

UPDATE csr.qs_question_option qso
   SET qso.question_version = qso.survey_version,
	   qso.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qso.app_sid AND qsq.question_id = qso.question_id AND qsq.survey_version = qso.survey_version);
	   
ALTER TABLE CSR.QS_QUESTION_OPTION MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QS_QUESTION_OPTION MODIFY SURVEY_SID NOT NULL;

ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT FK_QSQO_QO
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
    REFERENCES CSR.QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
;

-- quick_survey_question
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NULL,
	QUESTION_DRAFT		NUMBER(1) 		DEFAULT 0 NOT NULL,
	PARENT_VERSION		NUMBER(10, 0) 	NULL,
	CONSTRAINT CHK_QSQ_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);

UPDATE csr.quick_survey_question
   SET question_version = survey_version;
   
UPDATE csr.quick_survey_question   
   SET parent_version = survey_version
 WHERE parent_id IS NOT NULL;
 
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD (
	CONSTRAINT CHK_QSQ_PARENT CHECK ((PARENT_ID IS NULL AND PARENT_VERSION IS NULL) OR (PARENT_ID IS NOT NULL AND PARENT_VERSION IS NOT NULL))
);

ALTER TABLE CSR.QUICK_SURVEY_QUESTION MODIFY QUESTION_VERSION NOT NULL;

ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QSQ_QUESTION_VERSION
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
	REFERENCES CSR.QUESTION_VERSION (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;

ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT UK_QSQ UNIQUE (APP_SID, QUESTION_ID, SURVEY_SID, SURVEY_VERSION);

-- quick_survey_answer
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NULL,
	SURVEY_SID			NUMBER(10, 0) 	NULL
);

UPDATE csr.quick_survey_answer qsa
   SET question_version = survey_version,
       survey_sid = ( SELECT survey_sid FROM csr.quick_survey_response qsr WHERE qsr.app_sid = qsa.app_sid AND qsa.survey_response_id = qsr.survey_response_id );

ALTER TABLE CSR.QUICK_SURVEY_ANSWER MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER MODIFY SURVEY_SID NOT NULL;

ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QSQ_QSA_MEASURE;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QSQ_QSA_MEASURE
    FOREIGN KEY (APP_SID, QUESTION_ID, MEASURE_SID)
    REFERENCES CSR.QUESTION(APP_SID, QUESTION_ID, MEASURE_SID) DEFERRABLE INITIALLY DEFERRED
;

-- issue_survey_answer
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NULL,
	SURVEY_SID			NUMBER(10, 0) 	NULL
);

UPDATE csr.issue_survey_answer isa
   SET isa.question_version = isa.survey_version,
	   isa.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = isa.app_sid AND qsq.question_id = isa.question_id AND qsq.survey_version = isa.survey_version);

ALTER TABLE CSR.ISSUE_SURVEY_ANSWER DROP CONSTRAINT UK_ISSUE_SURVEY_ANSWER;
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD CONSTRAINT UK_ISSUE_SURVEY_ANSWER UNIQUE (SURVEY_RESPONSE_ID, QUESTION_ID, QUESTION_VERSION);
	   
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER MODIFY SURVEY_SID NOT NULL;

-- non_compliance
ALTER TABLE CSR.NON_COMPLIANCE ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NULL,
	QUESTION_DRAFT			NUMBER(1)		NULL,
	CONSTRAINT CHK_NC_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);

UPDATE csr.non_compliance nc
   SET nc.question_draft = 0, nc.question_version = 0
 WHERE nc.question_id IS NOT NULL;

-- TODO: nothing like this existed before, need to check the data on live...
ALTER TABLE CSR.NON_COMPLIANCE ADD CONSTRAINT FK_NON_COMPLIANCE_Q
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
	REFERENCES CSR.QUESTION_VERSION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;

-- qs_answer_file
ALTER TABLE CSR.QS_ANSWER_FILE ADD (
	SURVEY_SID			NUMBER(10, 0)	NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NULL
);

UPDATE csr.qs_answer_file qaf
   SET qaf.question_version = qaf.survey_version,
	   qaf.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qaf.app_sid AND qsq.question_id = qaf.question_id AND qsq.survey_version = qaf.survey_version);

ALTER TABLE	CSR.QS_ANSWER_FILE MODIFY SURVEY_SID NOT NULL;
ALTER TABLE	CSR.QS_ANSWER_FILE MODIFY QUESTION_VERSION NOT NULL;	   

-- drop some temp columns from a separate change
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_DESCRIPTION;
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_PARAM_1;
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_PARAM_2;
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_PARAM_3;

ALTER TABLE CSR.QS_ANSWER_LOG ADD (
	QUESTION_VERSION	NUMBER(10, 0) NULL
);

UPDATE csr.qs_answer_log qsa
   SET question_version = (SELECT survey_version FROM csr.quick_survey_response qsr WHERE qsr.app_sid = qsa.app_sid AND qsa.survey_response_id = qsr.survey_response_id);

ALTER TABLE CSR.QS_ANSWER_LOG MODIFY QUESTION_VERSION NOT NULL;

-- qs_filter_condition
ALTER TABLE CSR.QS_FILTER_CONDITION ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NULL
);

UPDATE csr.qs_filter_condition
   SET question_version = survey_version;

ALTER TABLE CSR.QS_FILTER_CONDITION MODIFY QUESTION_VERSION NOT NULL;

-- quick_survey_question_tag
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG ADD (
	SURVEY_SID			NUMBER(10, 0)	NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NULL
)
;

UPDATE csr.quick_survey_question_tag qsqt
   SET qsqt.question_version = qsqt.survey_version,
	   qsqt.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qsqt.app_sid AND qsq.question_id = qsqt.question_id AND qsq.survey_version = qsqt.survey_version);
	   
ALTER TABLE	CSR.QUICK_SURVEY_QUESTION_TAG MODIFY SURVEY_SID NOT NULL;
ALTER TABLE	CSR.QUICK_SURVEY_QUESTION_TAG MODIFY QUESTION_VERSION NOT NULL;

-- quick_survey_expr
ALTER TABLE CSR.QUICK_SURVEY_EXPR ADD(
	QUESTION_VERSION				NUMBER(10)
);

UPDATE csr.quick_survey_expr
   SET question_version = survey_version
 WHERE question_id IS NOT NULL;

-- question_version column intentionally left null

-- quick_survey_expr_action
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD(
	MANDATORY_QUESTION_VERSION		NUMBER(10, 0),
	SHOW_QUESTION_VERSION			NUMBER(10, 0),
	SHOW_PAGE_VERSION				NUMBER(10, 0)
);

UPDATE csr.quick_survey_expr_action
   SET mandatory_question_version = survey_version
 WHERE mandatory_question_id IS NOT NULL;
 
UPDATE csr.quick_survey_expr_action
   SET show_question_version = survey_version
 WHERE show_question_id IS NOT NULL;
 
UPDATE csr.quick_survey_expr_action
   SET show_page_version = survey_version
 WHERE show_page_id IS NOT NULL; 

-- *_version columns intentionally left nullable

-- chain.higg_question_survey sigh
ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NULL
);

UPDATE chain.higg_question_survey
   SET qs_question_version = survey_version;

ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY MODIFY QS_QUESTION_VERSION NOT NULL;

-- chain.higg_question_option_survey
ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NULL,
	QS_QUESTION_DRAFT				NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_HQOS_QUESTION_DRAFT CHECK (QS_QUESTION_DRAFT = 0)
);

UPDATE chain.higg_question_option_survey
   SET qs_question_version = survey_version;

ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY MODIFY QS_QUESTION_VERSION NOT NULL;

GRANT SELECT, REFERENCES ON CSR.QUESTION_OPTION TO CHAIN;

DECLARE
	v_count NUMBER;
BEGIN
	SELECT COUNT(*) INTO v_count
	FROM all_constraints
	WHERE constraint_name = 'FK_HQS_QS_QO' AND owner = 'CHAIN' AND table_name = 'HIGG_QUESTION_OPTION_SURVEY';

	IF v_count > 0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY DROP CONSTRAINT FK_HQS_QS_QO';
	END IF;
END;
/

ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY ADD CONSTRAINT FK_HQS_QS_QO
	FOREIGN KEY (APP_SID, QS_QUESTION_ID, QS_QUESTION_VERSION, QS_QUESTION_DRAFT, QS_QUESTION_OPTION_ID)
    REFERENCES CSR.QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
;

-- QUICK_SURVEY_QUESTION_TAG primary key change
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG DROP CONSTRAINT PK_QS_QUESTION_TAG DROP INDEX;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG ADD CONSTRAINT PK_QS_QUESTION_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION, TAG_ID);

-- QS_QUESTION_OPTION_NC_TAG primary key change
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG DROP CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG DROP INDEX;
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG ADD CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION, TAG_ID);

-- QS_QUESTION_OPTION primary key change
ALTER TABLE CSR.QS_FILTER_CONDITION DROP CONSTRAINT FK_QS_FIL_COND_CMP_OP;
ALTER TABLE CSR.QS_QUESTION_OPTION DROP CONSTRAINT QS_Q_OPT_PARENT_OPT;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QS_Q_OPT_ANSWER;
ALTER TABLE CSR.QUICK_SURVEY_EXPR DROP CONSTRAINT FK_QUICK_SURVEY_EXPR_QUEST_OPT;
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG DROP CONSTRAINT FK_QSQ_OPT_TAG_OPTION;

ALTER TABLE CSR.QS_QUESTION_OPTION DROP CONSTRAINT PK_QS_QUESTION_OPTION DROP INDEX;
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT PK_QS_QUESTION_OPTION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION);

ALTER TABLE CSR.QS_FILTER_CONDITION ADD CONSTRAINT FK_QS_FIL_COND_CMP_OP
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, COMPARE_TO_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT QS_Q_OPT_PARENT_OPT
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, PARENT_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QS_Q_OPT_ANSWER
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;

ALTER TABLE CSR.QUICK_SURVEY_EXPR ADD CONSTRAINT FK_QUICK_SURVEY_EXPR_QUEST_OPT
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
	REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG ADD CONSTRAINT FK_QSQ_OPT_TAG_OPTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;

-- QUICK_SURVEY_QUESTION primary key change
ALTER TABLE CSR.QS_QUESTION_OPTION DROP CONSTRAINT RefQUICK_SURVEY_QUESTION2195;
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER DROP CONSTRAINT FK_ISS_SURV_ANS_QSTN;
ALTER TABLE CSR.QS_ANSWER_FILE DROP CONSTRAINT FK_QS_ANS_FILE_QSTN_ID;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG DROP CONSTRAINT FK_QS_QUESTION_TAG_QS_QUESTION;
ALTER TABLE CSR.QS_FILTER_CONDITION DROP CONSTRAINT FK_QS_FIL_COND_QN;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT FK_EXPR_SHOW_QUESTION_ID;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT QS_EA_SHOW_PAGE_QUESTION;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT FK_QS_QUES_PARENT_QUES;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QSQ_QSA_MEASUREX;
ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY DROP CONSTRAINT FK_HQS_QS_QUESTION;

ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT PK_QUICK_SURVEY_QUESTION DROP INDEX;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT PK_QUICK_SURVEY_QUESTION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION);
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QS_QUES_PARENT_QUES
    FOREIGN KEY (APP_SID, PARENT_ID, PARENT_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT FK_QSQO_QSQ
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;

ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD CONSTRAINT FK_ISS_SURV_ANS_QSTN
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;

ALTER TABLE CSR.QS_ANSWER_FILE ADD CONSTRAINT FK_QS_ANS_FILE_QSTN_ID
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;

ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG ADD CONSTRAINT FK_QS_QUESTION_TAG_QS_QUESTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QSA_QSQ
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;

ALTER TABLE CSR.QS_FILTER_CONDITION ADD CONSTRAINT FK_QS_FIL_COND_QN
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QUICK_SURVEY_EXPR ADD CONSTRAINT FK_QUICK_SURVEY_EXPR_QSQ
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
	REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT FK_EXPR_SHOW_QUESTION_ID
    FOREIGN KEY (APP_SID, SHOW_QUESTION_ID, SHOW_QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT QS_EA_SHOW_PAGE_QUESTION
    FOREIGN KEY (APP_SID, SHOW_PAGE_ID, SHOW_PAGE_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT FK_EXPR_MANDATORY_QUESTION_ID
    FOREIGN KEY (APP_SID, MANDATORY_QUESTION_ID, MANDATORY_QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY ADD CONSTRAINT FK_HQS_QS_QUESTION
	FOREIGN KEY (APP_SID, QS_QUESTION_ID, QS_QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
	REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;

ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QSQ_Q_MEASURE
    FOREIGN KEY (APP_SID, QUESTION_ID, MEASURE_SID)
    REFERENCES CSR.QUESTION(APP_SID, QUESTION_ID, MEASURE_SID)
;

DROP TABLE CSR.TEMPOR_QUESTION;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMPOR_QUESTION (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	PARENT_ID				NUMBER(10),
	PARENT_VERSION			NUMBER(10),
	POS						NUMBER(10),
	LABEL					VARCHAR2(4000),
	QUESTION_TYPE			VARCHAR2(40),
	SCORE					NUMBER(13,3),
	MAX_SCORE				NUMBER(13,3),
	UPLOAD_SCORE			NUMBER(13,3),
	LOOKUP_KEY				VARCHAR2(255),
	INVERT_SCORE			VARCHAR2(255),
	CUSTOM_QUESTION_TYPE_ID	NUMBER(10),
	WEIGHT					NUMBER(15,5),
	DONT_NORMALISE_SCORE	NUMBER(1),
	HAS_SCORE_EXPRESSION	NUMBER(1),
	HAS_MAX_SCORE_EXPR		NUMBER(1),
	REMEMBER_ANSWER			NUMBER(1),
	COUNT_QUESTION			NUMBER(1),
	ACTION					VARCHAR2(50)
) ON COMMIT DELETE ROWS;

DROP TABLE CSR.TEMP_QUESTION_OPTION;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_QUESTION_OPTION (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	QUESTION_OPTION_ID		NUMBER(10),
	POS						NUMBER(10),
	LABEL					VARCHAR2(4000),
	SCORE					NUMBER(13,3),
	HAS_OVERRIDE			NUMBER(1),
	SCORE_OVERRIDE			NUMBER(13,3),
	HIDDEN					NUMBER(1),
	COLOR					NUMBER(10),
	LOOKUP_KEY				VARCHAR2(255),
	OPTION_ACTION			VARCHAR2(50),
	NON_COMPLIANCE_POPUP	NUMBER(1),
	NON_COMP_DEFAULT_ID		NUMBER(10),
	NON_COMPLIANCE_TYPE_ID	NUMBER(10),
	NON_COMPLIANCE_LABEL	VARCHAR2(255),
	NON_COMPLIANCE_DETAIL	VARCHAR2(4000),
	NON_COMP_ROOT_CAUSE		VARCHAR2(4000),
	NON_COMP_SUGGESTED_ACTION VARCHAR2(4000)
) ON COMMIT DELETE ROWS;

DROP TABLE CSR.TEMP_QUESTION_OPTION_NC_TAG;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_QUESTION_OPTION_NC_TAG (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	QUESTION_OPTION_ID		NUMBER(10),
	TAG_ID					NUMBER(10)
) ON COMMIT DELETE ROWS;

DROP TABLE CSR.TEMP_QUESTION_OPTION_SHOW_Q;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_QUESTION_OPTION_SHOW_Q (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	QUESTION_OPTION_ID		NUMBER(10),
	SHOW_QUESTION_ID		NUMBER(10),
	SHOW_QUESTION_VERSION	NUMBER(10)
) ON COMMIT DELETE ROWS;

-- csrimp/exp alters
ALTER TABLE CSRIMP.QS_QUESTION_OPTION_NC_TAG ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NOT NULL,
	SURVEY_SID				NUMBER(10, 0)		NOT NULL
);

ALTER TABLE CSRIMP.QS_QUESTION_OPTION_NC_TAG DROP CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG DROP INDEX;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION_NC_TAG ADD CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG
	PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION, TAG_ID);
		
ALTER TABLE CSRIMP.QS_QUESTION_OPTION ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NOT NULL,
	SURVEY_SID				NUMBER(10, 0)		NOT NULL,
	QUESTION_DRAFT			NUMBER(1)	 		NOT NULL,
	CONSTRAINT CHK_QSQO_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);

ALTER TABLE CSRIMP.QS_QUESTION_OPTION DROP CONSTRAINT PK_QS_QUESTION_OPTION DROP INDEX;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION ADD CONSTRAINT PK_QS_QUESTION_OPTION
	PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION);

ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION ADD(
	QUESTION_VERSION			NUMBER(10, 0) 	NOT NULL,
	QUESTION_DRAFT				NUMBER(1) 		NOT NULL,
	PARENT_VERSION				NUMBER(10, 0) 	NULL,
	CONSTRAINT CHK_QSQ_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0),
	CONSTRAINT CHK_QSQ_PARENT CHECK ((PARENT_ID IS NULL AND PARENT_VERSION IS NULL) OR (PARENT_ID IS NOT NULL AND PARENT_VERSION IS NOT NULL))
);

ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION DROP CONSTRAINT PK_QUICK_SURVEY_QUESTION DROP INDEX;
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION ADD CONSTRAINT PK_QUICK_SURVEY_QUESTION
 PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION);
	
ALTER TABLE CSRIMP.QUICK_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NOT NULL,
	SURVEY_SID			NUMBER(10, 0) 	NOT NULL
);

ALTER TABLE CSRIMP.ISSUE_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NOT NULL,
	SURVEY_SID			NUMBER(10, 0) 	NOT NULL
);

ALTER TABLE CSRIMP.NON_COMPLIANCE ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NULL,
	QUESTION_DRAFT			NUMBER(1)		NULL,
	CONSTRAINT CHK_NC_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);

ALTER TABLE CSRIMP.QS_ANSWER_FILE ADD (
	SURVEY_SID			NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NOT NULL
);

ALTER TABLE CSRIMP.QS_ANSWER_LOG ADD (
	QUESTION_VERSION	NUMBER(10, 0) NOT NULL
);

ALTER TABLE CSRIMP.QS_FILTER_CONDITION ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NOT NULL
);

ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION_TAG ADD (
	SURVEY_SID			NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NOT NULL
);

ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR ADD(
	QUESTION_VERSION	NUMBER(10)
);

ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR_ACTION ADD(
	MANDATORY_QUESTION_VERSION		NUMBER(10, 0),
	SHOW_QUESTION_VERSION			NUMBER(10, 0),
	SHOW_PAGE_VERSION				NUMBER(10, 0)
);

ALTER TABLE CSRIMP.HIGG_QUESTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NOT NULL
);

ALTER TABLE CSRIMP.HIGG_QUESTION_OPTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NOT NULL,
	QS_QUESTION_DRAFT				NUMBER(1) NOT NULL,
	CONSTRAINT CHK_HQOS_QUESTION_DRAFT CHECK (QS_QUESTION_DRAFT = 0)
);

-- indexes from unindex
create index chain.ix_higg_question_qs_question_o on chain.higg_question_option_survey (app_sid, qs_question_option_id, qs_question_id, qs_question_version, qs_question_draft);
create index chain.ix_higg_question_qs_question_i on chain.higg_question_survey (app_sid, qs_question_id, qs_question_version, survey_sid, survey_version);
create index csr.ix_issue_survey__question_id_q on csr.issue_survey_answer (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_non_complianc_question_id_q on csr.non_compliance (app_sid, question_id, question_version, question_draft);
create index csr.ix_qs_answer_fil_question_id_q on csr.qs_answer_file (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_qs_filter_con_question_id_q on csr.qs_filter_condition (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_qs_filter_con_question_id_2 on csr.qs_filter_condition (app_sid, question_id, question_version, compare_to_option_id, survey_sid, survey_version);
create index csr.ix_qs_question_o_question_id_q on csr.qs_question_option (app_sid, question_id, question_version, parent_option_id, survey_sid, survey_version);
create index csr.ix_qs_question_o_question_id_2 on csr.qs_question_option (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_qs_question_o_question_opti on csr.qs_question_option (app_sid, question_option_id, question_id, question_version, question_draft);
create index csr.ix_question_question_type on csr.question (question_type);
create index csr.ix_question_maps_to_ind_s on csr.question (app_sid, maps_to_ind_sid, measure_sid);
create index csr.ix_question_custom_questi on csr.question (app_sid, custom_question_type_id);
create index csr.ix_question_owned_by_surv on csr.question (app_sid, owned_by_survey_sid);
create index csr.ix_question_opti_question_opti on csr.question_option_nc_tag (app_sid, question_option_id, question_id, question_version, question_draft);
create index csr.ix_question_tag_question_id_q on csr.question_tag (app_sid, question_id, question_version, question_draft);
create index csr.ix_question_vers_parent_id on csr.question_version (app_sid, parent_id);
create index csr.ix_quick_survey__question_id_m on csr.quick_survey_answer (app_sid, question_id, measure_sid);
create index csr.ix_quick_survey__question_id_q on csr.quick_survey_answer (app_sid, question_id, question_version, question_option_id, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_2 on csr.quick_survey_answer (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_3 on csr.quick_survey_expr (app_sid, question_id, question_version, question_option_id, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_4 on csr.quick_survey_expr (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__show_question on csr.quick_survey_expr_action (app_sid, show_question_id, show_question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__show_page_id1 on csr.quick_survey_expr_action (app_sid, show_page_id, show_page_version, survey_sid, survey_version);
create index csr.ix_quick_survey__mandatory_que on csr.quick_survey_expr_action (app_sid, mandatory_question_id, mandatory_question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__parent_id_que on csr.quick_survey_question (app_sid, parent_id, question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_5 on csr.quick_survey_question (app_sid, question_id, question_version, question_draft);
create index csr.ix_quick_srv_q_question_id_m on csr.quick_survey_question (app_sid, question_id, measure_sid);
create index csr.ix_quick_survey__parent_id_par on csr.quick_survey_question (app_sid, parent_id, parent_version, survey_sid, survey_version);

-- *** Grants ***
grant select,insert,update,delete on csrimp.question to tool_user;
grant select,insert,update,delete on csrimp.question_version to tool_user;
grant select,insert,update,delete on csrimp.question_option to tool_user;
grant select,insert,update,delete on csrimp.question_option_nc_tag to tool_user;
grant select,insert,update,delete on csrimp.question_tag to tool_user;

grant select,insert,update on csr.question to csrimp;
grant select,insert,update on csr.question_version to csrimp;
grant select,insert,update on csr.question_option to csrimp;
grant select,insert,update on csr.question_option_nc_tag to csrimp;
grant select,insert,update on csr.question_tag to csrimp;

GRANT SELECT ON csr.question_type TO chain;

-- ** Cross schema constraints ***

-- *** Views ***
-- Please paste the content of the view and add a comment referencing the path of the create_views file which will contain your view changes.
CREATE OR REPLACE VIEW csr.v$question AS
	SELECT qv.app_sid, qv.question_id, qv.question_version, qv.question_draft, qv.parent_id, qv.parent_version, qv.label, qv.pos, qv.score, qv.max_score, qv.upload_score, 
		qv.weight, qv.dont_normalise_score, qv.has_score_expression, qv.has_max_score_expr, qv.remember_answer, qv.count_question, qv.action,
		q.owned_by_survey_sid, q.question_type, q.custom_question_type_id, q.lookup_key, q.maps_to_ind_sid, q.measure_sid
	  FROM csr.question_version qv
	  JOIN csr.question q ON q.question_id = qv.question_id AND q.app_sid = qv.app_sid;
  
CREATE OR REPLACE VIEW csr.v$quick_survey_question AS
	SELECT qsq.question_id, qsq.question_version, qsq.survey_sid, qsq.survey_version, qsq.is_visible, q.label, q.parent_id, q.parent_version, q.pos, 
	  q.score, q.max_score, q.upload_score, q.weight, q.dont_normalise_score, q.has_score_expression, q.has_max_score_expr, q.remember_answer, q.count_question, 
	  q.action,	q.owned_by_survey_sid, q.question_type, q.custom_question_type_id, q.lookup_key, q.maps_to_ind_sid, q.measure_sid
	  FROM csr.quick_survey_question qsq
	  JOIN csr.v$question q ON qsq.question_id = q.question_id AND qsq.question_version = q.question_version AND qsq.app_sid = q.app_sid AND qsq.question_draft = q.question_draft AND (q.owned_by_survey_sid IS NULL OR q.owned_by_survey_sid = qsq.survey_sid)
	 WHERE qsq.question_draft = 0;


-- *** Data changes ***
-- RLS

-- Data

-- ** New package grants **

-- *** Conditional Packages ***

-- *** Packages ***
@..\quick_survey_pkg
@..\schema_pkg

@..\csr_app_body
@..\quick_survey_body
@..\csrimp\imp_body
@..\schema_body
@..\chain\higg_body
@..\chain\higg_setup_body
@..\testdata_body

@update_tail
