define version=3059
define minor_version=0
define is_combined=1
@update_header

-- clean out junk in csrimp
begin
for r in (select table_name from all_tables where owner='CSRIMP' and table_name!='CSRIMP_SESSION') loop
execute immediate 'truncate table csrimp.'||r.table_name;
end loop;
delete from csrimp.csrimp_session;
commit;
end;
/
drop table chain.company_product_version_tr;
drop table chain.company_product_version;
drop view chain.v$company_product_current_vers;
drop view chain.v$company_product_version;
/* COMPANY PRODUCT */
delete from chain.company_product;
ALTER TABLE chain.company_product DROP CONSTRAINT fk_company_product_edit_user;
ALTER TABLE chain.company_product DROP COLUMN last_edited_by;
ALTER TABLE chain.company_product DROP COLUMN last_edited_dtm;
ALTER TABLE chain.company_product ADD (
	SKU						VARCHAR2(1024) NOT NULL,
	IS_ACTIVE					NUMBER(1) NOT NULL
);
CREATE UNIQUE INDEX CHAIN.IX_COMPANY_PRODUCT_SKU ON CHAIN.COMPANY_PRODUCT(APP_SID, COMPANY_SID, LOWER(SKU));
CREATE TABLE chain.company_product_tr (
	app_sid					NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_id				NUMBER(10) NOT NULL,
	lang					VARCHAR2(10) NOT NULL,
	description				VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPANY_PRODUCT_VERSION_TR PRIMARY KEY (app_sid, product_id, lang),
	CONSTRAINT FK_COMPANY_PRODUCT_VERSION_TR FOREIGN KEY (app_sid, product_id) REFERENCES chain.company_product (app_sid, product_id)
);
/* SUPPLIED PRODUCT */
CREATE SEQUENCE chain.product_supplier_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE TABLE chain.product_supplier (
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_id					NUMBER(10) NOT NULL,
	product_supplier_id			NUMBER(10) NOT NULL,
	purchaser_company_sid		NUMBER(10) NOT NULL,
	supplier_company_sid		NUMBER(10) NOT NULL,
	start_dtm					DATE NOT NULL,
	end_dtm						DATE,
	CONSTRAINT pk_product_supplier PRIMARY KEY (app_sid, product_supplier_id),
	CONSTRAINT uk_product_supplier UNIQUE (product_id, purchaser_company_sid, supplier_company_sid)
);
ALTER TABLE chain.product_supplier ADD CONSTRAINT fk_product_supplier_rel
	FOREIGN KEY (app_sid, supplier_company_sid, purchaser_company_sid) 
	REFERENCES chain.supplier_relationship(app_sid, supplier_company_sid, purchaser_company_sid);
	
ALTER TABLE chain.product_supplier ADD CONSTRAINT fk_product_supplier_product
	FOREIGN KEY (app_sid, product_id)
	REFERENCES chain.company_product (app_sid, product_id);
/* PLUGINS */
DROP TABLE chain.product_header;
DROP TABLE chain.product_tab;
DROP TABLE csrimp.chain_product_header;
DROP TABLE csrimp.chain_product_tab;
CREATE TABLE CHAIN.PRODUCT_HEADER(
	APP_SID                NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_HEADER_ID      NUMBER(10, 0)     NOT NULL,
	PLUGIN_ID              NUMBER(10, 0)     NOT NULL,
	PLUGIN_TYPE_ID         NUMBER(10, 0)     NOT NULL,
	POS                    NUMBER(10, 0)     NOT NULL,
	VIEWING_OWN_PRODUCT    NUMBER(1),
	VIEWING_AS_SUPPLIER    NUMBER(1),
	PRODUCT_COL_SID		   NUMBER(10) NULL,
	USER_COMPANY_COL_SID   NUMBER(10) NULL,
	CONSTRAINT CHK_PRD_HEAD_VIEW_OWN_CMP_1_0 CHECK (VIEWING_OWN_PRODUCT IS NULL OR VIEWING_OWN_PRODUCT IN (1, 0)),
	CONSTRAINT CHK_PRD_HEAD_VIEW_AS_SUPP_1_0 CHECK (VIEWING_AS_SUPPLIER IS NULL OR VIEWING_AS_SUPPLIER IN (1, 0)),
	CONSTRAINT PRODUCT_HEADER_PK PRIMARY KEY (APP_SID, PRODUCT_HEADER_ID)
);
CREATE TABLE CHAIN.PRODUCT_HEADER_PRODUCT_TYPE (
	APP_SID                NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_HEADER_ID      NUMBER(10, 0)     NOT NULL,
	PRODUCT_TYPE_ID		   NUMBER(10, 0)     NOT NULL,
	CONSTRAINT PK_PRODUCT_HEADER_PRODUCT_TYPE PRIMARY KEY (APP_SID, PRODUCT_HEADER_ID, PRODUCT_TYPE_ID)
);
ALTER TABLE CHAIN.PRODUCT_HEADER_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_HEADER_PROD_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_HEADER_ID)
    REFERENCES CHAIN.PRODUCT_HEADER(APP_SID, PRODUCT_HEADER_ID)
;
ALTER TABLE CHAIN.PRODUCT_HEADER_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_HEADER_PROD_TYPE_PT
    FOREIGN KEY (APP_SID, PRODUCT_TYPE_ID)
    REFERENCES CHAIN.PRODUCT_TYPE(APP_SID, PRODUCT_TYPE_ID)
;
CREATE TABLE CHAIN.PRODUCT_HEADER_COMPANY_TYPE (
	APP_SID                NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_HEADER_ID      NUMBER(10, 0)     NOT NULL,
	COMPANY_TYPE_ID		   NUMBER(10, 0)     NOT NULL,
	CONSTRAINT PK_PRODUCT_HEADER_COMPANY_TYPE PRIMARY KEY (APP_SID, PRODUCT_HEADER_ID, COMPANY_TYPE_ID)
);
ALTER TABLE CHAIN.PRODUCT_HEADER_COMPANY_TYPE ADD CONSTRAINT FK_PRODUCT_HEADER_COMP_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_HEADER_ID)
    REFERENCES CHAIN.PRODUCT_HEADER(APP_SID, PRODUCT_HEADER_ID)
;
ALTER TABLE CHAIN.PRODUCT_HEADER_COMPANY_TYPE ADD CONSTRAINT FK_PRODUCT_HEADER_COMP_TYPE_CT
    FOREIGN KEY (APP_SID, COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
CREATE TABLE CHAIN.PRODUCT_TAB(
	APP_SID                NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_TAB_ID         NUMBER(10, 0)     NOT NULL,
	PLUGIN_ID              NUMBER(10, 0)     NOT NULL,
	PLUGIN_TYPE_ID         NUMBER(10, 0)     NOT NULL,
	POS                    NUMBER(10, 0)     NOT NULL,
	LABEL                  VARCHAR2(254)     NOT NULL,
	VIEWING_OWN_PRODUCT    NUMBER(1),
	VIEWING_AS_SUPPLIER    NUMBER(1),
	PRODUCT_COL_SID		   NUMBER(10) NULL,
	USER_COMPANY_COL_SID   NUMBER(10) NULL,
	CONSTRAINT CHK_PRD_TAB_VIEW_OWN_CMP_1_0 CHECK (VIEWING_OWN_PRODUCT IS NULL OR VIEWING_OWN_PRODUCT IN (1, 0)),
	CONSTRAINT CHK_PRD_TAB_VIEW_AS_SUPP_1_0 CHECK (VIEWING_AS_SUPPLIER IS NULL OR VIEWING_AS_SUPPLIER IN (1, 0)),
	CONSTRAINT PRODUCT_TAB_PK PRIMARY KEY (APP_SID, PRODUCT_TAB_ID)
);
CREATE TABLE CHAIN.PRODUCT_TAB_PRODUCT_TYPE (
	APP_SID                NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_TAB_ID         NUMBER(10, 0)     NOT NULL,
	PRODUCT_TYPE_ID		   NUMBER(10, 0)     NOT NULL,
	CONSTRAINT PK_PRODUCT_TAB_PRODUCT_TYPE PRIMARY KEY (APP_SID, PRODUCT_TAB_ID, PRODUCT_TYPE_ID)
);
ALTER TABLE CHAIN.PRODUCT_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_TAB_PROD_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_TAB_ID)
    REFERENCES CHAIN.PRODUCT_TAB(APP_SID, PRODUCT_TAB_ID)
;
ALTER TABLE CHAIN.PRODUCT_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_TAB_PROD_TYPE_PT
    FOREIGN KEY (APP_SID, PRODUCT_TYPE_ID)
    REFERENCES CHAIN.PRODUCT_TYPE(APP_SID, PRODUCT_TYPE_ID)
;
CREATE TABLE CHAIN.PRODUCT_TAB_COMPANY_TYPE (
	APP_SID                NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_TAB_ID         NUMBER(10, 0)     NOT NULL,
	COMPANY_TYPE_ID		   NUMBER(10, 0)     NOT NULL,
	CONSTRAINT PK_PRODUCT_TAB_COMPANY_TYPE PRIMARY KEY (APP_SID, PRODUCT_TAB_ID, COMPANY_TYPE_ID)
);
ALTER TABLE CHAIN.PRODUCT_TAB_COMPANY_TYPE ADD CONSTRAINT FK_PRODUCT_TAB_COMP_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_TAB_ID)
    REFERENCES CHAIN.PRODUCT_TAB(APP_SID, PRODUCT_TAB_ID)
;
ALTER TABLE CHAIN.PRODUCT_TAB_COMPANY_TYPE ADD CONSTRAINT FK_PRODUCT_TAB_COMP_TYPE_CT
    FOREIGN KEY (APP_SID, COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
CREATE TABLE CSRIMP.CHAIN_PRODUCT_HEADER (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_HEADER_ID      NUMBER(10, 0)     NOT NULL,
	PLUGIN_ID              NUMBER(10, 0)     NOT NULL,
	PLUGIN_TYPE_ID         NUMBER(10, 0)     NOT NULL,
	POS                    NUMBER(10, 0)     NOT NULL,
	VIEWING_OWN_PRODUCT    NUMBER(1),
	VIEWING_AS_SUPPLIER    NUMBER(1),
	PRODUCT_COL_SID		   NUMBER(10) NULL,
	USER_COMPANY_COL_SID   NUMBER(10) NULL,
	CONSTRAINT PK_CHAIN_PRODUCT_HEADER PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_HEADER_ID),
	CONSTRAINT FK_CHAIN_PRODUCT_HEADER_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_PRODUCT_TAB (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_TAB_ID         NUMBER(10, 0)     NOT NULL,
	PLUGIN_ID              NUMBER(10, 0)     NOT NULL,
	PLUGIN_TYPE_ID         NUMBER(10, 0)     NOT NULL,
	POS                    NUMBER(10, 0)     NOT NULL,
	LABEL                  VARCHAR2(254)     NOT NULL,
	VIEWING_OWN_PRODUCT    NUMBER(1),
	VIEWING_AS_SUPPLIER    NUMBER(1),
	PRODUCT_COL_SID		   NUMBER(10) NULL,
	USER_COMPANY_COL_SID   NUMBER(10) NULL,
	CONSTRAINT PK_CHAIN_PRODUCT_TAB PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_TAB_ID),
	CONSTRAINT FK_CHAIN_PRODUCT_TAB_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
/* METRICS */
CREATE TABLE chain.product_metric_agg_rule (
	rule_type_id				NUMBER(2) NOT NULL,
	label						VARCHAR2(255) NOT NULL,
	CONSTRAINT pk_product_metric_agg_rule PRIMARY KEY (rule_type_id)
);
CREATE TABLE chain.product_metric_ind (
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	ind_sid						NUMBER(10) NOT NULL,
	agg_rule_type_id			NUMBER(2) NOT NULL,
	CONSTRAINT pk_product_metric_ind PRIMARY KEY (app_sid, ind_sid)
);
ALTER TABLE chain.product_metric_ind ADD CONSTRAINT fk_product_metric_ind_rule_typ
	FOREIGN KEY (agg_rule_type_id)
	REFERENCES chain.product_metric_agg_rule (rule_type_id);
CREATE SEQUENCE chain.product_metric_val_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE TABLE chain.product_metric_val (
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_metric_val_id		NUMBER(10) NOT NULL,
	product_id					NUMBER(10) NOT NULL,
	ind_sid						NUMBER(10) NOT NULL,
	start_dtm					DATE NOT NULL,
	end_dtm						DATE NOT NULL,
	val_number					NUMBER(24, 10) NOT NULL,
	entered_as_val_number		NUMBER(24, 10),
	measure_conversion_id		NUMBER(10),
	entered_dtm					DATE,
	entered_by_sid				NUMBER(10) NOT NULL,
	CONSTRAINT pk_product_metric_val PRIMARY KEY (app_sid, product_metric_val_id),
	CONSTRAINT uk_product_metric_val UNIQUE (app_sid, product_id, ind_sid, start_dtm),
	CONSTRAINT ck_product_metric_val_dtm CHECK (start_dtm < end_dtm)
);
ALTER TABLE chain.product_metric_val ADD CONSTRAINT fk_product_metric_val_product
	FOREIGN KEY (app_sid, product_id)
	REFERENCES chain.company_product (app_sid, product_id);
ALTER TABLE chain.product_metric_val ADD CONSTRAINT fk_product_metric_val_ind
	FOREIGN KEY (app_sid, ind_sid)
	REFERENCES chain.product_metric_ind (app_sid, ind_sid);
CREATE SEQUENCE chain.product_supplr_mtrc_val_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
	
CREATE TABLE chain.product_supplier_metric_val (
	app_sid							NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	supplier_product_metric_val_id	NUMBER(10) NOT NULL,
	product_supplier_id				NUMBER(10) NOT NULL,
	ind_sid							NUMBER(10) NOT NULL,
	start_dtm						DATE NOT NULL,
	end_dtm							DATE NOT NULL,
	val_number						NUMBER(24, 10) NOT NULL,
	entered_as_val_number			NUMBER(24, 10),
	measure_conversion_id			NUMBER(10),
	entered_dtm						DATE,
	entered_by_sid					NUMBER(10) NOT NULL,
	CONSTRAINT pk_product_supplier_metric_val PRIMARY KEY (app_sid, supplier_product_metric_val_id),
	CONSTRAINT uk_product_supplier_metric_val UNIQUE (app_sid, product_supplier_id, ind_sid, start_dtm),
	CONSTRAINT ck_product_supplr_mtrc_vl_dtm CHECK (start_dtm < end_dtm)
);
ALTER TABLE chain.product_supplier_metric_val ADD CONSTRAINT fk_product_supplr_mtrc_prduct
	FOREIGN KEY (app_sid, product_supplier_id)
	REFERENCES chain.product_supplier (app_sid, product_supplier_id);
ALTER TABLE chain.product_supplier_metric_val ADD CONSTRAINT fk_product_supplr_mtrc_vl_ind
	FOREIGN KEY (app_sid, ind_sid)
	REFERENCES chain.product_metric_ind (app_sid, ind_sid);	
	
/* CERTIFICATIONS */
CREATE TABLE chain.company_product_required_cert	(
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_id					NUMBER(10) NOT NULL,
	certification_type_id		NUMBER(10) NOT NULL,
	from_dtm					DATE NOT NULL,
	to_dtm						DATE,
	CONSTRAINT pk_company_product_reqrd_crt PRIMARY KEY (app_sid, product_id, certification_type_id)
);
ALTER TABLE chain.company_product_required_cert ADD CONSTRAINT fk_cmpny_prdct_rqrd_crt_prdct
	FOREIGN KEY (app_sid, product_id)
	REFERENCES chain.company_product (app_sid, product_id);
	
CREATE TABLE chain.company_product_certification (
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_id					NUMBER(10) NOT NULL,
	certification_id			NUMBER(10) NOT NULL,
	applied_dtm					DATE NOT NULL,
	CONSTRAINT pk_company_product_certificatn PRIMARY KEY (app_sid, product_id, certification_id)
);	
ALTER TABLE chain.company_product_certification ADD CONSTRAINT fk_company_product_cert_prdct
	FOREIGN KEY (app_sid, product_id)
	REFERENCES chain.company_product (app_sid, product_id);
CREATE TABLE chain.product_supplier_certification (
	app_sid						NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	product_supplier_id			NUMBER(10) NOT NULL,
	certification_id			NUMBER(10) NOT NULL,
	applied_dtm					DATE NOT NULL,
	CONSTRAINT pk_product_supplier_certifictn PRIMARY KEY (app_sid, product_supplier_id, certification_id)
);	
ALTER TABLE chain.product_supplier_certification ADD CONSTRAINT fk_product_supplier_cert_prdct
	FOREIGN KEY (app_sid, product_supplier_id)
	REFERENCES chain.product_supplier (app_sid, product_supplier_id);
	
CREATE SEQUENCE CHAIN.PRODUCT_SUPPLIER_TAB_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE TABLE CHAIN.PRODUCT_SUPPLIER_TAB(
	APP_SID						NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_SUPPLIER_TAB_ID     NUMBER(10, 0)     NOT NULL,
	PLUGIN_ID					NUMBER(10, 0)     NOT NULL,
	PLUGIN_TYPE_ID				NUMBER(10, 0)     NOT NULL,
	POS							NUMBER(10, 0)     NOT NULL,
	LABEL						VARCHAR2(254)     NOT NULL,
	VIEWING_OWN_PRODUCT			NUMBER(1),
	VIEWING_AS_SUPPLIER			NUMBER(1),
	CONSTRAINT CK_PRD_SUP_TAB_VW_OWN_CMP_1_0 CHECK (VIEWING_OWN_PRODUCT IS NULL OR VIEWING_OWN_PRODUCT IN (1, 0)),
	CONSTRAINT CK_PRD_SUP_TAB_VW_AS_SUPP_1_0 CHECK (VIEWING_AS_SUPPLIER IS NULL OR VIEWING_AS_SUPPLIER IN (1, 0)),
	CONSTRAINT PRODUCT_SUPPLIER_TAB_PK PRIMARY KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID)
);
CREATE TABLE CHAIN.PROD_SUPP_TAB_PRODUCT_TYPE (
	APP_SID						NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_SUPPLIER_TAB_ID     NUMBER(10, 0)     NOT NULL,
	PRODUCT_TYPE_ID				NUMBER(10, 0)     NOT NULL,
	CONSTRAINT PK_PROD_SUPP_TAB_PRODUCT_TYPE PRIMARY KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID, PRODUCT_TYPE_ID)
);
ALTER TABLE CHAIN.PROD_SUPP_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PROD_SUPP_TAB_PROD_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID)
    REFERENCES CHAIN.PRODUCT_SUPPLIER_TAB(APP_SID, PRODUCT_SUPPLIER_TAB_ID)
;
ALTER TABLE CHAIN.PROD_SUPP_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PROD_SUPP_TAB_PROD_TYPE_PT
    FOREIGN KEY (APP_SID, PRODUCT_TYPE_ID)
    REFERENCES CHAIN.PRODUCT_TYPE(APP_SID, PRODUCT_TYPE_ID)
;
CREATE TABLE CHAIN.PROD_SUPP_TAB_COMPANY_TYPE (
	APP_SID						NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_SUPPLIER_TAB_ID     NUMBER(10, 0)     NOT NULL,
	COMPANY_TYPE_ID				NUMBER(10, 0)     NOT NULL,
	CONSTRAINT PK_PROD_SUPP_TAB_COMPANY_TYPE PRIMARY KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID, COMPANY_TYPE_ID)
);
ALTER TABLE CHAIN.PROD_SUPP_TAB_COMPANY_TYPE ADD CONSTRAINT FK_PROD_SUPP_TAB_COMP_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID)
    REFERENCES CHAIN.PRODUCT_SUPPLIER_TAB(APP_SID, PRODUCT_SUPPLIER_TAB_ID)
;
ALTER TABLE CHAIN.PROD_SUPP_TAB_COMPANY_TYPE ADD CONSTRAINT FK_PROD_SUPP_TAB_COMP_TYPE_CT
    FOREIGN KEY (APP_SID, COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
CREATE TABLE csr.compliance_permit_type (
	app_sid							NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	permit_type_id					NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_compliance_permit_type
		PRIMARY KEY (app_sid, permit_type_id)
);
CREATE SEQUENCE csr.compliance_permit_type_seq;
CREATE TABLE csr.compliance_permit_sub_type (
	app_sid							NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	permit_type_id					NUMBER(10,0) NOT NULL,
	permit_sub_type_id				NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_compliance_permit_sub_type
		PRIMARY KEY (app_sid, permit_type_id, permit_sub_type_id),
	CONSTRAINT fk_permit_sub_type
		FOREIGN KEY (app_sid, permit_type_id)
		REFERENCES csr.compliance_permit_type (app_sid, permit_type_id)
);
CREATE SEQUENCE csr.compliance_permit_sub_type_seq;
CREATE TABLE csr.compliance_condition_type (
	app_sid							NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	condition_type_id				NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_compliance_condition_type
		PRIMARY KEY (app_sid, condition_type_id)
);
CREATE SEQUENCE csr.compliance_condition_type_seq;
CREATE TABLE csr.compliance_condition_sub_type (
	app_sid							NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	condition_type_id				NUMBER(10,0) NOT NULL,
	condition_sub_type_id			NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_condition_sub_type
		PRIMARY KEY (app_sid, condition_type_id, condition_sub_type_id),
	CONSTRAINT fk_condition_sub_type
		FOREIGN KEY (app_sid, condition_type_id)
		REFERENCES csr.compliance_condition_type (app_sid, condition_type_id)
);
CREATE SEQUENCE csr.compliance_cond_sub_type_seq;
CREATE TABLE csr.compliance_activity_type (
	app_sid							NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	activity_type_id				NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_compliance_activity_type
		PRIMARY KEY (app_sid, activity_type_id)
);
CREATE SEQUENCE csr.compliance_activity_type_seq;
CREATE TABLE csr.compliance_application_type (
	app_sid							NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	application_type_id				NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_compliance_application_type
		PRIMARY KEY (app_sid, application_type_id)
);
CREATE SEQUENCE csr.compliance_application_tp_seq;
CREATE TABLE csr.compliance_permit (
	app_sid							NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	compliance_permit_id			NUMBER(10,0) NOT NULL,
	region_sid						NUMBER(10,0) NOT NULL,
	flow_item_id					NUMBER(10,0) NOT NULL,
	title							VARCHAR2(1024) NOT NULL,
	details							CLOB,
	permit_reference				VARCHAR2(255),
	activity_start_dtm				DATE,
	activity_end_dtm				DATE,
	permit_type_id					NUMBER(10,0) NOT NULL,
	permit_sub_type_id				NUMBER(10,0) NOT NULL,
	permit_start_dtm				DATE,
	permit_end_dtm					DATE,
	activity_type_id				NUMBER(10,0) NOT NULL,
    CONSTRAINT pk_compliance_permit
		PRIMARY KEY (app_sid, compliance_permit_id),
	CONSTRAINT fk_compliance_permit_region
		FOREIGN KEY (app_sid, region_sid) 
		REFERENCES csr.region (app_sid, region_sid),
	CONSTRAINT fk_compliance_permit_type
		FOREIGN KEY (app_sid, permit_type_id)
		REFERENCES csr.compliance_permit_type (app_sid, permit_type_id),
	CONSTRAINT fk_compliance_permit_sub_type
		FOREIGN KEY (app_sid, permit_type_id, permit_sub_type_id)
		REFERENCES csr.compliance_permit_sub_type (app_sid, permit_type_id, permit_sub_type_id),
	CONSTRAINT fk_compliance_activity_type
		FOREIGN KEY (app_sid, activity_type_id)
		REFERENCES csr.compliance_activity_type (app_sid, activity_type_id)
);
CREATE UNIQUE INDEX csr.uk_cp_permit_reference ON csr.compliance_permit 
	(app_sid, NVL(LOWER(permit_reference), compliance_permit_id));
CREATE INDEX csr.ix_compliance_permit_region 
	ON csr.compliance_permit (app_sid, region_sid);
CREATE INDEX csr.ix_compliance_permit_type 
	ON csr.compliance_permit (app_sid, permit_type_id, permit_sub_type_id);
CREATE INDEX csr.ix_compliance_activity_type 
	ON csr.compliance_permit (app_sid, activity_type_id);
CREATE SEQUENCE csr.compliance_permit_seq;
CREATE TABLE csr.compliance_permit_application  (
	app_sid							NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	permit_application_id			NUMBER(10,0) NOT NULL,
	permit_id						NUMBER(10,0) NOT NULL,
	notes							CLOB,
	application_reference			VARCHAR2(255),
	application_type_id				NUMBER(10) NOT NULL,
	submission_dtm					DATE,
	duly_made_dtm					DATE,
	determined_dtm					DATE,
	CONSTRAINT pk_compliance_permit_applicati
		PRIMARY KEY (app_sid, permit_application_id),
	CONSTRAINT fk_cpa_cp
		FOREIGN KEY (app_sid, permit_id)
		REFERENCES csr.compliance_permit (app_sid, compliance_permit_id)
);
CREATE SEQUENCE csr.compliance_permit_appl_seq;
CREATE UNIQUE INDEX csr.uk_cp_permit_app_reference ON csr.compliance_permit_application 
	(app_sid, NVL(LOWER(application_reference), permit_application_id));
CREATE INDEX csr.ix_cpa_cpat
    ON csr.compliance_permit_application (app_sid, application_type_id); 
CREATE INDEX csr.ix_cpa_permit
    ON csr.compliance_permit_application (app_sid, permit_id, permit_application_id);
CREATE TABLE csr.compliance_permit_condition (
	app_sid							NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	compliance_item_id				NUMBER(10,0) NOT NULL,
	compliance_permit_id			NUMBER(10,0) NOT NULL,
	condition_type_id				NUMBER(10,0) NOT NULL,
	condition_sub_type_id			NUMBER(10,0) NOT NULL,
    CONSTRAINT pk_compliance_permit_condition
		PRIMARY KEY (app_sid, compliance_item_id),
	CONSTRAINT fk_compliance_permit_cond
		FOREIGN KEY (app_sid, compliance_item_id) 
		REFERENCES csr.compliance_item (app_sid, compliance_item_id),
	CONSTRAINT fk_cpc_cp
		FOREIGN KEY (app_sid, compliance_permit_id) 
		REFERENCES csr.compliance_permit (app_sid, compliance_permit_id),
	CONSTRAINT fk_compliance_permit_cond_type
		FOREIGN KEY (app_sid, condition_type_id)
		REFERENCES csr.compliance_condition_type (app_sid, condition_type_id),
	CONSTRAINT fk_cpc_cct
		FOREIGN KEY (app_sid, condition_type_id, condition_sub_type_id)
		REFERENCES csr.compliance_condition_sub_type (app_sid, condition_type_id, condition_sub_type_id)
);
CREATE INDEX csr.ix_compliance_permit_cond_type
	ON csr.compliance_permit_condition (app_sid, condition_type_id, condition_sub_type_id);
CREATE INDEX csr.ix_compliance_pe_compliance_pe 
	ON csr.compliance_permit_condition (app_sid, compliance_permit_id);
CREATE TABLE csr.compliance_item_rollout (
	app_sid							NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	compliance_item_id				NUMBER(10,0) NOT NULL,
	country							VARCHAR2(2),
	region							VARCHAR2(2),
	country_group					VARCHAR2(3),
	region_group					VARCHAR2(3),
	rollout_dtm						DATE,
	rollout_pending					NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT pk_compliance_item_rollout PRIMARY KEY (app_sid, compliance_item_id),
	CONSTRAINT fk_compliance_item_rollout
		FOREIGN KEY (app_sid, compliance_item_id) 
		REFERENCES csr.compliance_item (app_sid, compliance_item_id),
	CONSTRAINT fk_cir_sn
		FOREIGN KEY (country_group)
		REFERENCES csr.country_group(country_group_id),
	CONSTRAINT fk_cir_rg
		FOREIGN KEY (region_group)
		REFERENCES csr.region_group (region_group_id),
	CONSTRAINT fk_cir_pcr
		FOREIGN KEY (country, region)
		REFERENCES postcode.region (country, region),
	CONSTRAINT fk_cir_pcc
		FOREIGN KEY (country)
		REFERENCES postcode.country (country)
);
CREATE INDEX csr.ix_compliance_rollout_pcr ON csr.compliance_item_rollout (country, region);
CREATE INDEX csr.ix_compliance_rollout_cg ON csr.compliance_item_rollout (country_group);
CREATE INDEX csr.ix_compliance_rollout_rg ON csr.compliance_item_rollout (region_group);
CREATE TABLE CSRIMP.COMPLIANCE_PERMIT_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PERMIT_TYPE_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_PERMIT_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, PERMIT_TYPE_ID),
	CONSTRAINT FK_COMPLIANCE_PERMIT_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_CONDITION_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	CONDITION_TYPE_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_CONDITION_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, CONDITION_TYPE_ID),
	CONSTRAINT FK_COMPLIANC_CONDITION_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_ACTIVITY_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_ACTIVITY_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID),
	CONSTRAINT FK_COMPLIANCE_ACTIVITY_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_APPLICATION_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	APPLICATION_TYPE_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_APPLICATION_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, APPLICATION_TYPE_ID),
	CONSTRAINT FK_COMPLIANC_APPLICATI_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_PERMIT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	COMPLIANCE_PERMIT_ID NUMBER(10,0) NOT NULL,
	ACTIVITY_END_DTM DATE,
	ACTIVITY_START_DTM DATE,
	ACTIVITY_TYPE_ID NUMBER(10,0) NOT NULL,
	DETAILS CLOB,
	FLOW_ITEM_ID NUMBER(10,0) NOT NULL,
	PERMIT_END_DTM DATE,
	PERMIT_REFERENCE VARCHAR2(255),
	PERMIT_START_DTM DATE,
	PERMIT_SUB_TYPE_ID NUMBER(10,0) NOT NULL,
	PERMIT_TYPE_ID NUMBER(10,0) NOT NULL,
	REGION_SID NUMBER(10,0) NOT NULL,
	TITLE VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_PERMIT PRIMARY KEY (CSRIMP_SESSION_ID, COMPLIANCE_PERMIT_ID),
	CONSTRAINT FK_COMPLIANCE_PERMIT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_ITEM_ROLLOUT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	COMPLIANCE_ITEM_ID NUMBER(10,0) NOT NULL,
	COUNTRY VARCHAR2(2),
	COUNTRY_GROUP VARCHAR2(3),
	REGION VARCHAR2(2),
	REGION_GROUP VARCHAR2(3),
	ROLLOUT_DTM DATE,
	ROLLOUT_PENDING NUMBER(1,0) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_ITEM_ROLLOUT PRIMARY KEY (CSRIMP_SESSION_ID, COMPLIANCE_ITEM_ID),
	CONSTRAINT FK_COMPLIANCE_ITEM_ROLLOUT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_PERMIT_SUB_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PERMIT_TYPE_ID NUMBER(10,0) NOT NULL,
	PERMIT_SUB_TYPE_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_PERMIT_SUB_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, PERMIT_TYPE_ID, PERMIT_SUB_TYPE_ID),
	CONSTRAINT FK_COMPLIAN_PERMIT_SUB_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_CONDITION_SUB_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	CONDITION_TYPE_ID NUMBER(10,0) NOT NULL,
	CONDITION_SUB_TYPE_ID NUMBER(10,0) NOT NULL,
	DESCRIPTION VARCHAR2(1024) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_CONDITION_SB_TYP PRIMARY KEY (CSRIMP_SESSION_ID, CONDITION_TYPE_ID, CONDITION_SUB_TYPE_ID),
	CONSTRAINT FK_COMPLIA_CONDITI_SUB_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_PERMIT_APPLICATION (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PERMIT_APPLICATION_ID NUMBER(10,0) NOT NULL,
	APPLICATION_REFERENCE VARCHAR2(255),
	APPLICATION_TYPE_ID NUMBER(10,0) NOT NULL,
	DETERMINED_DTM DATE,
	DULY_MADE_DTM DATE,
	NOTES CLOB,
	PERMIT_ID NUMBER(10,0) NOT NULL,
	SUBMISSION_DTM DATE,
	CONSTRAINT PK_COMPLIANCE_PERMIT_APPL PRIMARY KEY (CSRIMP_SESSION_ID, PERMIT_APPLICATION_ID),
	CONSTRAINT FK_COMPLIAN_PERMIT_APPLICAT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.COMPLIANCE_PERMIT_CONDITION (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	COMPLIANCE_ITEM_ID NUMBER(10,0) NOT NULL,
	COMPLIANCE_PERMIT_ID NUMBER(10,0) NOT NULL,
	CONDITION_SUB_TYPE_ID NUMBER(10,0) NOT NULL,
	CONDITION_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_COMPLIANCE_PERMIT_CONDITION PRIMARY KEY (CSRIMP_SESSION_ID, COMPLIANCE_ITEM_ID),
	CONSTRAINT FK_COMPLIAN_PERMIT_CONDITIO_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIAN_PERMIT_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIANCE_PERMIT_TYPE_ID NUMBER(10) NOT NULL,
	NEW_COMPLIANCE_PERMIT_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPLIAN_PERMIT_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIANCE_PERMIT_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPLIAN_PERMIT_TYPE UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIANCE_PERMIT_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPLIAN_PERMIT_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIA_CONDITI_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIAN_CONDITION_TYPE_ID NUMBER(10) NOT NULL,
	NEW_COMPLIAN_CONDITION_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPLIA_CONDITI_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIAN_CONDITION_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPLIA_CONDITI_TYPE UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIAN_CONDITION_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPLIA_CONDITI_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIA_ACTIVIT_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIANC_ACTIVITY_TYPE_ID NUMBER(10) NOT NULL,
	NEW_COMPLIANC_ACTIVITY_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPLIA_ACTIVIT_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIANC_ACTIVITY_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPLIA_ACTIVIT_TYPE UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIANC_ACTIVITY_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPLIA_ACTIVIT_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIAN_APPLICAT_TP (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIANC_APPLICATIO_TP_ID NUMBER(10) NOT NULL,
	NEW_COMPLIANC_APPLICATIO_TP_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPLIAN_APPLICAT_TP PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIANC_APPLICATIO_TP_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPLIAN_APPLICAT_TP UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIANC_APPLICATIO_TP_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPLIAN_APPLICAT_TP_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIANCE_PERMIT (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIANCE_PERMIT_ID NUMBER(10) NOT NULL,
	NEW_COMPLIANCE_PERMIT_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPLIANCE_PERMIT PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIANCE_PERMIT_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPLIANCE_PERMIT UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIANCE_PERMIT_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPLIANCE_PERMIT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPL_PERMI_SUB_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIA_PERMIT_SUB_TYPE_ID NUMBER(10) NOT NULL,
	NEW_COMPLIA_PERMIT_SUB_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPL_PERMI_SUB_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIA_PERMIT_SUB_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPL_PERMI_SUB_TYPE UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIA_PERMIT_SUB_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPL_PERMI_SUB_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIANCE_CONDITION_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIAN_CONDITION_TYPE_ID NUMBER(10) NOT NULL,
	NEW_COMPLIAN_CONDITION_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPLIAN_CONDITION_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIAN_CONDITION_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPLIAN_CONDITION_TYPE UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIAN_CONDITION_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPLIAN_CONDIT_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIAN_PERMIT_APPL (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPLIANCE_PERMIT_APPL_ID NUMBER(10) NOT NULL,
	NEW_COMPLIANCE_PERMIT_APPL_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPLIAN_PERMIT_APPL PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPLIANCE_PERMIT_APPL_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPLIAN_PERMIT_APPL UNIQUE (CSRIMP_SESSION_ID, NEW_COMPLIANCE_PERMIT_APPL_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPLIAN_PERMIT_APPL_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPLIA_CONDITION_SUB_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMP_CONDITION_SUB_TYPE_ID NUMBER(10) NOT NULL,
	NEW_COMP_CONDITION_SUB_TYPE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMP_CONDITION_SUB_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMP_CONDITION_SUB_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMP_CONDITION_SUB_TYPE UNIQUE (CSRIMP_SESSION_ID, NEW_COMP_CONDITION_SUB_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMP_CONDIT_SUB_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE chain.reference_validation(
	REFERENCE_VALIDATION_ID 	NUMBER(10) NOT NULL,
	DESCRIPTION 				VARCHAR2(255) NOT NULL,
	VALIDATION_REGEX			VARCHAR2(255) NULL,
	VALIDATION_TEXT 			VARCHAR2(255) NULL,
	CONSTRAINT PK_REFERENCE_VALIDATION PRIMARY KEY (REFERENCE_VALIDATION_ID)
);
CREATE TABLE csr.compliance_activity_sub_type (
	app_sid							NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	activity_type_id				NUMBER(10,0) NOT NULL,
	activity_sub_type_id			NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	pos								NUMBER(10),
	CONSTRAINT pk_compl_activity_sub_type
		PRIMARY KEY (app_sid, activity_type_id, activity_sub_type_id),
	CONSTRAINT fk_compl_activity_sub_type
		FOREIGN KEY (app_sid, activity_type_id)
		REFERENCES csr.compliance_activity_type (app_sid, activity_type_id)
);
CREATE SEQUENCE csr.compliance_activ_sub_type_seq START WITH 10000;
CREATE TABLE CSRIMP.COMPLIANCE_ACTIVITY_SUB_TYPE (
	CSRIMP_SESSION_ID 				NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ACTIVITY_TYPE_ID 				NUMBER(10,0) NOT NULL,
	ACTIVITY_SUB_TYPE_ID 			NUMBER(10,0) NOT NULL,
	DESCRIPTION 					VARCHAR2(1024) NOT NULL,
	POS 							NUMBER(10),
	CONSTRAINT PK_COMPLIANCE_ACTIVITY_SB_TYP PRIMARY KEY (CSRIMP_SESSION_ID, ACTIVITY_TYPE_ID, ACTIVITY_SUB_TYPE_ID),
	CONSTRAINT FK_COMPLIA_ACTIV_SUB_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_COMPL_ACTIVITY_SUB_TYPE (
	CSRIMP_SESSION_ID 				NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_COMPL_ACTIVITY_SUB_TYPE_ID 	NUMBER(10) NOT NULL,
	NEW_COMPL_ACTIVITY_SUB_TYPE_ID 	NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_COMPL_ACTIVIT_SUB_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_COMPL_ACTIVITY_SUB_TYPE_ID) USING INDEX,
	CONSTRAINT UK_MAP_COMPL_ACTIVIT_SUB_TYPE UNIQUE (CSRIMP_SESSION_ID, NEW_COMPL_ACTIVITY_SUB_TYPE_ID) USING INDEX,
	CONSTRAINT FK_MAP_COMPL_ACT_SUB_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE csr.std_compl_activity_type (
	activity_type_id				NUMBER(10) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_std_compl_activity_type PRIMARY KEY (activity_type_id)
);
CREATE TABLE csr.std_compl_activity_sub_type (
	activity_type_id				NUMBER(10) NOT NULL,
	activity_sub_type_id			NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_std_compl_activity_sub_type
		PRIMARY KEY (activity_type_id, activity_sub_type_id),
	CONSTRAINT fk_std_activity_sub_type
		FOREIGN KEY (activity_type_id)
		REFERENCES csr.std_compl_activity_type (activity_type_id)
);
CREATE TABLE csr.std_compl_application_type (
	application_type_id				NUMBER(10) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_std_compl_application_type PRIMARY KEY (application_type_id)
);
CREATE TABLE csr.std_compl_condition_type (
	condition_type_id				NUMBER(10) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_std_compl_condition_type PRIMARY KEY (condition_type_id)
);
CREATE TABLE csr.std_compl_condition_sub_type (
	condition_type_id				NUMBER(10,0) NOT NULL,
	condition_sub_type_id			NUMBER(10,0) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_std_compl_cond_sub_type
		PRIMARY KEY (condition_type_id, condition_sub_type_id),
	CONSTRAINT fk_std_cond_sub_type
		FOREIGN KEY (condition_type_id)
		REFERENCES csr.std_compl_condition_type (condition_type_id)
);
CREATE TABLE csr.std_compl_permit_type (
	permit_type_id					NUMBER(10) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_std_compl_permit_type PRIMARY KEY (permit_type_id)
);
CREATE TABLE csr.std_compl_permit_sub_type (
	permit_type_id					NUMBER(10) NOT NULL,
	permit_sub_type_id				NUMBER(10) NOT NULL,
	description						VARCHAR2(1024) NOT NULL,
	CONSTRAINT pk_std_compl_permit_sub_type PRIMARY KEY (permit_type_id, permit_sub_type_id),
	CONSTRAINT fk_std_permit_sub_type
		FOREIGN KEY (permit_type_id)
		REFERENCES csr.std_compl_permit_type (permit_type_id)
);
DROP SEQUENCE csr.compliance_activity_type_seq;
DROP SEQUENCE csr.compliance_application_tp_seq;
DROP SEQUENCE csr.compliance_condition_type_seq;
DROP SEQUENCE csr.compliance_cond_sub_type_seq;
DROP SEQUENCE csr.compliance_permit_type_seq;
DROP SEQUENCE csr.compliance_permit_sub_type_seq;
CREATE SEQUENCE csr.compliance_activity_type_seq START WITH 10000;
CREATE SEQUENCE csr.compliance_application_tp_seq START WITH 10000;
CREATE SEQUENCE csr.compliance_condition_type_seq START WITH 10000;
CREATE SEQUENCE csr.compliance_cond_sub_type_seq START WITH 10000;
CREATE SEQUENCE csr.compliance_permit_type_seq START WITH 10000;
CREATE SEQUENCE csr.compliance_permit_sub_type_seq START WITH 10000;
--Failed to process contents of latest3057_1.sql
--Failed to locate all sections of latest3057_1.sql
/* PRODUCT HEADER */
DROP TABLE CHAIN.PRODUCT_HEADER_PRODUCT_TYPE;
DROP TABLE CHAIN.PRODUCT_HEADER_COMPANY_TYPE;
DROP TABLE CHAIN.PRODUCT_HEADER;
CREATE TABLE CHAIN.PRODUCT_HEADER(
	APP_SID					NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_HEADER_ID		NUMBER(10, 0) NOT NULL,
	PLUGIN_ID				NUMBER(10, 0) NOT NULL,
	PLUGIN_TYPE_ID			NUMBER(10, 0) NOT NULL,
	POS						NUMBER(10, 0) NOT NULL,
	PRODUCT_COMPANY_TYPE_ID	NUMBER(10, 0) NOT NULL,
	USER_COMPANY_TYPE_ID	NUMBER(10, 0) NOT NULL,
	VIEWING_OWN_PRODUCT		NUMBER(1) NOT NULL,
	VIEWING_AS_SUPPLIER		NUMBER(1) NOT NULL,
	PRODUCT_COL_SID			NUMBER(10, 0),
	USER_COMPANY_COL_SID	NUMBER(10, 0),
	CONSTRAINT CHK_PRD_HEAD_VIEW_OWN_CMP_1_0 CHECK (VIEWING_OWN_PRODUCT IN (1, 0)),
	CONSTRAINT CHK_PRD_HEAD_VIEW_AS_SUPP_1_0 CHECK (VIEWING_AS_SUPPLIER IN (1, 0)),
	CONSTRAINT PRODUCT_HEADER_PK PRIMARY KEY (APP_SID, PRODUCT_HEADER_ID)
);
ALTER TABLE CHAIN.PRODUCT_HEADER ADD CONSTRAINT FK_PROD_HEADER_PROD_COMP_TYPE
    FOREIGN KEY (APP_SID, PRODUCT_COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
ALTER TABLE CHAIN.PRODUCT_HEADER ADD CONSTRAINT FK_PROD_HEADER_USER_COMP_TYPE
    FOREIGN KEY (APP_SID, USER_COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
CREATE TABLE CHAIN.PRODUCT_HEADER_PRODUCT_TYPE (
	APP_SID					NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_HEADER_ID		NUMBER(10, 0) NOT NULL,
	PRODUCT_TYPE_ID			NUMBER(10, 0) NOT NULL,
	CONSTRAINT PK_PRODUCT_HEADER_PRODUCT_TYPE PRIMARY KEY (APP_SID, PRODUCT_HEADER_ID, PRODUCT_TYPE_ID)
);
ALTER TABLE CHAIN.PRODUCT_HEADER_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_HEADER_PROD_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_HEADER_ID)
    REFERENCES CHAIN.PRODUCT_HEADER(APP_SID, PRODUCT_HEADER_ID)
;
ALTER TABLE CHAIN.PRODUCT_HEADER_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_HEADER_PROD_TYPE_PT
    FOREIGN KEY (APP_SID, PRODUCT_TYPE_ID)
    REFERENCES CHAIN.PRODUCT_TYPE(APP_SID, PRODUCT_TYPE_ID)
;
/* PROUCT TAB */
DROP TABLE CHAIN.PRODUCT_TAB_PRODUCT_TYPE;
DROP TABLE CHAIN.PRODUCT_TAB_COMPANY_TYPE;
DROP TABLE CHAIN.PRODUCT_TAB;
CREATE TABLE CHAIN.PRODUCT_TAB(
	APP_SID					NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_TAB_ID			NUMBER(10, 0) NOT NULL,
	PLUGIN_ID				NUMBER(10, 0) NOT NULL,
	PLUGIN_TYPE_ID			NUMBER(10, 0) NOT NULL,
	POS						NUMBER(10, 0) NOT NULL,
	LABEL					VARCHAR2(254) NOT NULL,
	PRODUCT_COMPANY_TYPE_ID	NUMBER(10, 0) NOT NULL,
	USER_COMPANY_TYPE_ID	NUMBER(10, 0) NOT NULL,
	VIEWING_OWN_PRODUCT		NUMBER(1) NOT NULL,
	VIEWING_AS_SUPPLIER		NUMBER(1) NOT NULL,
	PRODUCT_COL_SID			NUMBER(10, 0),
	USER_COMPANY_COL_SID	NUMBER(10, 0),
	CONSTRAINT CHK_PRD_TAB_VIEW_OWN_CMP_1_0 CHECK (VIEWING_OWN_PRODUCT IN (1, 0)),
	CONSTRAINT CHK_PRD_TAB_VIEW_AS_SUPP_1_0 CHECK (VIEWING_AS_SUPPLIER IN (1, 0)),
	CONSTRAINT PRODUCT_TAB_PK PRIMARY KEY (APP_SID, PRODUCT_TAB_ID)
);
ALTER TABLE CHAIN.PRODUCT_TAB ADD CONSTRAINT FK_PROD_TAB_PROD_COMP_TYPE
    FOREIGN KEY (APP_SID, PRODUCT_COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
ALTER TABLE CHAIN.PRODUCT_TAB ADD CONSTRAINT FK_PROD_TAB_USER_COMP_TYPE
    FOREIGN KEY (APP_SID, USER_COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
CREATE TABLE CHAIN.PRODUCT_TAB_PRODUCT_TYPE (
	APP_SID					NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_TAB_ID			NUMBER(10, 0) NOT NULL,
	PRODUCT_TYPE_ID			NUMBER(10, 0) NOT NULL,
	CONSTRAINT PK_PRODUCT_TAB_PRODUCT_TYPE PRIMARY KEY (APP_SID, PRODUCT_TAB_ID, PRODUCT_TYPE_ID)
);
ALTER TABLE CHAIN.PRODUCT_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_TAB_PROD_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_TAB_ID)
    REFERENCES CHAIN.PRODUCT_TAB(APP_SID, PRODUCT_TAB_ID)
;
ALTER TABLE CHAIN.PRODUCT_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PRODUCT_TAB_PROD_TYPE_PT
    FOREIGN KEY (APP_SID, PRODUCT_TYPE_ID)
    REFERENCES CHAIN.PRODUCT_TYPE(APP_SID, PRODUCT_TYPE_ID)
;
/* PRODUCT SUPPLIER TAB */
DROP TABLE CHAIN.PROD_SUPP_TAB_PRODUCT_TYPE;
DROP TABLE CHAIN.PROD_SUPP_TAB_COMPANY_TYPE;
DROP TABLE CHAIN.PRODUCT_SUPPLIER_TAB;
CREATE TABLE CHAIN.PRODUCT_SUPPLIER_TAB(
	APP_SID					NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_SUPPLIER_TAB_ID	NUMBER(10, 0) NOT NULL,
	PLUGIN_ID				NUMBER(10, 0) NOT NULL,
	PLUGIN_TYPE_ID			NUMBER(10, 0) NOT NULL,
	POS						NUMBER(10, 0) NOT NULL,
	LABEL					VARCHAR2(254) NOT NULL,
	PRODUCT_COMPANY_TYPE_ID	NUMBER(10, 0) NOT NULL,
	USER_COMPANY_TYPE_ID	NUMBER(10, 0) NOT NULL,
	VIEWING_OWN_PRODUCT		NUMBER(1) NOT NULL,
	VIEWING_AS_SUPPLIER		NUMBER(1) NOT NULL,
	CONSTRAINT CK_PRD_SUP_TAB_VW_OWN_CMP_1_0 CHECK (VIEWING_OWN_PRODUCT IN (1, 0)),
	CONSTRAINT CK_PRD_SUP_TAB_VW_AS_SUPP_1_0 CHECK (VIEWING_AS_SUPPLIER IN (1, 0)),
	CONSTRAINT PRODUCT_SUPPLIER_TAB_PK PRIMARY KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID)
);
ALTER TABLE CHAIN.PRODUCT_SUPPLIER_TAB ADD CONSTRAINT FK_PROD_SUP_TAB_PROD_COMP_TYPE
    FOREIGN KEY (APP_SID, PRODUCT_COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
ALTER TABLE CHAIN.PRODUCT_SUPPLIER_TAB ADD CONSTRAINT FK_PROD_SUP_TAB_USER_COMP_TYPE
    FOREIGN KEY (APP_SID, USER_COMPANY_TYPE_ID)
    REFERENCES CHAIN.COMPANY_TYPE(APP_SID, COMPANY_TYPE_ID)
;
CREATE TABLE CHAIN.PROD_SUPP_TAB_PRODUCT_TYPE (
	APP_SID						NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PRODUCT_SUPPLIER_TAB_ID     NUMBER(10, 0)     NOT NULL,
	PRODUCT_TYPE_ID				NUMBER(10, 0)     NOT NULL,
	CONSTRAINT PK_PROD_SUPP_TAB_PRODUCT_TYPE PRIMARY KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID, PRODUCT_TYPE_ID)
);
ALTER TABLE CHAIN.PROD_SUPP_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PROD_SUPP_TAB_PROD_TYPE_PH
    FOREIGN KEY (APP_SID, PRODUCT_SUPPLIER_TAB_ID)
    REFERENCES CHAIN.PRODUCT_SUPPLIER_TAB(APP_SID, PRODUCT_SUPPLIER_TAB_ID)
;
ALTER TABLE CHAIN.PROD_SUPP_TAB_PRODUCT_TYPE ADD CONSTRAINT FK_PROD_SUPP_TAB_PROD_TYPE_PT
    FOREIGN KEY (APP_SID, PRODUCT_TYPE_ID)
    REFERENCES CHAIN.PRODUCT_TYPE(APP_SID, PRODUCT_TYPE_ID)
;
/* FK INDEXES */
create index chain.ix_prod_head_prod_col_sid on chain.product_header (app_sid, product_col_sid);
create index chain.ix_prod_head_user_comp_col_sid on chain.product_header (app_sid, user_company_col_sid);
create index chain.ix_prod_head_prod_comp_type_id on chain.product_header (app_sid, product_company_type_id);
create index chain.ix_prod_head_plugin_id on chain.product_header (plugin_id);
create index chain.ix_prod_head_plugin_type_id on chain.product_header (plugin_type_id);
create index chain.ix_prod_head_user_comp_type_id on chain.product_header (app_sid, user_company_type_id);
create index chain.ix_prod_head_prod_type_id on chain.product_header_product_type (app_sid, product_type_id);
create index chain.ix_prod_supp_plugin_id on chain.product_supplier_tab (plugin_id);
create index chain.ix_prod_supp_prod_comp_type_id on chain.product_supplier_tab (app_sid, product_company_type_id);
create index chain.ix_prod_supp_plugin_type_id on chain.product_supplier_tab (plugin_type_id);
create index chain.ix_prod_supp_user_comp_type_id on chain.product_supplier_tab (app_sid, user_company_type_id);
create index chain.ix_prod_tab_plugin_type_id on chain.product_tab (plugin_type_id);
create index chain.ix_prod_tab_user_comp_col_sid on chain.product_tab (app_sid, user_company_col_sid);
create index chain.ix_prod_tab_user_comp_type_id on chain.product_tab (app_sid, user_company_type_id);
create index chain.ix_prod_tab_prod_comp_type_id on chain.product_tab (app_sid, product_company_type_id);
create index chain.ix_prod_tab_prod_col_sid on chain.product_tab (app_sid, product_col_sid);
create index chain.ix_prod_tab_plugin_id on chain.product_tab (plugin_id);
create index chain.ix_prod_tab_prod_prod_type_ on chain.product_tab_product_type (app_sid, product_type_id);
create index chain.ix_prod_supp_tab_prod_type_id on chain.prod_supp_tab_product_type (app_sid, product_type_id);
/* CSRIMP */
DROP TABLE CSRIMP.CHAIN_PRODUCT_HEADER;
DROP TABLE CSRIMP.CHAIN_PRODUCT_TAB;
CREATE TABLE CSRIMP.MAP_CHAIN_PRODUCT_SUPPLIER_TAB (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_PRODUCT_SUPPLIER_TAB_ID NUMBER(10) NOT NULL,
	NEW_PRODUCT_SUPPLIER_TAB_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_PROD_SUPP_TAB PRIMARY KEY (CSRIMP_SESSION_ID, OLD_PRODUCT_SUPPLIER_TAB_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_PROD_SUPP_TAB UNIQUE (CSRIMP_SESSION_ID, NEW_PRODUCT_SUPPLIER_TAB_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_PROD_SUPP_TAB_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_PRODUCT_HEADER (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_HEADER_ID NUMBER(10,0) NOT NULL,
	PLUGIN_ID NUMBER(10,0) NOT NULL,
	PLUGIN_TYPE_ID NUMBER(10,0) NOT NULL,
	POS NUMBER(10,0) NOT NULL,
	PRODUCT_COL_SID NUMBER(10,0),
	PRODUCT_COMPANY_TYPE_ID NUMBER(10,0) NOT NULL,
	USER_COMPANY_COL_SID NUMBER(10,0),
	USER_COMPANY_TYPE_ID NUMBER(10,0) NOT NULL,
	VIEWING_AS_SUPPLIER NUMBER(1,0) NOT NULL,
	VIEWING_OWN_PRODUCT NUMBER(1,0) NOT NULL,
	CONSTRAINT PK_CHAIN_PRODUCT_HEADER PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_HEADER_ID),
	CONSTRAINT FK_CHAIN_PRODUCT_HEADER_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_PRO_HEAD_PRO_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_HEADER_ID NUMBER(10,0) NOT NULL,
	PRODUCT_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_PRO_HEAD_PRO_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_HEADER_ID, PRODUCT_TYPE_ID),
	CONSTRAINT FK_CHAIN_PRO_HEAD_PRO_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_PRODUCT_TAB (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_TAB_ID NUMBER(10,0) NOT NULL,
	LABEL VARCHAR2(254) NOT NULL,
	PLUGIN_ID NUMBER(10,0) NOT NULL,
	PLUGIN_TYPE_ID NUMBER(10,0) NOT NULL,
	POS NUMBER(10,0) NOT NULL,
	PRODUCT_COL_SID NUMBER(10,0),
	PRODUCT_COMPANY_TYPE_ID NUMBER(10,0) NOT NULL,
	USER_COMPANY_COL_SID NUMBER(10,0),
	USER_COMPANY_TYPE_ID NUMBER(10,0) NOT NULL,
	VIEWING_AS_SUPPLIER NUMBER(1,0) NOT NULL,
	VIEWING_OWN_PRODUCT NUMBER(1,0) NOT NULL,
	CONSTRAINT PK_CHAIN_PRODUCT_TAB PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_TAB_ID),
	CONSTRAINT FK_CHAIN_PRODUCT_TAB_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_PROD_TAB_PROD_TYPE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_TAB_ID NUMBER(10,0) NOT NULL,
	PRODUCT_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_PROD_TAB_PROD_TYPE PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_TAB_ID, PRODUCT_TYPE_ID),
	CONSTRAINT FK_CHAIN_PROD_TAB_PROD_TYPE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_PRODUC_SUPPLIE_TAB (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_SUPPLIER_TAB_ID NUMBER(10,0) NOT NULL,
	LABEL VARCHAR2(254) NOT NULL,
	PLUGIN_ID NUMBER(10,0) NOT NULL,
	PLUGIN_TYPE_ID NUMBER(10,0) NOT NULL,
	POS NUMBER(10,0) NOT NULL,
	PRODUCT_COMPANY_TYPE_ID NUMBER(10,0) NOT NULL,
	USER_COMPANY_TYPE_ID NUMBER(10,0) NOT NULL,
	VIEWING_AS_SUPPLIER NUMBER(1,0) NOT NULL,
	VIEWING_OWN_PRODUCT NUMBER(1,0) NOT NULL,
	CONSTRAINT PK_CHAIN_PRODUC_SUPPLIE_TAB PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_SUPPLIER_TAB_ID),
	CONSTRAINT FK_CHAIN_PRODUC_SUPPLIE_TAB_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_PR_SUP_TAB_PR_TYP (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	PRODUCT_SUPPLIER_TAB_ID NUMBER(10,0) NOT NULL,
	PRODUCT_TYPE_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_PR_SUP_TAB_PR_TYP PRIMARY KEY (CSRIMP_SESSION_ID, PRODUCT_SUPPLIER_TAB_ID, PRODUCT_TYPE_ID),
	CONSTRAINT FK_CHAIN_PR_SUP_TAB_PR_TYP_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
--Failed to locate all sections of latest3057_16.sql
CREATE TABLE csr.compliance_permit_tab(
    app_sid							NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    plugin_id         				NUMBER(10, 0)	NOT NULL,
    plugin_type_id    				NUMBER(10, 0)	NOT NULL,
    pos               				NUMBER(10, 0)	NOT NULL,
    tab_label         				VARCHAR2(50),
    CONSTRAINT pk_permit_tab PRIMARY KEY (app_sid, plugin_id),
    CONSTRAINT ck_permit_tab_plugin_type CHECK (plugin_type_id = 21)
);
CREATE INDEX csr.ix_compliance_permit_tb_plugin ON csr.compliance_permit_tab (plugin_id, plugin_type_id);
ALTER TABLE csr.compliance_permit_tab ADD CONSTRAINT fk_compliance_permit_tb_plugin
    FOREIGN KEY (plugin_id, plugin_type_id)
    REFERENCES csr.plugin(plugin_id, plugin_type_id);
CREATE TABLE csr.compliance_permit_tab_group (
    app_sid							NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    plugin_id         				NUMBER(10, 0)	NOT NULL,
    group_sid						NUMBER(10, 0),
    role_sid						NUMBER(10, 0),
    CONSTRAINT pk_permit_tab_group PRIMARY KEY (app_sid, plugin_id, group_sid),
    CONSTRAINT ck_permit_tab_group_grp_role CHECK (
		(group_sid IS NULL AND role_sid IS NOT NULL) OR 
		(group_sid IS NOT NULL AND role_sid IS NULL)
	)
);
CREATE INDEX csr.ix_compliance_permit_tab_role ON csr.compliance_permit_tab_group (app_sid, role_sid);
ALTER TABLE csr.compliance_permit_tab_group ADD CONSTRAINT fk_compliance_permit_tab_group
    FOREIGN KEY (app_sid, plugin_id)
    REFERENCES csr.compliance_permit_tab (app_sid, plugin_id);
ALTER TABLE csr.compliance_permit_tab_group ADD CONSTRAINT fk_compliance_permit_tab_role
    FOREIGN KEY (app_sid, role_sid)
    REFERENCES csr.role (app_sid, role_sid);
CREATE TABLE csrimp.compliance_permit_tab(
	csrimp_session_id				NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    plugin_id         				NUMBER(10, 0)	NOT NULL,
    plugin_type_id    				NUMBER(10, 0)	NOT NULL,
    pos               				NUMBER(10, 0)	NOT NULL,
    tab_label         				VARCHAR2(50),
    CONSTRAINT pk_permit_tab PRIMARY KEY (csrimp_session_id, plugin_id),
    CONSTRAINT fk_permit_tab_is 
		FOREIGN KEY (csrimp_session_id) 
		REFERENCES csrimp.csrimp_session (csrimp_session_id)
    	ON DELETE CASCADE
);
CREATE TABLE csrimp.compliance_permit_tab_group (
	csrimp_session_id				NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    plugin_id         				NUMBER(10, 0)	NOT NULL,
    group_sid						NUMBER(10, 0),
    role_sid						NUMBER(10, 0),
    CONSTRAINT pk_permit_tab_group PRIMARY KEY (csrimp_session_id, plugin_id, group_sid),
    CONSTRAINT fk_permit_tab_group_is 
		FOREIGN KEY (csrimp_session_id) 
		REFERENCES csrimp.csrimp_session (csrimp_session_id)
    	ON DELETE CASCADE
);
CREATE OR REPLACE TYPE CHAIN.T_OBJECT_CERTIFICATION_ROW AS
	 OBJECT (
		OBJECT_ID					NUMBER(10),
		CERTIFICATION_TYPE_ID		NUMBER(10),
		IS_CERTIFIED				NUMBER(1),
		FROM_DTM					DATE,
		TO_DTM						DATE,
		MAP MEMBER FUNCTION MAP
			RETURN VARCHAR2
	 );
/
CREATE OR REPLACE TYPE BODY chain.T_OBJECT_CERTIFICATION_ROW IS
	MAP MEMBER FUNCTION MAP
		RETURN VARCHAR2
	IS
	BEGIN
		RETURN OBJECT_ID||'@'||CERTIFICATION_TYPE_ID;
	END;
END;
/
CREATE OR REPLACE TYPE CHAIN.T_OBJECT_CERTIFICATION_TABLE AS
	TABLE OF CHAIN.T_OBJECT_CERTIFICATION_ROW;
/
CREATE TABLE CHAIN.DEDUPE_PP_ALT_COMP_NAME (
	APP_SID 					NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	ALT_COMPANY_NAME_ID			NUMBER(10) NOT NULL,
	COMPANY_SID 				NUMBER(10,0) NOT NULL,
	NAME 						VARCHAR2(255) NOT NULL,
	CONSTRAINT FK_DEDUPE_PP_ALT_COMP_NAME FOREIGN KEY (APP_SID, ALT_COMPANY_NAME_ID) REFERENCES CHAIN.ALT_COMPANY_NAME (APP_SID, ALT_COMPANY_NAME_ID),
	CONSTRAINT UK_DEDUPE_PP_ALT_COMP_NAME UNIQUE (APP_SID, ALT_COMPANY_NAME_ID, COMPANY_SID, NAME)
);
CREATE TABLE CSRIMP.CHAIN_DEDUPE_PP_ALT_COMP_NAME (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ALT_COMPANY_NAME_ID NUMBER(10) NOT NULL,
	COMPANY_SID NUMBER(10,0) NOT NULL,
	NAME VARCHAR2(255) NOT NULL,
	CONSTRAINT FK_CHAIN_DEDU_PP_ALT_COMP_NAME FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
--Failed to process contents of latest3057_30.sql
--Failed to locate all sections of latest3057_30.sql


DECLARE
	v_nextval		NUMBER(10,0);
BEGIN
	SELECT chain.certification_id_seq.NEXTVAL INTO v_nextval FROM dual;
	EXECUTE IMMEDIATE 'DROP SEQUENCE chain.certification_id_seq';
	EXECUTE IMMEDIATE 'CREATE SEQUENCE chain.certification_type_id_seq START WITH '  || v_nextval || ' INCREMENT BY 1 NOMINVALUE NOMAXVALUE CACHE 20 NOORDER';
END;
/
ALTER TABLE chain.certification RENAME TO certification_type;
ALTER TABLE chain.certification_type RENAME COLUMN certification_id TO certification_type_id;
ALTER TABLE csrimp.chain_certification RENAME TO chain_certification_type;
ALTER TABLE csrimp.chain_certification_type RENAME COLUMN certification_id TO certification_type_id;
ALTER TABLE chain.certification_audit_type RENAME TO cert_type_audit_type;
ALTER TABLE chain.cert_type_audit_type DROP CONSTRAINT fk_cert_audit_type_cert;
ALTER TABLE chain.cert_type_audit_type RENAME COLUMN certification_id TO certification_type_id;
ALTER TABLE chain.cert_type_audit_type ADD CONSTRAINT fk_cert_audit_type_cert 
	FOREIGN KEY (app_sid, certification_type_id)
	REFERENCES chain.certification_type(app_sid, certification_type_id);
	
ALTER TABLE csrimp.chain_cert_aud_type RENAME TO chain_cert_type_audit_type;
ALTER TABLE csrimp.chain_cert_type_audit_type RENAME COLUMN certification_id TO certification_type_id;
ALTER TABLE csrimp.map_chain_certification RENAME TO map_chain_cert_type;
ALTER TABLE csrimp.map_chain_cert_type RENAME COLUMN old_certification_id TO old_cert_type_id;
ALTER TABLE csrimp.map_chain_cert_type RENAME COLUMN new_certification_id TO new_cert_type_id;
	
ALTER TABLE chain.company_product_required_cert ADD CONSTRAINT fk_cmpny_prdct_rqrd_crt_crt
	FOREIGN KEY (app_sid, certification_type_id)
	REFERENCES chain.certification_type (app_sid, certification_type_id);
ALTER TABLE chain.company_type_score_calc DROP CONSTRAINT ck_cmp_typ_scr_clc_calc;
ALTER TABLE chain.company_type_score_calc ADD (
	active_suppliers_only				NUMBER(1)
);
UPDATE chain.company_type_score_calc SET active_suppliers_only = 0 WHERE calc_type = 'supplier_scores';
ALTER TABLE chain.company_type_score_calc ADD (
	CONSTRAINT ck_cmp_typ_scr_clc_calc CHECK (
		calc_type = 'supplier_scores' AND operator_type IS NOT NULL AND supplier_score_type_id IS NOT NULL AND active_suppliers_only IN (0, 1)
	)
);
ALTER TABLE csrimp.chain_com_type_scor_calc ADD (
	active_suppliers_only				NUMBER(1)
);
INSERT INTO csr.compliance_item_rollout (app_sid, compliance_item_id, country, region,
										 country_group, region_group, rollout_dtm, rollout_pending)
	SELECT app_sid, compliance_item_id, country, region, 
		   country_group, region_group, rollout_dtm, rollout_pending
	  FROM csr.compliance_item;
ALTER TABLE csr.compliance_item DROP CONSTRAINT fk_ci_sn;
ALTER TABLE csr.compliance_item DROP CONSTRAINT fk_ci_pcr;
ALTER TABLE csr.compliance_item DROP CONSTRAINT fk_ci_pcc;
DECLARE 
	nonexistent_constraint EXCEPTION;
	PRAGMA EXCEPTION_INIT(nonexistent_constraint, -2443);
BEGIN
	BEGIN
		EXECUTE IMMEDIATE 'ALTER TABLE csr.compliance_item DROP CONSTRAINT fk_ci_rg';
	EXCEPTION
		WHEN nonexistent_constraint THEN NULL;
	END;
	BEGIN
		EXECUTE IMMEDIATE 'ALTER TABLE csr.compliance_item DROP CONSTRAINT fk_ci_reg_grp';
	EXCEPTION
		WHEN nonexistent_constraint THEN NULL;
	END;
END;
/
DROP INDEX csr.ix_compliance_item_pcr;
DROP INDEX csr.ix_compliance_item_cg;
ALTER TABLE csr.compliance_item DROP (
	country,
	region,
	country_group,
	region_group,
	rollout_dtm,
	rollout_pending	
);
ALTER TABLE csrimp.compliance_item DROP (
	country,
	region,
	country_group,
	region_group,
	rollout_dtm,
	rollout_pending	
);
ALTER TABLE chain.reference ADD REFERENCE_VALIDATION_ID NUMBER(10) DEFAULT 0;
ALTER TABLE csrimp.chain_reference ADD REFERENCE_VALIDATION_ID NUMBER(10);
ALTER TABLE csr.compliance_permit MODIFY permit_sub_type_id NULL;
ALTER TABLE csr.compliance_permit ADD (
	activity_sub_type_id			NUMBER(10),
	CONSTRAINT fk_compl_permit_activ_sub_type
		FOREIGN KEY (app_sid, activity_type_id, activity_sub_type_id)
		REFERENCES csr.compliance_activity_sub_type (app_sid, activity_type_id, activity_sub_type_id)
);
ALTER TABLE csr.compliance_permit_condition MODIFY condition_sub_type_id NULL;
ALTER TABLE csr.compliance_permit_type ADD (pos NUMBER(10));
ALTER TABLE csr.compliance_permit_sub_type ADD (pos NUMBER(10));
ALTER TABLE csr.compliance_condition_type ADD (pos NUMBER(10));
ALTER TABLE csr.compliance_condition_sub_type ADD (pos NUMBER(10));
ALTER TABLE csr.compliance_activity_type ADD (pos NUMBER(10));
ALTER TABLE csr.compliance_application_type ADD (pos NUMBER(10));
ALTER TABLE csrimp.compliance_permit_type ADD (pos NUMBER(10));
ALTER TABLE csrimp.compliance_permit_sub_type ADD (pos NUMBER(10));
ALTER TABLE csrimp.compliance_condition_type ADD (pos NUMBER(10));
ALTER TABLE csrimp.compliance_condition_sub_type ADD (pos NUMBER(10));
ALTER TABLE csrimp.compliance_activity_type ADD (pos NUMBER(10));
ALTER TABLE csrimp.compliance_application_type ADD (pos NUMBER(10));
ALTER TABLE CSR.INTERNAL_AUDIT_LOCKED_TAG DROP CONSTRAINT PK_IA_LOCKED_TAG;
ALTER TABLE CSRIMP.INTERNAL_AUDIT_LOCKED_TAG DROP CONSTRAINT PK_IA_LOCKED_TAG;
ALTER TABLE CSR.INTERNAL_AUDIT_LOCKED_TAG ADD CONSTRAINT PK_IA_LOCKED_TAG
	PRIMARY KEY (APP_SID, INTERNAL_AUDIT_SID, TAG_GROUP_ID, TAG_ID);
ALTER TABLE CSRIMP.INTERNAL_AUDIT_LOCKED_TAG ADD CONSTRAINT PK_IA_LOCKED_TAG
	PRIMARY KEY (CSRIMP_SESSION_ID, INTERNAL_AUDIT_SID, TAG_GROUP_ID, TAG_ID);
CREATE OR REPLACE TYPE CHAIN.T_DEDUPE_COMPANY_ROW AS
	OBJECT (
		NAME				VARCHAR2(255),
		PARENT_COMPANY_NAME	VARCHAR2(255),
		COMPANY_TYPE		VARCHAR2(255),
		CREATED_DTM			DATE,
		ACTIVATED_DTM		DATE,
		ACTIVE				NUMBER(1),
		ADDRESS				VARCHAR2(1024),
		ADDRESS_1			VARCHAR2(255),
		ADDRESS_2			VARCHAR2(255),
		ADDRESS_3			VARCHAR2(255),
		ADDRESS_4			VARCHAR2(255),
		STATE				VARCHAR2(255),
		POSTCODE			VARCHAR2(32),
		COUNTRY_CODE		VARCHAR2(255),
		PHONE				VARCHAR2(255),
		FAX					VARCHAR2(255),
		WEBSITE				VARCHAR2(255),
		EMAIL				VARCHAR2(255),
		DELETED				NUMBER(1),
		SECTOR				VARCHAR2(255),
		CITY				VARCHAR2(255),
		DEACTIVATED_DTM		DATE,
		PURCHASER_COMPANY	NUMBER(10),
		CONSTRUCTOR FUNCTION T_DEDUPE_COMPANY_ROW
		RETURN self AS RESULT
	);
/
ALTER TABLE csr.customer DROP COLUMN dynamic_deleg_plans_batched;
ALTER TABLE csrimp.customer DROP COLUMN dynamic_deleg_plans_batched;
ALTER TABLE csr.compliance_permit_application ADD (
	flow_item_id			NUMBER(10,0) NOT NULL
);
ALTER TABLE csrimp.compliance_permit_application ADD (
	flow_item_id			NUMBER(10,0) NOT NULL
);
ALTER TABLE csr.compliance_options ADD (
	permit_flow_sid			NUMBER(10,0) NULL,
	application_flow_sid	NUMBER(10,0) NULL
);
ALTER TABLE csrimp.compliance_options ADD (
	permit_flow_sid			NUMBER(10,0) NULL,
	application_flow_sid	NUMBER(10,0) NULL
);
ALTER TABLE csrimp.compliance_options MODIFY (
	requirement_flow_sid	NUMBER(10,0) NULL
);
ALTER TABLE csrimp.compliance_options MODIFY (
	regulation_flow_sid		NUMBER(10,0) NULL
);
ALTER TABLE csr.compliance_permit ADD CONSTRAINT fk_compl_perm_flow_item_id
	FOREIGN KEY (app_sid, flow_item_id)
	REFERENCES csr.flow_item (app_sid, flow_item_id);
ALTER TABLE csr.compliance_permit_application ADD CONSTRAINT fk_perm_appl_flow_item_id
	FOREIGN KEY (app_sid, flow_item_id)
	REFERENCES csr.flow_item (app_sid, flow_item_id);
ALTER TABLE csr.compliance_options ADD CONSTRAINT fk_co_per_flow 
	FOREIGN KEY (app_sid, permit_flow_sid) 
	REFERENCES csr.flow (app_sid, flow_sid);
ALTER TABLE csr.compliance_options ADD CONSTRAINT fk_co_app_flow 
	FOREIGN KEY (app_sid, application_flow_sid) 
	REFERENCES csr.flow (app_sid, flow_sid);
CREATE INDEX csr.ix_comp_permit_flow_item_id ON csr.compliance_permit (app_sid, flow_item_id);
CREATE INDEX csr.ix_cpa_flow_item_id ON csr.compliance_permit_application (app_sid, flow_item_id);
CREATE INDEX csr.ix_compliance_op_permit_f ON csr.compliance_options (app_sid, permit_flow_sid);
CREATE INDEX csr.ix_compliance_op_application_f ON csr.compliance_options (app_sid, application_flow_sid);
ALTER TABLE csr.compliance_permit ADD (
	date_created 	DATE DEFAULT SYSDATE NOT NULL,
	date_updated 	DATE,
	created_by		NUMBER(10)
);
ALTER TABLE csr.compliance_permit ADD CONSTRAINT fk_comp_permit_created_by
	FOREIGN KEY (app_sid, created_by) 
	REFERENCES csr.csr_user (app_sid, csr_user_sid);
ALTER TABLE csrimp.compliance_permit ADD (
	date_created 	DATE DEFAULT SYSDATE NOT NULL,
	date_updated 	DATE,
	created_by		NUMBER(10)
);
create index csr.ix_compliance_pe_created_by on csr.compliance_permit (app_sid, created_by);
ALTER TABLE csr.compliance_permit
ADD activity_details CLOB;
ALTER TABLE csr.compliance_permit_application
ADD title VARCHAR2(1024) NOT NULL;
ALTER TABLE csrimp.compliance_permit
ADD activity_details CLOB;
ALTER TABLE csrimp.compliance_permit_application
ADD title VARCHAR2(1024) NOT NULL;
ALTER TABLE chain.certification_type ADD (
	product_requirement_type_id			NUMBER(10, 0) DEFAULT 0 NOT NULL 
);
ALTER TABLE csrimp.chain_certification_type ADD (
	product_requirement_type_id			NUMBER(10, 0) NOT NULL 
);
ALTER TABLE chain.dedupe_mapping ADD allow_create_alt_company_name NUMBER(1);
ALTER TABLE csrimp.chain_dedupe_mapping ADD allow_create_alt_company_name NUMBER(1);
ALTER TABLE chain.dedupe_merge_log ADD alt_comp_name_downgrade NUMBER(1);
ALTER TABLE csrimp.chain_dedupe_merge_log ADD alt_comp_name_downgrade NUMBER(1);
ALTER TABLE chain.dedupe_merge_log DROP CONSTRAINT chk_dedupe_merge_one_value_set;
ALTER TABLE chain.dedupe_merge_log ADD CONSTRAINT CHK_DEDUPE_MERGE_ONE_VALUE_SET CHECK ((
		CASE WHEN dedupe_field_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN reference_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN tag_group_id IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN destination_col_sid IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN role_sid IS NOT NULL THEN 1 ELSE 0 END
		+ CASE WHEN alt_comp_name_downgrade IS NOT NULL THEN 1 ELSE 0 END
		) = 1);
create index chain.ix_dedupe_pp_alt_comp_name on chain.dedupe_pp_alt_comp_name (app_sid, company_sid);


grant select on chain.certification_type_id_seq to csrimp;
grant select, insert on chain.product_header to csr;
grant select, insert on chain.product_tab to csr;
grant select, insert, update, delete on csrimp.compliance_activity_type to tool_user;
grant select, insert, update, delete on csrimp.compliance_application_type to tool_user;
grant select, insert, update, delete on csrimp.compliance_condition_sub_type to tool_user;
grant select, insert, update, delete on csrimp.compliance_condition_type to tool_user;
grant select, insert, update, delete on csrimp.compliance_item_rollout to tool_user;
grant select, insert, update, delete on csrimp.compliance_permit to tool_user;
grant select, insert, update, delete on csrimp.compliance_permit_application to tool_user;
grant select, insert, update, delete on csrimp.compliance_permit_condition to tool_user;
grant select, insert, update, delete on csrimp.compliance_permit_sub_type to tool_user;
grant select, insert, update, delete on csrimp.compliance_permit_type to tool_user;
grant select, insert, update on csr.compliance_activity_type to csrimp;
grant select, insert, update on csr.compliance_application_type to csrimp;
grant select, insert, update on csr.compliance_condition_sub_type to csrimp;
grant select, insert, update on csr.compliance_condition_type to csrimp;
grant select, insert, update on csr.compliance_item_rollout to csrimp;
grant select, insert, update on csr.compliance_permit to csrimp;
grant select, insert, update on csr.compliance_permit_application to csrimp;
grant select, insert, update on csr.compliance_permit_condition to csrimp;
grant select, insert, update on csr.compliance_permit_sub_type to csrimp;
grant select, insert, update on csr.compliance_permit_type to csrimp;
grant select on csr.compliance_activity_type_seq to csrimp;
grant select on csr.compliance_application_tp_seq to csrimp;
grant select on csr.compliance_cond_sub_type_seq to csrimp;
grant select on csr.compliance_condition_type_seq to csrimp;
grant select on csr.compliance_permit_appl_seq to csrimp;
grant select on csr.compliance_permit_seq to csrimp;
grant select on csr.compliance_permit_sub_type_seq to csrimp;
grant select on csr.compliance_permit_type_seq to csrimp;
grant select on csr.compliance_permit_type_seq to csrimp;
GRANT SELECT ON csr.compliance_activity_type_seq TO csrimp;
GRANT SELECT ON csr.compliance_application_tp_seq TO csrimp;
GRANT SELECT ON csr.compliance_cond_sub_type_seq TO csrimp;
GRANT SELECT ON csr.compliance_condition_type_seq TO csrimp;
GRANT SELECT ON csr.compliance_permit_sub_type_seq TO csrimp;
GRANT SELECT ON csr.compliance_permit_type_seq TO csrimp;
GRANT SELECT ON csr.compliance_activ_sub_type_seq TO csrimp;
grant select, insert, update on csr.compliance_activity_sub_type to csrimp;
grant select, insert, update, delete on csrimp.compliance_activity_sub_type to tool_user;
grant select, insert, update, delete on csrimp.chain_product_header to tool_user;
grant select, insert, update, delete on csrimp.chain_pro_head_pro_type to tool_user;
grant select, insert, update, delete on csrimp.chain_product_tab to tool_user;
grant select, insert, update, delete on csrimp.chain_prod_tab_prod_type to tool_user;
grant select, insert, update, delete on csrimp.chain_produc_supplie_tab to tool_user;
grant select, insert, update, delete on csrimp.chain_pr_sup_tab_pr_typ to tool_user;
grant select, insert, update on chain.product_header to csrimp;
grant select, insert, update on chain.product_header_product_type to csrimp;
grant select, insert, update on chain.product_tab to csrimp;
grant select, insert, update on chain.product_tab_product_type to csrimp;
grant select, insert, update on chain.product_supplier_tab to csrimp;
grant select, insert, update on chain.prod_supp_tab_product_type to csrimp;
grant select on chain.product_supplier_tab_id_seq to csrimp;
grant select, insert, update on chain.product_header to CSR;
grant select, insert, update on chain.product_header_product_type to CSR;
grant select, insert, update on chain.product_tab to CSR;
grant select, insert, update on chain.product_tab_product_type to CSR;
grant select, insert, update on chain.product_supplier_tab to CSR;
grant select, insert, update on chain.prod_supp_tab_product_type to CSR;
grant select, insert, update, delete on csrimp.compliance_permit_tab to tool_user;
grant select, insert, update, delete on csrimp.compliance_permit_tab_group to tool_user;
grant select, insert, update on csr.compliance_permit_tab to csrimp;
grant select, insert, update on csr.compliance_permit_tab_group to csrimp;
grant select on chain.dedupe_pp_alt_comp_name to csr;
grant select, insert, update on chain.dedupe_pp_alt_comp_name to csrimp;
grant select, insert, update, delete on csrimp.chain_dedupe_pp_alt_comp_name to tool_user;
grant select on csr.user_measure_conversion to actions;


ALTER TABLE CHAIN.PRODUCT_HEADER ADD CONSTRAINT FK_PR_HD_PLUGIN_ID_PLUGIN
    FOREIGN KEY (PLUGIN_ID)
    REFERENCES CSR.PLUGIN(PLUGIN_ID);
ALTER TABLE CHAIN.PRODUCT_HEADER ADD CONSTRAINT FK_PR_HD_PLUGIN_TYPE_ID_PLGN_T
    FOREIGN KEY (PLUGIN_TYPE_ID)
    REFERENCES CSR.PLUGIN_TYPE(PLUGIN_TYPE_ID);
ALTER TABLE CHAIN.PRODUCT_HEADER ADD CONSTRAINT FK_PRODUCT_HDR_PRODUCT_COL
	FOREIGN KEY (APP_SID, PRODUCT_COL_SID)
	REFERENCES CMS.TAB_COLUMN(APP_SID, COLUMN_SID);
ALTER TABLE CHAIN.PRODUCT_HEADER ADD CONSTRAINT FK_PRODUCT_HDR_USER_COMP_COL
	FOREIGN KEY (APP_SID, USER_COMPANY_COL_SID)
	REFERENCES CMS.TAB_COLUMN(APP_SID, COLUMN_SID);
ALTER TABLE CHAIN.PRODUCT_TAB ADD CONSTRAINT FK_PR_TB_PLUGIN_ID_PLUGIN
    FOREIGN KEY (PLUGIN_ID)
    REFERENCES CSR.PLUGIN(PLUGIN_ID);
ALTER TABLE CHAIN.PRODUCT_TAB ADD CONSTRAINT FK_PR_TB_PLUGIN_TYPE_ID_PLGN_T
    FOREIGN KEY (PLUGIN_TYPE_ID)
    REFERENCES CSR.PLUGIN_TYPE(PLUGIN_TYPE_ID);
ALTER TABLE CHAIN.PRODUCT_TAB ADD CONSTRAINT FK_PRODUCT_TAB_PRODUCT_COL
	FOREIGN KEY (APP_SID, product_col_sid)
	REFERENCES CMS.TAB_COLUMN(APP_SID, COLUMN_SID);
ALTER TABLE CHAIN.PRODUCT_TAB ADD CONSTRAINT FK_PRODUCT_TAB_USER_COMP_COL
	FOREIGN KEY (APP_SID, USER_COMPANY_COL_SID)
	REFERENCES CMS.TAB_COLUMN(APP_SID, COLUMN_SID);
ALTER TABLE chain.company_product_certification ADD CONSTRAINT fk_comp_prod_cert_cert
	FOREIGN KEY (app_sid, certification_id)
	REFERENCES csr.internal_audit (app_sid, internal_audit_sid);
	
ALTER TABLE chain.product_supplier_certification ADD CONSTRAINT fk_prod_supp_cert_cert
	FOREIGN KEY (app_sid, certification_id)
	REFERENCES csr.internal_audit (app_sid, internal_audit_sid);
ALTER TABLE chain.product_metric_ind  ADD CONSTRAINT fk_product_metric_ind_ind
	FOREIGN KEY (app_sid, ind_sid)
	REFERENCES csr.ind (app_sid, ind_sid);
ALTER TABLE chain.product_metric_val ADD CONSTRAINT fk_product_mtrc_val_entrd_usr
	FOREIGN KEY (app_sid, entered_by_sid)
	REFERENCES csr.csr_user (app_sid, csr_user_sid);
	
ALTER TABLE chain.product_supplier_metric_val ADD CONSTRAINT fk_prdct_spld_mtrc_vl_entd_usr
	FOREIGN KEY (app_sid, entered_by_sid)
	REFERENCES csr.csr_user (app_sid, csr_user_sid);
	
ALTER TABLE CHAIN.PRODUCT_SUPPLIER_TAB ADD CONSTRAINT FK_PRSTB_PLUGIN_ID_PLUGIN
    FOREIGN KEY (PLUGIN_ID)
    REFERENCES CSR.PLUGIN(PLUGIN_ID);
ALTER TABLE CHAIN.PRODUCT_SUPPLIER_TAB ADD CONSTRAINT FK_PRSTB_PLUGIN_TYPE_ID_PLGN_T
    FOREIGN KEY (PLUGIN_TYPE_ID)
    REFERENCES CSR.PLUGIN_TYPE(PLUGIN_TYPE_ID);


CREATE OR REPLACE VIEW chain.v$company_product AS
	SELECT cp.product_id, tr.description product_name, cp.company_sid, cp.product_type_id,
		   cp.sku, cp.lookup_key, cp.is_active
	  FROM chain.company_product cp
	  JOIN chain.company_product_tr tr ON tr.product_id = cp.product_id AND tr.lang = NVL(SYS_CONTEXT('SECURITY', 'LANGUAGE'), 'en');
CREATE OR REPLACE VIEW chain.v$supplier_certification AS
	SELECT cat.app_sid, cat.certification_type_id, ia.internal_audit_sid certification_id,
		   ia.internal_audit_sid, s.company_sid, ia.internal_audit_type_id, ia.audit_dtm valid_from_dtm,
		   CASE (atct.re_audit_due_after_type)
				WHEN 'd' THEN nvl(ia.ovw_validity_dtm, ia.audit_dtm + atct.re_audit_due_after)
				WHEN 'w' THEN nvl(ia.ovw_validity_dtm, ia.audit_dtm + (atct.re_audit_due_after*7))
				WHEN 'm' THEN nvl(ia.ovw_validity_dtm, ADD_MONTHS(ia.audit_dtm, atct.re_audit_due_after))
				WHEN 'y' THEN nvl(ia.ovw_validity_dtm, add_months(ia.audit_dtm, atct.re_audit_due_after*12))
				ELSE ia.ovw_validity_dtm 
			END expiry_dtm, atct.audit_closure_type_id 
	FROM chain.cert_type_audit_type cat 
	JOIN csr.internal_audit ia ON ia.internal_audit_type_id = cat.internal_audit_type_id
	 AND cat.app_sid = ia.app_sid
	 AND ia.deleted = 0
	JOIN csr.supplier s  ON ia.region_sid = s.region_sid AND s.app_sid = ia.app_sid
	LEFT JOIN csr.audit_type_closure_type atct ON ia.audit_closure_type_id = atct.audit_closure_type_id 
	 AND ia.internal_audit_type_id = atct.internal_audit_type_id
	 AND ia.app_sid = atct.app_sid
	LEFT JOIN csr.audit_closure_type act ON atct.audit_closure_type_id = act.audit_closure_type_id 
	 AND act.app_sid = atct.app_sid
   WHERE NVL(act.is_failure, 0) = 0
	 AND (ia.flow_item_id IS NULL 
	  OR EXISTS(
			SELECT fi.flow_item_id 
			  FROM csr.flow_item fi 
			  JOIN csr.flow_state fs ON fs.flow_state_id = fi.current_state_id AND fs.is_final = 1 
			 WHERE fi.flow_item_id = ia.flow_item_id));
	   




BEGIN
	INSERT INTO chain.product_metric_agg_rule (rule_type_id, label) VALUES (1, 'Sum');
	INSERT INTO chain.product_metric_agg_rule (rule_type_id, label) VALUES (2, 'Average');
	INSERT INTO chain.product_metric_agg_rule (rule_type_id, label) VALUES (3, 'Take lowest');	
END;
/
CREATE OR REPLACE PROCEDURE chain.Temp_RegisterCapability (
	in_capability_type			IN  NUMBER,
	in_capability				IN  VARCHAR2, 
	in_perm_type				IN  NUMBER,
	in_is_supplier				IN  NUMBER DEFAULT 0
)
AS
	v_count						NUMBER(10);
	v_ct						NUMBER(10);
BEGIN
	IF in_capability_type = 10 /*chain_pkg.CT_COMPANIES*/ THEN
		Temp_RegisterCapability(1 /*chain_pkg.CT_COMPANY*/, in_capability, in_perm_type);
		Temp_RegisterCapability(2 /*chain_pkg.CT_SUPPLIERS*/, in_capability, in_perm_type, 1);
		RETURN;	
	END IF;
	
	IF in_capability_type = 1 AND in_is_supplier <> 0 /* chain_pkg.IS_NOT_SUPPLIER_CAPABILITY */ THEN
		RAISE_APPLICATION_ERROR(-20001, 'Company capabilities cannot be supplier centric');
	ELSIF in_capability_type = 2 /* chain_pkg.CT_SUPPLIERS */ AND in_is_supplier <> 1 /* chain_pkg.IS_SUPPLIER_CAPABILITY */ THEN
		RAISE_APPLICATION_ERROR(-20001, 'Supplier capabilities must be supplier centric');
	END IF;
	
	SELECT COUNT(*)
	  INTO v_count
	  FROM chain.capability
	 WHERE capability_name = in_capability
	   AND capability_type_id = in_capability_type
	   AND perm_type = in_perm_type;
	
	IF v_count > 0 THEN
		-- this is already registered
		RETURN;
	END IF;
	
	SELECT COUNT(*)
	  INTO v_count
	  FROM chain.capability
	 WHERE capability_name = in_capability
	   AND perm_type <> in_perm_type;
	
	IF v_count > 0 THEN
		RAISE_APPLICATION_ERROR(security.security_pkg.ERR_ACCESS_DENIED, 'A capability named '''||in_capability||''' already exists using a different permission type');
	END IF;
	
	SELECT COUNT(*)
	  INTO v_count
	  FROM chain.capability
	 WHERE capability_name = in_capability
	   AND (
			(capability_type_id = 0 /*chain_pkg.CT_COMMON*/ AND (in_capability_type = 0 /*chain_pkg.CT_COMPANY*/ OR in_capability_type = 2 /*chain_pkg.CT_SUPPLIERS*/))
			 OR (in_capability_type = 0 /*chain_pkg.CT_COMMON*/ AND (capability_type_id = 1 /*chain_pkg.CT_COMPANY*/ OR capability_type_id = 2 /*chain_pkg.CT_SUPPLIERS*/))
		   );
	
	IF v_count > 0 THEN
		RAISE_APPLICATION_ERROR(security.security_pkg.ERR_ACCESS_DENIED, 'A capability named '''||in_capability||''' is already registered as a different capability type');
	END IF;
	
	INSERT INTO chain.capability 
	(capability_id, capability_name, capability_type_id, perm_type, is_supplier) 
	VALUES 
	(chain.capability_id_seq.NEXTVAL, in_capability, in_capability_type, in_perm_type, in_is_supplier);
	
END;
/
BEGIN
	chain.Temp_RegisterCapability(
		in_capability_type	=> 10,  							/* CT_COMPANIES*/
		in_capability		=> 'Create products', 		 		/* CREATE_PRODUCTS */
		in_perm_type		=> 1 								/* BOOLEAN_PERMISSION */
	);
	chain.Temp_RegisterCapability(
		in_capability_type	=> 1,  								/* CT_COMPANY */
		in_capability		=> 'Products as supplier', 			/* PRODUCTS_AS_SUPPLIER */
		in_perm_type		=> 1 								/* BOOLEAN_PERMISSION */
	);
	chain.Temp_RegisterCapability(
		in_capability_type	=> 2,  								/* CT_SUPPLIER */
		in_capability		=> 'Product suppliers', 			/* PRODUCT_SUPPLIERS */
		in_perm_type		=> 0, 								/* SPECIFIC_PERMISSION */
		in_is_supplier		=> 1
	);
	chain.Temp_RegisterCapability(
		in_capability_type	=> 3,  								/* CT_ON_BEHALF_OF */
		in_capability		=> 'Product suppliers', 			/* PRODUCT_SUPPLIERS */
		in_perm_type		=> 0, 								/* SPECIFIC_PERMISSION */
		in_is_supplier		=> 1
	);
	chain.Temp_RegisterCapability(
		in_capability_type	=> 2,  								/* CT_SUPPLIER */
		in_capability		=> 'Add supplier to products', 		/* ADD_PRODUCT_SUPPLIER */
		in_perm_type		=> 1, 								/* BOOLEAN_PERMISSION */
		in_is_supplier		=> 1
	);
	chain.Temp_RegisterCapability(
		in_capability_type	=> 3,  								/* CT_ON_BEHALF_OF */
		in_capability		=> 'Add supplier to products', 		/* ADD_PRODUCT_SUPPLIER */
		in_perm_type		=> 1, 								/* BOOLEAN_PERMISSION */
		in_is_supplier		=> 1
	);
END;
/
DROP PROCEDURE chain.Temp_RegisterCapability;
DECLARE
	v_card_id         chain.card.card_id%TYPE;
	v_desc            chain.card.description%TYPE;
	v_class           chain.card.class_type%TYPE;
	v_js_path         chain.card.js_include%TYPE;
	v_js_class        chain.card.js_class_type%TYPE;
	v_css_path        chain.card.css_include%TYPE;
	v_actions         chain.T_STRING_LIST;
BEGIN
	v_desc := 'Product Company Filter Adapter';
	v_class := 'Credit360.Chain.Cards.Filters.ProductCompanyFilterAdapter';
	v_js_path := '/csr/site/chain/cards/filters/productCompanyFilterAdapter.js';
	v_js_class := 'Credit360.Chain.Filters.ProductCompanyFilterAdapter';
	v_css_path := '';
	
	BEGIN
		INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
		VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
		RETURNING card_id INTO v_card_id;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			UPDATE chain.card
			SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
			WHERE js_class_type = v_js_class
			RETURNING card_id INTO v_card_id;
	END;
	
	DELETE FROM chain.card_progression_action
	 WHERE card_id = v_card_id
	   AND action NOT IN ('default');
	
	v_actions := chain.T_STRING_LIST('default');
	
	FOR i IN v_actions.FIRST .. v_actions.LAST
	LOOP
		BEGIN
			INSERT INTO chain.card_progression_action (card_id, action)
			VALUES (v_card_id, v_actions(i));
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
	v_desc := 'Product Supplier Filter Adapter';
	v_class := 'Credit360.Chain.Cards.Filters.ProductSupplierFilterAdapter';
	v_js_path := '/csr/site/chain/cards/filters/productSupplierFilterAdapter.js';
	v_js_class := 'Credit360.Chain.Filters.ProductSupplierFilterAdapter';
	v_css_path := '';
	
	BEGIN
		INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
		VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
		RETURNING card_id INTO v_card_id;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			UPDATE chain.card
			SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
			WHERE js_class_type = v_js_class
			RETURNING card_id INTO v_card_id;
	END;
	
	DELETE FROM chain.card_progression_action
	 WHERE card_id = v_card_id
	   AND action NOT IN ('default');
	
	v_actions := chain.T_STRING_LIST('default');
	
	FOR i IN v_actions.FIRST .. v_actions.LAST
	LOOP
		BEGIN
			INSERT INTO chain.card_progression_action (card_id, action)
			VALUES (v_card_id, v_actions(i));
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
END;
/
DECLARE
	v_card_id						NUMBER(10);
BEGIN
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Credit360.Chain.Filters.ProductCompanyFilterAdapter';
	
	BEGIN	
		INSERT INTO chain.filter_type (filter_type_id,description,helper_pkg,card_id) 
		    VALUES (chain.filter_type_id_seq.NEXTVAL, 'Product Company Filter Adapter', 'chain.product_report_pkg', v_card_id);
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Credit360.Chain.Filters.ProductSupplierFilterAdapter';
	
	BEGIN	
		INSERT INTO chain.filter_type (filter_type_id,description,helper_pkg,card_id) 
		    VALUES (chain.filter_type_id_seq.NEXTVAL, 'Product Supplier Filter Adapter', 'chain.product_report_pkg', v_card_id);
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
END;
/
UPDATE chain.capability SET capability_name = 'Product suppliers of suppliers' WHERE capability_name = 'Product suppliers' AND capability_type_id = 3;
UPDATE chain.capability SET capability_name = 'Add product suppliers of suppliers' WHERE capability_name = 'Add supplier to products' AND capability_type_id = 3;
BEGIN
	BEGIN
		INSERT INTO CSR.AUDIT_TYPE ( AUDIT_TYPE_GROUP_ID, AUDIT_TYPE_ID, LABEL ) VALUES (2, 200, 'Business relationship changes');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	BEGIN
		INSERT INTO CSR.AUDIT_TYPE ( AUDIT_TYPE_GROUP_ID, AUDIT_TYPE_ID, LABEL ) VALUES (2, 201, 'Product type changes');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	BEGIN
		INSERT INTO CSR.AUDIT_TYPE ( AUDIT_TYPE_GROUP_ID, AUDIT_TYPE_ID, LABEL ) VALUES (2, 202, 'Company product changes');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	BEGIN
		INSERT INTO csr.plugin_type (plugin_type_id, description) VALUES (20, 'Chain Product Supplier Tab');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	BEGIN
		insert into csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
			values (94, 19, 'Chain Product Suppliers Tab', '/csr/site/chain/manageProduct/controls/ProductSuppliersTab.js', 'Chain.ManageProduct.ProductSuppliersTab', 'Credit360.Chain.Plugins.ProductSuppliersDto', 'This tab shows the suppliers who contribute to a product.');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	BEGIN
		insert into csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
			values (95, 20, 'Chain Product Supplier Details Tab', '/csr/site/chain/manageProduct/controls/ProductSupplierDetailsTab.js', 'Chain.ManageProduct.ProductSupplierDetailsTab', 'Credit360.Plugins.EmptyDto', 'This tab shows the suppliers who contribute to a product.');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
END;
/
UPDATE csr.plugin SET cs_class = 'Credit360.Plugins.EmptyDto' WHERE js_class = 'Chain.ManageProduct.ProductHeader';
BEGIN
	BEGIN
		insert into csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
		values (96, 19, 'Chain Product Certifications Tab', '/csr/site/chain/manageProduct/controls/ProductCertificationsTab.js', 'Chain.ManageProduct.ProductCertificationsTab', 'Credit360.Chain.Plugins.ProductCertificationsDto', 'This tab shows the certifications attached to a product.');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	BEGIN
		insert into csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
		values (97, 20, 'Chain Product Supplier Certifications Tab', '/csr/site/chain/manageProduct/controls/ProductSupplierCertificationsTab.js', 'Chain.ManageProduct.ProductSupplierCertificationsTab', 'Credit360.Chain.Plugins.ProductSupplierCertificationsDto', 'This tab shows the certifications attached to a product supplier.');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
END;
/
BEGIN
	BEGIN
		INSERT INTO csr.est_attr_type (type_name, basic_type)
		VALUES ('m'||UNISTR('\00B3')||'/m'||UNISTR('\00B2')||'', 'NUMERIC');
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL; -- Ignore dupes
	END;
	BEGIN
		INSERT INTO csr.est_attr_for_building (attr_name, type_name, is_mandatory, label)
		VALUES ('waterIntensityTotal', 'm'||UNISTR('\00B3')||'/m'||UNISTR('\00B2')||'', 0, 'Water Intensity (All Water Sources)');
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL; -- Ignore dupes
	END;
END;
/
BEGIN
	UPDATE csr.plugin
	   SET description = SUBSTR(description, 14)
	 WHERE plugin_type_id IN (18, 19, 20)
	   AND plugin_id != 92
	   AND SUBSTR(description, 1, 14) = 'Chain Product ';
	BEGIN
		insert into csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
		values (csr.plugin_id_seq.nextval, 18, 'Certification Requirements Header', '/csr/site/chain/manageProduct/controls/CertificationRequirementsHeader.js', 'Chain.ManageProduct.CertificationRequirementsHeader', 'Credit360.Chain.Plugins.CertificationRequirementsDto', 'This header shows the certification requirements for a product.');
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
END;
/
begin
	delete from security.permission_mapping where parent_class_id in (
		select class_id from security.securable_object_class where lower(class_name) in ('mdcomment', 'aspenredirect'));
	delete from security.permission_mapping where child_class_id in (
		select class_id from security.securable_object_class where lower(class_name) in ('mdcomment', 'aspenredirect'));
	delete from security.permission_name where class_id in (
		select class_id from security.securable_object_class where lower(class_name) in ('mdcomment', 'aspenredirect'));
	delete from security.securable_object_class where class_id in
		(select class_id from security.securable_object_class where lower(class_name) in ('mdcomment', 'aspenredirect'));
end;
/
INSERT INTO csr.module (module_id, module_name, enable_sp, description)
VALUES (95, 'Permits', 'EnablePermits', 'Enables the compliance permits module.');
BEGIN
	BEGIN
		INSERT INTO csr.capability (name, allow_by_default) VALUES ('Manage compliance items', 0);
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL;
	END;
END;
/
DECLARE
	v_is_nullable		NUMBER(10);
BEGIN
	SELECT COUNT(*)
	  INTO v_is_nullable
	  FROM all_tab_cols
	 WHERE owner = 'CSR'
	   AND table_name = 'SCORE_TYPE'
	   AND column_name = 'APPLIES_TO_SURVEYS'
	   AND nullable = 'Y';
	
	IF v_is_nullable > 0 THEN
		UPDATE csr.score_type
		   SET applies_to_surveys = 0
		 WHERE applies_to_surveys IS NULL;
	
		EXECUTE IMMEDIATE 'ALTER TABLE csr.score_type MODIFY applies_to_surveys DEFAULT 0 NOT NULL';
	END IF;
	SELECT COUNT(*)
	  INTO v_is_nullable
	  FROM all_tab_cols
	 WHERE owner = 'CSRIMP'
	   AND table_name = 'SCORE_TYPE'
	   AND column_name = 'APPLIES_TO_SURVEYS'
	   AND nullable = 'Y';
	
	IF v_is_nullable > 0 THEN
		UPDATE csrimp.score_type
		   SET applies_to_surveys = 0
		 WHERE applies_to_surveys IS NULL;
	
		EXECUTE IMMEDIATE 'ALTER TABLE csrimp.score_type MODIFY applies_to_surveys NOT NULL';
	END IF;
	
	SELECT COUNT(*)
	  INTO v_is_nullable
	  FROM all_tab_cols
	 WHERE owner = 'CSR'
	   AND table_name = 'SCORE_TYPE'
	   AND column_name = 'APPLIES_TO_NON_COMPLIANCES'
	   AND nullable = 'Y';
	
	IF v_is_nullable > 0 THEN
		UPDATE csr.score_type
		   SET applies_to_non_compliances = 0
		 WHERE applies_to_non_compliances IS NULL;
	
		EXECUTE IMMEDIATE 'ALTER TABLE csr.score_type MODIFY applies_to_non_compliances DEFAULT 0 NOT NULL';
	END IF;
	
	SELECT COUNT(*)
	  INTO v_is_nullable
	  FROM all_tab_cols
	 WHERE owner = 'CSRIMP'
	   AND table_name = 'SCORE_TYPE'
	   AND column_name = 'APPLIES_TO_NON_COMPLIANCES'
	   AND nullable = 'Y';
	
	IF v_is_nullable > 0 THEN
		UPDATE csrimp.score_type
		   SET applies_to_non_compliances = 0
		 WHERE applies_to_non_compliances IS NULL;
	
		EXECUTE IMMEDIATE 'ALTER TABLE csrimp.score_type MODIFY applies_to_non_compliances NOT NULL';
	END IF;
END;
/
BEGIN
	security.user_pkg.logonadmin;
	UPDATE chain.reference
	   SET reference_validation_id = 1
	 WHERE lookup_key = 'BSCI_ID' OR lookup_key ='HIGGID';
	
	security.user_pkg.logoff(SYS_CONTEXT('SECURITY','ACT'));
END;
/
INSERT INTO chain.reference_validation(reference_validation_id, description, validation_regex, validation_text)
  	 VALUES (0, 'Any', NULL, NULL);
INSERT INTO chain.reference_validation(reference_validation_id, description, validation_regex, validation_text)
  	 VALUES (1, 'Numeric only', '^[0-9]+$', 'Please enter only numbers');
INSERT INTO chain.reference_validation(reference_validation_id, description, validation_regex, validation_text)
   	 VALUES (2, 'Text only', '^[a-zA-Z]+$', 'Please enter only letters');
ALTER TABLE CHAIN.REFERENCE ADD CONSTRAINT FK_REFERENCE_VALIDATION
	FOREIGN KEY (REFERENCE_VALIDATION_ID)
	REFERENCES CHAIN.REFERENCE_VALIDATION(REFERENCE_VALIDATION_ID)
;
ALTER TABLE CHAIN.REFERENCE MODIFY REFERENCE_VALIDATION_ID NOT NULL;
BEGIN
	UPDATE chain.company_reference
	   SET value = NULL
	 WHERE company_reference_id IN (
		 SELECT company_reference_id
		   FROM (
			 SELECT company_reference_id, CASE WHEN LENGTH(TRIM(TRANSLATE(value, '0123456789', ' '))) IS NOT NULL THEN 1 ELSE 0 END not_numeric
			   FROM chain.company_reference cr
			   JOIN chain.reference r ON r.reference_id = cr.reference_id
			  WHERE r.lookup_key = 'HIGGID'
		   )
		   WHERE not_numeric = 1
	   );
END;
/
UPDATE csr.module
   SET license_warning = 1
 WHERE module_id in (20, 58, 60, 68, 69, 70);
BEGIN
	INSERT INTO csr.std_compl_application_type(application_type_id, description) VALUES (1, 'Grant');
	INSERT INTO csr.std_compl_application_type(application_type_id, description) VALUES (2, 'Renewal');
	INSERT INTO csr.std_compl_application_type(application_type_id, description) VALUES (3, 'Variation');
	INSERT INTO csr.std_compl_application_type(application_type_id, description) VALUES (4, 'Transfer');
	INSERT INTO csr.std_compl_application_type(application_type_id, description) VALUES (5, 'Surrender');
END;
/
BEGIN
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (1, 'Installation');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (2, 'Waste operation');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (3, 'Mining waste operation');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (4, 'Small waste incineration plant');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (5, 'Mobile plant');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (6, 'Solvent emissions');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (7, 'Stand-alone water discharge');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (8, 'Groundwater activity');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (9, 'Flood risk activities on or near a main river or sea defence');
	INSERT INTO csr.std_compl_activity_type(activity_type_id, description) VALUES (10, 'Radioactive substances');
	
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 1, 'ERF');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 2, 'Landfill');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 3, 'Composting');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 4, 'HWRC');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 5, 'Transfer Station');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 6, 'Decommissioning');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 7, 'RDF');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 8, 'WWTW');
	INSERT INTO csr.std_compl_activity_sub_type(activity_type_id, activity_sub_type_id, description) VALUES (2, 9, 'IWMF');
END;
/
BEGIN
	INSERT INTO csr.std_compl_condition_type(condition_type_id, description) VALUES (1, 'Management');
	INSERT INTO csr.std_compl_condition_type(condition_type_id, description) VALUES (2, 'Operations');
	INSERT INTO csr.std_compl_condition_type(condition_type_id, description) VALUES (3, 'Emissions and monitoring');
	INSERT INTO csr.std_compl_condition_type(condition_type_id, description) VALUES (4, 'Information');
	
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (1, 1, 'General Management');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (1, 2, 'Finance');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (1, 3, 'Energy efficiency');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (1, 4, 'Multiple operator installations');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (1, 5, 'Efficient use of raw materials');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (1, 6, 'Avoidance, recovery and disposal of wastes');
	
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 1, 'Permitted activities');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 2, 'The site');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 3, 'Landfill Engineering');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 4, 'Waste acceptance');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 5, 'Leachate levels');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 6, 'Operating techniques');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 7, 'Volume');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 8, 'Discharge Period');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 9, 'Technical Requirements');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 10, 'Improvement');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 11, 'Pre-operational');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 12, 'Closure and aftercare');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 13, 'Landfill gas management');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (2, 14, 'Pestsk');
	
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 1, 'Emissions to water, air or land');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 2, 'Emissions of substances not controlled by emission limits');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 3, 'Monitoring');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 4, 'Odour');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 5, 'Noise and vibration');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 6, 'Pests');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 7, 'Monitoring for the purposes of the Large Combustion Plant Directive');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (3, 8, 'Air Quality Management Plan');
	
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (4, 1, 'Records');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (4, 2, 'Reporting');
	INSERT INTO csr.std_compl_condition_sub_type(condition_type_id, condition_sub_type_id, description) VALUES (4, 3, 'Notifications');
END;
/
BEGIN
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (1, 'SR: Biological treatment of waste');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (2, 'SR: Flood risk activities');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (3, 'SR: Installations');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (4, 'SR: Low impact installation');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (5, 'SR: Keeping/transfer of waste');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (6, 'SR: Metal recovery/scrap metal');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (7, 'SR: Materials recovery and recycling');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (8, 'SR: Onshore oil and gas exploration, and mining operation');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (9, 'SR: Radioactive substances for non-nuclear sites');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (10, 'SR: Recovery or use of waste on land');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (11, 'SR: Treatment to produce aggregate or construction materials');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (12, 'SR: Water discharges');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (13, 'Bespoke');
	INSERT INTO csr.std_compl_permit_type(permit_type_id, description) VALUES (14, 'Exemption');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 1, 'SR2008 No. 16 25kte and 75kte: composting in open systems (no longer available)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 2, 'SR2008 No. 17 75kte: composting in closed systems (in-vessel composting)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 3, 'SR2008 No. 18 75kte: non hazardous mechanical biological (aerobic) treatment facility (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 4, 'SR2015 No. 12 75kte non-hazardous mechanical biological (aerobic) treatment facility');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 5, 'SR2008 No. 19 75kte: non-hazardous sludge biological chemical and physical treatment site');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 6, 'SR2008 No. 19 250kte: non-hazardous sludge biological chemical and physical treatment site');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 7, 'SR2009 No. 4: combustion of biogas in engines at a sewage treatment works');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 8, 'SR2010 No. 14 500t: composting biodegradable waste');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 9, 'SR2010 No. 15: anaerobic digestion facility including use of the resultant biogas');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 10, 'SR2010 No. 16: on-farm anaerobic digestion facility');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 11, 'SR2010 No. 17: storage of digestate from anaerobic digestion plants');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 12, 'SR2010 No. 18: storage and treatment of dredgings for recovery');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 13, 'SR2011 No. 1 500t: composting biodegradable waste (in open and closed systems)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 14, 'SR2012 No. 3: composting in closed systems');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 15, 'SR2012 No. 7: composting in open systems');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 16, 'SR2012 No. 10: on-farm anaerobic digestion facility using farm wastes only, including use of the resultant biogas');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (1, 17, 'SR2012 No. 12: anaerobic digestion facility including use of the resultant biogas (waste recovery operation)');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 1, 'SR2015 No. 26: temporary dewatering affecting up to 20 metres of a main river');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 2, 'SR2015 No. 27: constructing an outfall pipe of 300mm to 500mm diameter');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 3, 'SR2015 No. 28: installing a clear span bridge on a main river');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 4, 'SR2015 No. 29: temporary storage within the flood plain of a main river');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 5, 'SR2015 No. 30: temporary diversion of a main river');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 6, 'SR2015 No. 31: channel habitat structure made of natural materials');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 7, 'SR2015 No. 32: installing a access culvert of no more than 5 metres length');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 8, 'SR2015 No. 33: repairing and protecting up to 20 metres of the bank of a main river');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 9, 'SR2015 No. 34: temporary scaffolding affecting up to 20 metres length of a main river');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 10, 'SR2015 No. 35: excavating a wetland or pond in a main river floodplain');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 11, 'SR2015 No. 36: installing and using site investigation boreholes and temporary trial pits within a main river floodplain for a period of up to 4 weeks');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (2, 12, 'SR2015 No. 38: removing a total of 100 metres of exposed gravel from bars and shoals');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (3, 1, 'SR2012 No. 4: composting in closed systems');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (3, 2, 'SR2012 No. 8: composting in open systems');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (3, 3, 'SR2012 No. 9: on-farm anaerobic digestion using farm wastes');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (3, 4, 'SR2012 No. 11: anaerobic digestion facility including use of the resultant biogas');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (3, 5, 'SR2012 No. 13: treatment of Incinerator Bottom Ash (IBA)');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (4, 1, 'SR2009 No. 2: low impact part A installation');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (4, 2, 'SR2009 No. 3: low impact part A installation for the production of biodiesel');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 1, 'SR2008 No. 1 75kte: household, commercial and industrial waste transfer station (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 2, 'SR2015 No. 4 75kte: household, commercial and industrial waste transfer station');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 3, 'SR2008 No. 2: household, commercial and industrial waste transfer station (no building) (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 4, 'SR2015 No. 5: household, commercial and industrial waste transfer station (no building)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 5, 'SR2008 No. 3 75kte: household, commercial and industrial waste transfer station with treatment (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 6, 'SR2015 No. 6 75kte: household, commercial and industrial waste transfer station with treatment');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 7, 'SR2008 No. 4: household, commercial and industrial waste transfer station with treatment (no building) (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 8, 'SR2015 No. 7: household, commercial and industrial waste transfer station with treatment (no building)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 9, 'SR2008 No. 5 75kte: household, commercial and industrial waste transfer station and asbestos storage (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 10, 'SR2015 No. 8 75kte: household, commercial and industrial waste transfer station with asbestos storage');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 11, 'SR2008 No. 6: household, commercial and industrial waste transfer station with asbestos storage (no building) (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 12, 'SR2015 No. 9: household, commercial and industrial waste transfer station with asbestos storage (no building)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 13, 'SR2008 No. 7 75kte: household, commercial and industrial waste transfer station with treatment and asbestos storage (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 14, 'SR2015 No. 10 75kte: household, commercial and industrial waste transfer station with treatment and asbestos storage');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 15, 'SR2008 No. 8: household, commercial and industrial waste transfer station with treatment and asbestos storage (no building) (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 16, 'SR2015 No. 11: household, commercial and industrial waste transfer station with treatment and asbestos storage (no building)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 17, 'SR2008 No. 9: asbestos waste transfer station');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 18, 'SR2008 No. 10 75kte: inert and excavation waste transfer station (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 19, 'SR2008 No. 11 75kte: inert and excavation waste transfer station with treatment (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 20, 'SR2008 No. 24 75Kte: clinical waste and healthcare waste transfer station (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 21, 'SR2008 No. 25 75kte: clinical waste and healthcare waste treatment and transfer station (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 22, 'SR2009 No. 5: inert and excavation waste transfer station below 250kte (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 23, 'SR2009 No. 6: inert and excavation waste transfer station with treatment below 250kte (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 24, 'SR2012 No. 15: storage of electrical insulating oils');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (5, 25, 'SR2013 No. 1: treatment of 100 t/y of clinical and healthcare waste');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 1, 'SR2012 No. 14: metal recycling, vehicle storage, depollution and dismantling facility (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 2, 'SR2015 No. 18: metal recycling, vehicle storage, depollution and dismantling facility');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 3, 'SR2008 No. 20 75kte: vehicle storage, depollution and dismantling (authorised treatment) facility (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 4, 'SR2015 No. 13 75kte: vehicle storage depollution and dismantling (authorised treatment) facility');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 5, 'SR2011 No. 2: metal recycling site (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 6, 'SR2015 No. 16: metal recycling site');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 7, 'SR2008 No. 21 75kte: metal recycling site (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 8, 'SR2015 No. 14 75kte: metal recycling site');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 9, 'SR2009 No. 7: storage of furnace ready scrap metal for recovery');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 10, 'SR2008 No. 22 75kte: storage of furnace ready scrap metal for recovery');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 11, 'SR2008 No. 23 75kte: WEEE authorised treatment facility excluding ozone depleting substances (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 12, 'SR2015 No. 15 75kte: WEEE authorised treatment facility excluding ozone depleting substances');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 13, 'SR2015 No. 3: metal recycling and WEEE authorised treatment facility excluding ozone depleting substances');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 14, 'SR2011 No. 3: vehicle storage depollution and dismantling (authorised treatment) facility (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (6, 15, 'SR2015 No. 17: vehicle storage depollution and dismantling authorised treatment facility');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 1, 'SR2008 No. 12 75kte: non hazardous household waste amenity site (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 2, 'SR2015 No. 19 75kte: non-hazardous household waste amenity site');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 3, 'SR2008 No. 13 75kte: non-hazardous and hazardous household waste amenity site (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 4, 'SR2015 No. 20 75kte: non-hazardous and hazardous household waste amenity site');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 5, 'SR2008 No. 14 75kte: materials recycling facility (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 6, 'SR2015 No. 21 75kte: materials recycling facility');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 7, 'SR2008 No. 15: materials recycling facility (no building) (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 8, 'SR2015 No. 22: Materials recycling facility (no building)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 9, 'SR2011 No. 4: treatment of waste wood for recovery (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (7, 10, 'SR2015 No. 23: treatment of waste wood for recovery'); 
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (8, 1, 'SR2009 No. 8: management of inert wastes and unpolluted soil at mines and quarries');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (8, 2, 'SR2014 No. 2: the management of extractive waste');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (8, 3, 'SR2015 No. 2: storage and handling of crude oil');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (8, 4, 'SR2015 No. 1: onshore oil exploration');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (9, 1, 'SR2010 No. 1: category 5 sealed radioactive sources standard rules');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (9, 2, 'SR2014 No. 4: NORM waste from oil and gas production');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 1, 'SR2015 No. 39: use of waste in a deposit for recovery operation');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 2, 'SR2008 No. 27: mobile plant for the treatment of soils and contaminated material, substances or products');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 3, 'SR2010 No. 4: mobile plant for land-spreading');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 4, 'SR2010 No. 5: mobile plant for reclamation, restoration or improvement of land');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 5, 'SR2010 No. 6: mobile plant for land-spreading of sewage sludge');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 6, 'SR2010 No. 7 50kte: use of waste in construction (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 7, 'SR2010 No. 8: use of waste in construction (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 8, 'SR2010 No. 9: use of waste for reclamation, restoration or improvement of land (existing permits)');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (10, 9, 'SR2010 No. 10: standard rules to operate waste for reclamation, restoration or improvement of land (existing permits)');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (11, 1, 'SR2010 No. 11: mobile plant for the treatment of waste to produce soil, soil substitutes and aggregate');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (11, 2, 'SR2010 No. 12: treatment of waste to produce soil, soil substitutes and aggregate');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (11, 3, 'SR2010 No. 13: use of waste to manufacture timber or construction products');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (11, 4, 'SR2015 No. 24: use of waste to manufacture timber or construction products');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (12, 1, 'SR2010 No. 2: discharge to surface water');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (12, 2, 'SR2010 No. 3: discharge to surface water');
	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 1, 'Waste exemption: D1 depositing waste from dredging inland waters');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 2, 'Waste exemption: D2 depositing waste from a railway sanitary convenience');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 3, 'Waste exemption: D3 depositing waste from a portable sanitary convenience');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 4, 'Waste exemption: D4 depositing agricultural waste consisting of plant tissue under a Plant Health Notice');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 5, 'Waste exemption: D5 depositing waste samples for testing or analysis');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 6, 'Waste exemption: D6 disposal by incineration');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 7, 'Waste exemption: D7 burning waste in the open');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 8, 'Waste exemption: D8 burning waste at a port under a Plant Health Notice');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 9, 'Waste exemption: NWFD 2 temporary storage at the place of production');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 10, 'Waste exemption: NWFD 3 temporary storage of waste at a place controlled by the producer');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 11, 'Waste exemption: NWFD 4 temporary storage at a collection point');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 12, 'Waste exemption: S1 storing waste in secure containers');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 13, 'Waste exemption: S2 storing waste in a secure place');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 14, 'Waste exemption: S3 storing sludge');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 15, 'Waste exemption: T22 treatment of animal by-product waste at a collection centre');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 16, 'Waste exemption: T3 treatment of waste metals and metal alloys by heating for the purposes of removing grease');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 17, 'Waste exemption: T7 treatment of waste bricks, tiles and concrete by crushing, grinding or reducing in size');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 18, 'Waste exemption: U10 spreading waste to benefit agricultural land');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 19, 'Waste exemption: U11 spreading waste to benefit non-agricultural land');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 20, 'Waste exemption: U12 using mulch');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 21, 'Waste exemption: U13 spreading plant matter to provide benefits');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 22, 'Waste exemption: U14 incorporating ash into soil');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 23, 'Waste exemption: U15 pig and poultry ash');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 24, 'Waste exemption: U16 using depolluted end-of-life vehicles for parts');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 25, 'Waste exemption: U2 use of baled end-of-life tyres in construction');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 26, 'Waste exemption: U3 construction of entertainment or educational installations');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 27, 'Waste exemption: U4 burning of waste as a fuel in a small appliance');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 28, 'Waste exemption: U5 using biodiesel produced from waste as fuel');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 29, 'Waste exemption: U6 using sludge to re-seed a waste water treatment plant');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 30, 'Waste exemption: U7 using effluent to clean a highway gravel bed');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 31, 'Waste exemption: U8 using waste for a specified purpose');
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 32, 'Waste exemption: U9 using waste to manufacture finished goods');	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 33, 'Groundwater tracer');	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 34, 'Groundwater remediation');	
	INSERT INTO csr.std_compl_permit_sub_type(permit_type_id, permit_sub_type_id, description) VALUES (14, 35, 'Flood');	
END;
/
DECLARE
	v_dummy_sid		NUMBER;
BEGIN
	security.user_pkg.LogonAdmin;
	
	FOR r IN (
		SELECT sid_id
		  FROM security.menu
	     WHERE LOWER(action) IN ('/csr/site/compliance/admin/menu.acds', '/csr/site/compliance/admin/configure.acds')
	) LOOP
		security.securableobject_pkg.DeleteSo(security.security_pkg.GetAct, r.sid_id);
	END LOOP;
	
	FOR r IN (
		SELECT app_sid
		  FROM csr.compliance_options
	) LOOP
		BEGIN
			security.menu_pkg.CreateMenu(
				security.security_pkg.GetAct, 
				security.securableObject_pkg.GetSIDFromPath(security.security_pkg.GetAct, r.app_sid, 'menu/admin'), 
				'csr_compliance_admin', 
				'Compliance admin', 
				'/csr/site/compliance/admin/Menu.acds', 
				21, null, v_dummy_sid
			);
		EXCEPTION
			WHEN security.security_pkg.DUPLICATE_OBJECT_NAME THEN
				NULL;
		END;
	END LOOP;
END;
/
create or replace procedure csr.createIndex(
	in_sql							in	varchar2
) authid current_user
as
	e_name_in_use					exception;
	pragma exception_init(e_name_in_use, -00955);
	e_col_indexed					exception;
	pragma exception_init(e_col_indexed, -01408);
begin
	begin
		dbms_output.put_line(in_sql);
		execute immediate in_sql;
	exception
		when others then
			null;
	end;
end;
/
begin
	csr.createIndex('create index chain.ix_company_prod_prod_type on chain.company_product (app_sid, product_type_id)');
	csr.createIndex('create index chain.ix_company_produ_certification on chain.company_product_certification (app_sid, certification_id)');
	csr.createIndex('create index chain.ix_company_produ_cert_type on chain.company_product_required_cert (app_sid, certification_type_id)');
	csr.createIndex('create index chain.ix_company_tab_default_saved on chain.company_tab (app_sid, default_saved_filter_sid)');
	csr.createIndex('create index chain.ix_company_tab_r_company_type_ on chain.company_tab_related_co_type (app_sid, company_type_id)');
	csr.createIndex('create index chain.ix_dedupe_stagin_staging_tab_s on chain.dedupe_staging_link (app_sid, staging_tab_sid, staging_source_lookup_col_sid)');
	csr.createIndex('create index chain.ix_higg_config_m_score_type_id on chain.higg_config_module (app_sid, score_type_id)');
	csr.createIndex('create index chain.ix_product_heade_plugin_type_i on chain.product_header (plugin_type_id)');
	csr.createIndex('create index chain.ix_product_heade_plugin_id on chain.product_header (plugin_id)');
	csr.createIndex('create index chain.ix_product_heade_product_col_s on chain.product_header (app_sid, product_col_sid)');
	csr.createIndex('create index chain.ix_product_heade_user_company_ on chain.product_header (app_sid, user_company_col_sid)');
	csr.createIndex('create index chain.ix_product_heade_company_type_ on chain.product_header_company_type (app_sid, company_type_id)');
	csr.createIndex('create index chain.ix_product_heade_product_type_ on chain.product_header_product_type (app_sid, product_type_id)');
	csr.createIndex('create index chain.ix_product_metri_agg_rule_type on chain.product_metric_ind (agg_rule_type_id)');
	csr.createIndex('create index chain.ix_product_metri_ind_sid on chain.product_metric_val (app_sid, ind_sid)');
	csr.createIndex('create index chain.ix_product_metri_entered_by_si on chain.product_metric_val (app_sid, entered_by_sid)');
	csr.createIndex('create index chain.ix_product_suppl_purchaser_com on chain.product_supplier (app_sid, purchaser_company_sid, supplier_company_sid)');
	csr.createIndex('create index chain.ix_product_suppl_product_id on chain.product_supplier (app_sid, product_id)');
	csr.createIndex('create index chain.ix_product_suppl_certification on chain.product_supplier_certification (app_sid, certification_id)');
	csr.createIndex('create index chain.ix_product_suppl_entered_by_si on chain.product_supplier_metric_val (app_sid, entered_by_sid)');
	csr.createIndex('create index chain.ix_product_suppl_ind_sid on chain.product_supplier_metric_val (app_sid, ind_sid)');
	csr.createIndex('create index chain.ix_product_tab_user_company_ on chain.product_tab (app_sid, user_company_col_sid)');
	csr.createIndex('create index chain.ix_product_tab_product_col_s on chain.product_tab (app_sid, product_col_sid)');
	csr.createIndex('create index chain.ix_product_tab_plugin_id on chain.product_tab (plugin_id)');
	csr.createIndex('create index chain.ix_product_tab_plugin_type_i on chain.product_tab (plugin_type_id)');
	csr.createIndex('create index chain.ix_product_tab_c_company_type_ on chain.product_tab_company_type (app_sid, company_type_id)');
	csr.createIndex('create index chain.ix_product_tab_p_product_type_ on chain.product_tab_product_type (app_sid, product_type_id)');
	csr.createIndex('create index chain.ix_prod_supp_tab_company_type_ on chain.prod_supp_tab_company_type (app_sid, company_type_id)');
	csr.createIndex('create index chain.ix_prod_supp_tab_product_type_ on chain.prod_supp_tab_product_type (app_sid, product_type_id)');
	csr.createIndex('create index chain.ix_reference_reference_val on chain.reference (reference_validation_id)');
	csr.createIndex('create index csr.ix_compliance_pe_activity_type on csr.compliance_permit (app_sid, activity_type_id, activity_sub_type_id)');
	csr.createIndex('create index csr.ix_intl_audi_lock_tag_group_id on csr.internal_audit_locked_tag (app_sid, tag_group_id)');
end;
/
drop procedure csr.createIndex;
BEGIN
	INSERT INTO csr.source_type (source_type_id, description, helper_pkg, audit_url)
	VALUES (17, 'Approval dashboard', null, null);
END;
/
BEGIN
	INSERT INTO chain.saved_filter_alert_param (CARD_GROUP_ID, FIELD_NAME, DESCRIPTION, TRANSLATABLE, LINK_TEXT)
	VALUES (53, 'BUSINESS_RELATIONSHIP_ID', 'Business relationship ID', 0, NULL);
	
	INSERT INTO chain.saved_filter_alert_param (CARD_GROUP_ID, FIELD_NAME, DESCRIPTION, TRANSLATABLE, LINK_TEXT)
	VALUES (53, 'TYPE_LABEL', 'Business relationship type', 1, NULL);
	
	INSERT INTO chain.saved_filter_alert_param (CARD_GROUP_ID, FIELD_NAME, DESCRIPTION, TRANSLATABLE, LINK_TEXT)
	VALUES (53, 'COMPANIES', 'Companies', 0, NULL);
	
	INSERT INTO chain.saved_filter_alert_param (CARD_GROUP_ID, FIELD_NAME, DESCRIPTION, TRANSLATABLE, LINK_TEXT)
	VALUES (53, 'PERIODS', 'Active dates', 0, NULL);
	
	INSERT INTO chain.saved_filter_alert_param (CARD_GROUP_ID, FIELD_NAME, DESCRIPTION, TRANSLATABLE, LINK_TEXT)
	VALUES (53, 'ACTIVE', 'Active', 1, NULL);
END;
/
DECLARE
	v_card_id	NUMBER(10);
BEGIN
	security.user_pkg.logonadmin;
	DELETE FROM chain.card_group_card 
	 WHERE card_group_id = 52;/*chain.filter_pkg.FILTER_TYPE_ACTIVITIES*/
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Chain.Cards.Filters.ActivityFilter';
	
	-- setup filter card for all sites with chain
	FOR r IN (
		SELECT DISTINCT app_sid
		  FROM chain.customer_options
	) LOOP
		INSERT INTO chain.card_group_card (app_sid, card_group_id, card_id, position)
		     VALUES (r.app_sid, 52 /*chain.filter_pkg.FILTER_TYPE_ACTIVITIES*/, v_card_id, 0);
	END LOOP;
	
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Chain.Cards.Filters.ActivityFilterAdapter';
	 FOR r IN (
		SELECT DISTINCT app_sid
		  FROM chain.customer_options
	) LOOP
		INSERT INTO chain.card_group_card (app_sid, card_group_id, card_id, position)
		     VALUES (r.app_sid, 52 /*chain.filter_pkg.FILTER_TYPE_ACTIVITIES*/, v_card_id, 1);
	END LOOP;
END;
/
INSERT INTO chain.dedupe_field (dedupe_field_id, entity, field, description) VALUES (19, 'COMPANY', 'PURCHASER_COMPANY', 'Purchaser company');
BEGIN
	security.user_pkg.LogonAdmin;
END;
/
DECLARE
	v_card_id         chain.card.card_id%TYPE;
	v_desc            chain.card.description%TYPE;
	v_class           chain.card.class_type%TYPE;
	v_js_path         chain.card.js_include%TYPE;
	v_js_class        chain.card.js_class_type%TYPE;
	v_css_path        chain.card.css_include%TYPE;
	v_actions         chain.T_STRING_LIST;
BEGIN
	
	UPDATE chain.card_group
	   SET list_page_url = '/csr/site/chain/certificationList.acds?savedFilterSid='
	 WHERE card_group_id = 55; /* filter_pkg.FILTER_TYPE_CERTS */
	
	v_desc := 'Certification Company Filter Adapter';
	v_class := 'Credit360.Chain.Cards.Filters.CertificationCompanyFilterAdapter';
	v_js_path := '/csr/site/chain/cards/filters/certificationCompanyFilterAdapter.js';
	v_js_class := 'Chain.Cards.Filters.CertificationCompanyFilterAdapter';
	v_css_path := '';
	
	BEGIN
		INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
		VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
		RETURNING card_id INTO v_card_id;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			UPDATE chain.card
			SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
			WHERE js_class_type = v_js_class
			RETURNING card_id INTO v_card_id;
	END;
	
	DELETE FROM chain.card_progression_action
	 WHERE card_id = v_card_id
	   AND action <> 'default';
	
	v_actions := chain.T_STRING_LIST('default');
	
	FOR i IN v_actions.FIRST .. v_actions.LAST
	LOOP
		BEGIN
			INSERT INTO chain.card_progression_action (card_id, action)
			VALUES (v_card_id, v_actions(i));
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
END;
/
DECLARE
	v_card_id				NUMBER(10);
BEGIN
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Chain.Cards.Filters.CertificationCompanyFilterAdapter';
	
	BEGIN
		INSERT INTO chain.filter_type (filter_type_id,description,helper_pkg,card_id) 
		    VALUES (chain.filter_type_id_seq.NEXTVAL, 'Certification Company Filter Adapter', 'chain.certification_report_pkg', v_card_id);
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;	
	
	FOR r IN (
		SELECT DISTINCT app_sid, NVL(MAX(position) + 1, 1) pos
		   FROM chain.card_group_card
		  WHERE card_group_id = 55 /*chain.filter_pkg.FILTER_TYPE_CERTS*/
		  GROUP BY app_sid
	) LOOP
		BEGIN
			INSERT INTO chain.card_group_card (app_sid, card_group_id, card_id, position, required_permission_set, required_capability_id)
				 VALUES (r.app_sid, 55 /*chain.filter_pkg.FILTER_TYPE_CERTS*/, v_card_id, r.pos, NULL, NULL);
			EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
		END;
	END LOOP;
END;
/
BEGIN
	INSERT INTO chain.aggregate_type (card_group_id, aggregate_type_id, description)
	VALUES (55 /*chain.filter_pkg.FILTER_TYPE_CERTS*/, 1 /*chain.business_rel_report_pkg.AGG_TYPE_COUNT*/, 'Number of certifications');
EXCEPTION
	WHEN dup_val_on_index THEN
		NULL;
END;
/
INSERT INTO csr.flow_alert_class (flow_alert_class, label, helper_pkg) VALUES ('permit', 'Permit', 'csr.permit_pkg');
INSERT INTO csr.flow_alert_class (flow_alert_class, label, helper_pkg) VALUES ('application', 'Application', 'csr.permit_pkg');
INSERT INTO csr.flow_state_nature (flow_state_nature_id, flow_alert_class, label) VALUES (17, 'permit', 'Not created');
INSERT INTO csr.flow_state_nature (flow_state_nature_id, flow_alert_class, label) VALUES (18, 'permit', 'Application');
INSERT INTO csr.flow_state_nature (flow_state_nature_id, flow_alert_class, label) VALUES (19, 'permit', 'Active');
INSERT INTO csr.flow_state_nature (flow_state_nature_id, flow_alert_class, label) VALUES (20, 'permit', 'Surrendered');
INSERT INTO csr.flow_state_nature (FLOW_STATE_NATURE_ID, FLOW_ALERT_CLASS, LABEL) VALUES (21, 'application', 'Not created');
INSERT INTO csr.flow_state_nature (FLOW_STATE_NATURE_ID, FLOW_ALERT_CLASS, LABEL) VALUES (22, 'application', 'Pre-application');
INSERT INTO csr.flow_state_nature (FLOW_STATE_NATURE_ID, FLOW_ALERT_CLASS, LABEL) VALUES (23, 'application', 'Initial checks');
INSERT INTO csr.flow_state_nature (FLOW_STATE_NATURE_ID, FLOW_ALERT_CLASS, LABEL) VALUES (24, 'application', 'Determination');
INSERT INTO csr.flow_state_nature (FLOW_STATE_NATURE_ID, FLOW_ALERT_CLASS, LABEL) VALUES (25, 'application', 'Determined');
INSERT INTO csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
VALUES (csr.plugin_id_seq.nextval, 10, 'Product list (Company)', '/csr/site/chain/manageCompany/controls/ProductListTab.js', 'Chain.ManageCompany.ProductListTab', 'Credit360.Chain.Plugins.ProductListDto', 'This tab shows the product list for a company.');
INSERT INTO csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
VALUES (csr.plugin_id_seq.nextval, 10, 'Product list (Supplier)', '/csr/site/chain/manageCompany/controls/ProductListSupplierTab.js', 'Chain.ManageCompany.ProductListSupplierTab', 'Credit360.Chain.Plugins.ProductListDto', 'This tab shows the product list for a supplier.');
DECLARE
  v_card_id NUMBER;
BEGIN
  -- Remove previous incarnation of a product filter. Only used by bdchain.credit360.com.
  SELECT card_id 
    INTO v_card_id
    FROM CHAIN.FILTER_TYPE
   WHERE description = 'Chain Company Product Filter';
  DELETE FROM chain.filter_type WHERE card_id = v_card_id;
  DELETE FROM chain.card_progression_action WHERE card_id = v_card_id;
  DELETE FROM chain.card_group_card WHERE card_id = v_card_id;
  DELETE FROM chain.card WHERE card_id = v_card_id;
END;
/
UPDATE chain.card
   SET js_class_type = 'Chain.Cards.Filters.ProductFilter'
 WHERE js_class_type = 'Credit360.Chain.Filters.ProductFilter';
DECLARE
	v_card_id         chain.card.card_id%TYPE;
	v_desc            chain.card.description%TYPE;
	v_class           chain.card.class_type%TYPE;
	v_js_path         chain.card.js_include%TYPE;
	v_js_class        chain.card.js_class_type%TYPE;
	v_css_path        chain.card.css_include%TYPE;
	v_actions         chain.T_STRING_LIST;
BEGIN
	v_desc := 'Product Filter Adapter';
	v_class := 'Credit360.Chain.Cards.Filters.ProductFilterAdapter';
	v_js_path := '/csr/site/chain/cards/filters/productFilterAdapter.js';
	v_js_class := 'Chain.Cards.Filters.ProductFilterAdapter';
	v_css_path := '';
	
	BEGIN
		INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
		VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
		RETURNING card_id INTO v_card_id;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			UPDATE chain.card
			SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
			WHERE js_class_type = v_js_class
			RETURNING card_id INTO v_card_id;
	END;
	
	DELETE FROM chain.card_progression_action
	 WHERE card_id = v_card_id
	   AND action NOT IN ('default');
	
	v_actions := chain.T_STRING_LIST('default');
	
	FOR i IN v_actions.FIRST .. v_actions.LAST
	LOOP
		BEGIN
			INSERT INTO chain.card_progression_action (card_id, action)
			VALUES (v_card_id, v_actions(i));
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
END;
/
DECLARE
	v_card_id         chain.card.card_id%TYPE;
	v_desc            chain.card.description%TYPE;
	v_class           chain.card.class_type%TYPE;
	v_js_path         chain.card.js_include%TYPE;
	v_js_class        chain.card.js_class_type%TYPE;
	v_css_path        chain.card.css_include%TYPE;
	v_actions         chain.T_STRING_LIST;
BEGIN
	v_desc := 'Company Product Filter Adapter';
	v_class := 'Credit360.Chain.Cards.Filters.CompanyProductFilterAdapter';
	v_js_path := '/csr/site/chain/cards/filters/companyProductFilterAdapter.js';
	v_js_class := 'Chain.Cards.Filters.CompanyProductFilterAdapter';
	v_css_path := '';
	
	BEGIN
		INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
		VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
		RETURNING card_id INTO v_card_id;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			UPDATE chain.card
			SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
			WHERE js_class_type = v_js_class
			RETURNING card_id INTO v_card_id;
	END;
	
	DELETE FROM chain.card_progression_action
	 WHERE card_id = v_card_id
	   AND action NOT IN ('default');
	
	v_actions := chain.T_STRING_LIST('default');
	
	FOR i IN v_actions.FIRST .. v_actions.LAST
	LOOP
		BEGIN
			INSERT INTO chain.card_progression_action (card_id, action)
			VALUES (v_card_id, v_actions(i));
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
END;
/
DECLARE
	v_card_id						NUMBER(10);
	v_products_capability_id		NUMBER(10);
BEGIN
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Chain.Cards.Filters.CompanyProductFilterAdapter';
	SELECT capability_id
	  INTO v_products_capability_id
	  FROM chain.capability 
	 WHERE capability_name = 'Products' AND capability_type_id = 1;
	 
	BEGIN	
		INSERT INTO chain.filter_type (filter_type_id,description,helper_pkg,card_id) 
		    VALUES (chain.filter_type_id_seq.NEXTVAL, 'Company Product Filter Adapter', 'chain.company_filter_pkg', v_card_id);
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
	FOR r IN (
		SELECT DISTINCT cgc.app_sid, NVL(MAX(cgc.position) + 1, 1) pos
		  FROM chain.card_group_card cgc
		  JOIN chain.customer_options co ON co.app_sid = cgc.app_sid
		 WHERE cgc.card_group_id = 23 /*chain.filter_pkg.FILTER_TYPE_COMPANIES*/
		   AND co.enable_product_compliance = 1
		 GROUP BY cgc.app_sid
	) LOOP
		BEGIN
			INSERT INTO chain.card_group_card (app_sid, card_group_id, card_id, position)
				 VALUES (r.app_sid, 23 /*chain.filter_pkg.FILTER_TYPE_COMPANIES*/, v_card_id, r.pos);
			EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
		END;
	END LOOP;
END;
/
 
DECLARE
	v_card_id         chain.card.card_id%TYPE;
	v_desc            chain.card.description%TYPE;
	v_class           chain.card.class_type%TYPE;
	v_js_path         chain.card.js_include%TYPE;
	v_js_class        chain.card.js_class_type%TYPE;
	v_css_path        chain.card.css_include%TYPE;
	v_actions         chain.T_STRING_LIST;
BEGIN
	v_desc := 'Compliance Permit Filter';
	v_class := 'Credit360.Compliance.Cards.PermitFilter';
	v_js_path := '/csr/site/compliance/filters/PermitFilter.js';
	v_js_class := 'Credit360.Compliance.Filters.PermitFilter';
	v_css_path := '';
	
	BEGIN
		INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
			 VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
		  RETURNING card_id INTO v_card_id;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			UPDATE chain.card
			   SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
		  	 WHERE js_class_type = v_js_class
		 RETURNING card_id INTO v_card_id;
	END;
	
	DELETE FROM chain.card_progression_action
		  WHERE card_id = v_card_id
		    AND action NOT IN ('default');
	
	v_actions := chain.T_STRING_LIST('default');
	
	FOR i IN v_actions.FIRST .. v_actions.LAST
	LOOP
		BEGIN
			INSERT INTO chain.card_progression_action (card_id, action)
				 VALUES (v_card_id, v_actions(i));
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
END;
/
DECLARE
	v_card_id	NUMBER(10);
BEGIN
	security.user_pkg.LogonAdmin;
	BEGIN
		INSERT INTO chain.card_group(card_group_id, name, description, helper_pkg, list_page_url)
			 VALUES (58, 'Compliance Permit Filter', 'Allows filtering of permit items', 'csr.permit_report_pkg', '/csr/site/compliance/PermitList.acds?savedFilterSid=');
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL;
	END;
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Credit360.Compliance.Filters.PermitFilter';
	
	BEGIN	
		INSERT INTO chain.filter_type (filter_type_id,description,helper_pkg,card_id) 
			 VALUES (chain.filter_type_id_seq.NEXTVAL, 'Compliance Permit Filter', 'csr.permit_report_pkg', v_card_id);
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
END;
/
BEGIN
	INSERT INTO chain.aggregate_type (card_group_id, aggregate_type_id, description)
		 VALUES (58, 1, 'Number of permits');
	
	INSERT INTO chain.card_group_column_type (card_group_id, column_id, column_type, description)
		 VALUES (58, 1, 1, 'Permit item region');
END;
/
GRANT CREATE TABLE TO csr;
/* COMPLIANCE PERMIT TITLE INDEX */
create index csr.ix_cp_title_search on csr.compliance_permit(title) indextype is ctxsys.context
parameters('datastore ctxsys.default_datastore stoplist ctxsys.empty_stoplist');
/* COMPLIANCE PERMIT REFERENCE INDEX */
create index csr.ix_cp_reference_search on csr.compliance_permit(permit_reference) indextype is ctxsys.context
parameters('datastore ctxsys.default_datastore stoplist ctxsys.empty_stoplist');
/* COMPLIANCE PERMIT DETAILS INDEX */
create index csr.ix_cp_details_search on csr.compliance_permit(details) indextype is ctxsys.context
parameters('datastore ctxsys.default_datastore stoplist ctxsys.empty_stoplist');
REVOKE CREATE TABLE FROM csr;
DECLARE
	job 	BINARY_INTEGER;
BEGIN
	-- now and every minute afterwards
	-- 10g w/low_priority_job created
	DBMS_SCHEDULER.CREATE_JOB (
		job_name			=> 'csr.compliance_permit_item_text',
		job_type			=> 'PLSQL_BLOCK',
		job_action			=> 'ctx_ddl.sync_index(''ix_cp_title_search'');
								ctx_ddl.sync_index(''ix_cp_reference_search'');
								ctx_ddl.sync_index(''ix_cp_details_search'');',
		job_class			=> 'low_priority_job',
		start_date			=> to_timestamp_tz('2009/01/01 01:00 +00:00','YYYY/MM/DD HH24:MI TZH:TZM'),
		repeat_interval		=> 'FREQ=MINUTELY',
		enabled				=> TRUE,
		auto_drop			=> FALSE,
		comments			=> 'Synchronise compliance permit item text indexes');
		COMMIT;
END;
/
DECLARE
	job 	BINARY_INTEGER;
BEGIN
	DBMS_SCHEDULER.SET_ATTRIBUTE (
		name			=> 'csr.optimize_all_indexes',
		attribute		=> 'job_action',
		value			=> 'ctx_ddl.optimize_index(''ix_doc_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_doc_desc_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_file_upload_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_sh_val_note_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_help_body_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_qs_response_file_srch'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_qs_ans_ans_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_issue_log_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_issue_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_issue_desc_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_audit_label_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_audit_notes_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_non_comp_label_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_non_comp_detail_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_non_comp_rt_cse_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_section_body_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_section_title_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_ci_title_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_ci_summary_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_ci_details_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_ci_ref_code_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_ci_usr_comment_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_ci_citation_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_cp_title_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_cp_reference_search'', ctx_ddl.OPTLEVEL_FULL);
							ctx_ddl.optimize_index(''ix_cp_details_search'', ctx_ddl.OPTLEVEL_FULL);'
		);
		COMMIT;
END;
/
INSERT INTO csr.plugin_type (plugin_type_id, description) VALUES (21, 'Permit tab');
INSERT INTO csr.plugin (plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details)
VALUES (
	csr.plugin_id_seq.NEXTVAL, 21, 
	'Permit details tab', 
	'/csr/site/compliance/controls/PermitDetailsTab.js', 
	'Credit360.Compliance.Controls.PermitDetailsTab', 
	'Credit360.Compliance.Plugins.PermitDetailsTab', 
	'Shows basic permit details'
);


@@../user_report_body


grant execute on chain.product_report_pkg to csr;
grant execute on chain.product_report_pkg to web_user;
CREATE OR REPLACE PACKAGE csr.permit_report_pkg AS
    PROCEDURE dummy;
END;
/
CREATE OR REPLACE PACKAGE BODY csr.permit_report_pkg AS
    PROCEDURE dummy
    AS
    BEGIN
        NULL;
    END;
END;
/
GRANT EXECUTE ON csr.permit_report_pkg TO web_user;
GRANT EXECUTE ON csr.permit_report_pkg TO chain;


@..\chain\filter_pkg
@..\section_root_pkg
@..\csr_data_pkg
@..\chain\chain_pkg
@..\chain\certification_pkg
@..\chain\certification_report_pkg
@..\chain\company_product_pkg
@..\chain\plugin_pkg
@..\chain\product_report_pkg
@..\chain\product_type_pkg
drop package aspen2.aspenredirect_pkg;
@@..\enable_pkg
@..\chain\company_score_pkg
@..\chain\company_pkg
@..\schema_pkg
@..\compliance_pkg
@..\chain\helper_pkg
@@..\schema_pkg
@@..\compliance_pkg
@..\approval_dashboard_pkg
@..\chain\business_rel_report_pkg
@..\region_pkg
@..\deleg_plan_pkg
CREATE OR REPLACE PACKAGE csr.permit_pkg AS
    PROCEDURE dummy;
END;
/

CREATE OR REPLACE PACKAGE BODY csr.permit_pkg AS
AS
BEGIN
	NULL;
END;
/

GRANT EXECUTE ON csr.permit_pkg TO web_user;

@..\compliance_setup_pkg
@@..\permit_pkg
@..\chain\company_filter_pkg
@..\chain\setup_pkg
@..\property_pkg
@..\chain\activity_pkg
@@..\chain\filter_pkg
@@..\permit_report_pkg
@@..\csr_data_pkg
@ ..\schema_pkg
@ ..\chain\dedupe_admin_pkg
@ ..\chain\company_pkg
@..\compliance_pkg

@..\folderlib_body
@..\..\..\aspen2\cms\db\export_body
@..\..\..\aspen2\cms\db\tab_body
@..\..\..\aspen2\cms\db\testdata_body
@..\chain\activity_body
@..\chain\activity_report_body
@..\chain\bsci_body
@..\chain\company_dedupe_body
@..\chain\filter_body
@..\chain\higg_setup_body
@..\csrimp\imp_body
@..\delegation_body
@..\deleg_plan_body
@..\doc_body
@..\doc_folder_body
@..\enable_body
@..\flow_report_body
@..\indicator_body
@..\quick_survey_body
@..\region_body
@..\region_report_body
@..\section_root_body
@..\testdata_body
@..\trash_body
@..\user_report_body
@..\util_script_body
@..\chain\chain_body
@..\chain\certification_body
@..\chain\certification_report_body
@..\chain\company_filter_body
@..\chain\company_product_body
@..\chain\plugin_body
@..\chain\product_report_body
@..\chain\product_type_body
@..\schema_body
@..\factor_body
@@..\enable_body
@@..\user_report_body
@..\chain\company_score_body
@..\chain\company_body
@..\csr_app_body
@..\compliance_body
@..\compliance_library_report_body
@..\compliance_register_report_body
@..\chain\helper_body
@@..\schema_body
@@..\compliance_body
@@..\csrimp\imp_body
@..\approval_dashboard_body
@..\chain\business_rel_report_body
@..\chain\setup_body
@..\property_body
@..\region_tree_body
@..\supplier_body
@..\tag_body
@..\energy_star_job_body
@..\meter_body
@@..\compliance_setup_body
@@..\permit_body
@..\chain\card_body
@@..\delegation_body
@@..\csr_user_body
@@..\permit_report_body
@@..\csr_app_body
@@..\role_body
@ ..\schema_body
@ ..\csrimp\imp_body
@ ..\chain\dedupe_admin_body
@ ..\chain\company_dedupe_body
@ ..\chain\dedupe_preprocess_body
@ ..\chain\chain_body
@ ..\chain\company_body
@ ..\..\..\aspen2\cms\db\tab_body
@..\actions\initiative_reporting_body



@update_tail
