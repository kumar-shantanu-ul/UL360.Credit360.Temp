-- Please update version.sql too -- this keeps clean builds in sync
define version=64
@update_header

VARIABLE version NUMBER
BEGIN :version := 64; END; -- CHANGE THIS TO MATCH VERSION NUMBER
/

WHENEVER SQLERROR EXIT SQL.SQLCODE
DECLARE
	v_version	version.db_version%TYPE;
BEGIN
	SELECT db_version INTO v_version FROM version;
	IF v_version >= :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' HAS ALREADY BEEN APPLIED =======');
	END IF;
END;
/	


WHENEVER SQLERROR CONTINUE



CREATE OR REPLACE TYPE T_SPLIT_NUMERIC_ROW AS 
  OBJECT ( 
	ITEM		NUMBER(10),
	POS		NUMBER(10)
  );
/
CREATE OR REPLACE TYPE T_SPLIT_NUMERIC_TABLE AS 
  TABLE OF T_SPLIT_NUMERIC_ROW;
/


CREATE OR REPLACE TYPE T_DATASOURCE_DEP_ROW AS 
  OBJECT ( 
	CALC_IND_SID    NUMBER(10, 0),
	CALC_DEP_TYPE	NUMBER(10, 0),
	IND_SID         NUMBER(10, 0),
	IND_TYPE		NUMBER(10, 0),
	MAX_LVL         NUMBER(10, 0)
  );
/
CREATE OR REPLACE TYPE T_DATASOURCE_DEP_TABLE AS 
  TABLE OF T_DATASOURCE_DEP_ROW;
/


CREATE OR REPLACE TYPE security.T_SID_TABLE AS TABLE OF NUMBER(10);
/



CREATE OR REPLACE TYPE T_SID_AND_DESCRIPTION_ROW AS 
  OBJECT ( 
	pos			NUMBER(10,0),
	sid_id 			NUMBER(10,0),
	DESCRIPTION		VARCHAR2(255)
  );
/
CREATE OR REPLACE TYPE T_SID_AND_DESCRIPTION_TABLE AS 
  TABLE OF T_SID_AND_DESCRIPTION_ROW;
/

CREATE OR REPLACE TYPE T_PENDING_MERGE_BLOCKER_ROW AS 
  OBJECT ( 
  	PENDING_REGION_ID			NUMBER(10),
  	PENDING_REGION_PATH			VARCHAR2(2000),
  	PENDING_IND_ID				NUMBER(10),
  	PENDING_IND_DESCRIPTION		VARCHAR2(255),
	REGION_SID					NUMBER(10),
  	REGION_PATH					VARCHAR2(2000),  	
  	BLOCKER_PENDING_REGION_ID	NUMBER(10),
  	BLOCKER_PENDING_REGION_PATH	VARCHAR2(2000),
  	BLOCKER_REGION_SID			NUMBER(10),
  	BLOCKER_REGION_PATH			VARCHAR2(2000)
  );
/
CREATE OR REPLACE TYPE T_PENDING_MERGE_BLOCKER_TABLE AS 
  TABLE OF T_PENDING_MERGE_BLOCKER_ROW;
/

CREATE OR REPLACE TYPE T_PENDING_LEAF_ROW AS 
  OBJECT ( 
	PENDING_IND_ID				NUMBER(10),
  	IND_DESCRIPTION				VARCHAR2(255),
	PENDING_REGION_ID			NUMBER(10),
	REGION_DESCRIPTION			VARCHAR2(255),
	ROOT_REGION_ID				NUMBER(10),
	ROOT_REGION_DESCRIPTION		VARCHAR2(255),
	APPROVAL_STEP_ID			NUMBER(10),
	MAPS_TO_IND_SID				NUMBER(10),
	MAPS_TO_REGION_SID			NUMBER(10)
  );
/
CREATE OR REPLACE TYPE T_PENDING_LEAF_TABLE AS 
  TABLE OF T_PENDING_LEAF_ROW;
/





UPDATE version SET db_version = :version;
COMMIT;
PROMPT
PROMPT ================== UPDATED OK ========================
PROMPT
EXIT

@update_tail
