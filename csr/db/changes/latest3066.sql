define version=3066
define minor_version=0
define is_combined=1
@update_header

-- clean out junk in csrimp
begin
for r in (select table_name from all_tables where owner='CSRIMP' and table_name!='CSRIMP_SESSION') loop
execute immediate 'truncate table csrimp.'||r.table_name;
end loop;
delete from csrimp.csrimp_session;
commit;
end;
/

-- delete some duff rubbish
delete from csr.quick_survey_answer
where survey_response_id = 4116
and app_sid = 12514310;

delete from csr.quick_survey_answer
where survey_response_id = 4121
and app_sid = 12514310;

delete from csr.quick_survey_answer
where survey_response_id = 4131
and app_sid = 12514310;

delete from csr.qs_answer_log
where survey_response_id = 40005
and app_sid = 16349862;

delete from csr.quick_survey_answer
where survey_response_id = 40005
and app_sid = 16349862;
-- end 

CREATE TABLE CSR.QUESTION(
	APP_SID					NUMBER(10, 0)	 DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	OWNED_BY_SURVEY_SID		NUMBER(10, 0)	 NULL,
	QUESTION_TYPE			VARCHAR2(20)	 NOT NULL,
	CUSTOM_QUESTION_TYPE_ID	NUMBER(10, 0),
	LOOKUP_KEY				VARCHAR2(255),
	MAPS_TO_IND_SID			NUMBER(10, 0),
	MEASURE_SID				NUMBER(10, 0),
	CONSTRAINT PK_QUESTION PRIMARY KEY (APP_SID, QUESTION_ID),
	CONSTRAINT CONS_QUESTION_MEASURE UNIQUE (APP_SID, QUESTION_ID, MEASURE_SID),
	CONSTRAINT CHK_Q_CUSTOM_QUESTION_ID CHECK ((QUESTION_TYPE!='custom' AND CUSTOM_QUESTION_TYPE_ID IS NULL) OR (QUESTION_TYPE='custom' AND CUSTOM_QUESTION_TYPE_ID IS NOT NULL)),
	CONSTRAINT FK_QUESTION_QUICK_SURVEY FOREIGN KEY (APP_SID, OWNED_BY_SURVEY_SID) REFERENCES CSR.QUICK_SURVEY(APP_SID, SURVEY_SID)
)
;
ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_QUESTION_IND
    FOREIGN KEY (APP_SID, MAPS_TO_IND_SID, MEASURE_SID)
    REFERENCES CSR.IND(APP_SID, IND_SID, MEASURE_SID)
;
ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_QUESTION_CUSTOMER
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;
ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_Q_CUST_QUEST_TYPE
    FOREIGN KEY (APP_SID, CUSTOM_QUESTION_TYPE_ID)
    REFERENCES CSR.QS_CUSTOM_QUESTION_TYPE(APP_SID, CUSTOM_QUESTION_TYPE_ID)
;
CREATE TABLE CSR.QUESTION_VERSION(
	APP_SID					NUMBER(10, 0)	 DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION		NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT			NUMBER(1)		 DEFAULT 1 NOT NULL,
	PARENT_ID				NUMBER(10, 0),
	PARENT_VERSION			NUMBER(10, 0),
	PARENT_DRAFT			NUMBER(10, 0),
	POS						NUMBER(10, 0),
	LABEL					VARCHAR2(4000),
	SCORE					NUMBER(13, 3),
	MAX_SCORE				NUMBER(10, 0),
	UPLOAD_SCORE			NUMBER(10, 0),
	WEIGHT					NUMBER(15, 5)	 DEFAULT 1 NOT NULL,
	DONT_NORMALISE_SCORE	NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	HAS_SCORE_EXPRESSION	NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	HAS_MAX_SCORE_EXPR		NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	REMEMBER_ANSWER			NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	COUNT_QUESTION			NUMBER(1, 0)	 DEFAULT 0 NOT NULL,
	ACTION					VARCHAR2(50),
	CONSTRAINT CHK_QV_DNT_NORM_SC_0_1 CHECK (DONT_NORMALISE_SCORE IN (0,1)),
	CONSTRAINT CHK_QV_HAS_SC_EXPR_0_1 CHECK (HAS_SCORE_EXPRESSION IN (0,1)),
	CONSTRAINT CHK_QV_MAX_SC_EXPR_0_1 CHECK (HAS_MAX_SCORE_EXPR IN (0,1)),
	CONSTRAINT CHK_QV_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_VERSION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
	CONSTRAINT FK_QUESTION_VERSION_QUESTION FOREIGN KEY (APP_SID, QUESTION_ID) REFERENCES CSR.QUESTION(APP_SID, QUESTION_ID),
	CONSTRAINT FK_QUESTION_VERSION_PARENT FOREIGN KEY (APP_SID, PARENT_ID) REFERENCES CSR.QUESTION(APP_SID, QUESTION_ID)
)
;
ALTER TABLE CSR.QUESTION_VERSION ADD CONSTRAINT FK_QV_CUSTOMER
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;
CREATE TABLE CSR.QUESTION_OPTION(
	APP_SID						NUMBER(10, 0)	 DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	QUESTION_OPTION_ID			NUMBER(10, 0)	 NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		 NOT NULL,
	POS							NUMBER(10, 0)	 DEFAULT 0 NOT NULL,
	LABEL						VARCHAR2(4000)	 NOT NULL,
    SCORE						NUMBER(13, 3),
	COLOR						NUMBER(10, 0),
	LOOKUP_KEY					VARCHAR2(1000),
	MAPS_TO_IND_SID				NUMBER(10, 0),
	OPTION_ACTION				VARCHAR2(50),
	NON_COMPLIANCE_POPUP		NUMBER(1, 0),
	NON_COMP_DEFAULT_ID			NUMBER(10, 0),
	NON_COMPLIANCE_TYPE_ID		NUMBER(10, 0),
	NON_COMPLIANCE_LABEL		VARCHAR2(255),
	NON_COMPLIANCE_DETAIL		VARCHAR2(4000),
	NON_COMP_ROOT_CAUSE			VARCHAR2(4000),
	NON_COMP_SUGGESTED_ACTION	VARCHAR2(4000),
	CONSTRAINT CHK_QO_NON_COMP_POPUP_0_1 CHECK (NON_COMPLIANCE_POPUP IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION PRIMARY KEY (APP_SID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
)
;
CREATE TABLE CSR.QUESTION_OPTION_NC_TAG(
    APP_SID               NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    QUESTION_ID           NUMBER(10, 0)    NOT NULL,
    QUESTION_OPTION_ID    NUMBER(10, 0)    NOT NULL,
    QUESTION_VERSION      NUMBER(10, 0)    NOT NULL,
    QUESTION_DRAFT        NUMBER(1)        NOT NULL,
    TAG_ID                NUMBER(10, 0)    NOT NULL,
	CONSTRAINT CHK_QONT_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION_NC_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_OPTION_ID, QUESTION_VERSION, QUESTION_DRAFT, TAG_ID)
)
;
ALTER TABLE CSR.QUESTION_OPTION_NC_TAG ADD CONSTRAINT FK_Q_OPT_TAG_OPTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
    REFERENCES CSR.QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
;
CREATE TABLE CSR.QUESTION_TYPE(
    QUESTION_TYPE    VARCHAR2(20)     NOT NULL,
    LABEL            VARCHAR2(255)    NOT NULL,
    ANSWER_TYPE      VARCHAR2(10),
    CONSTRAINT CK_QUES_TYPE_ANS_TYPE CHECK (ANSWER_TYPE IN ('val','option')),
    CONSTRAINT PK_QUESTION_TYPE PRIMARY KEY (QUESTION_TYPE)
)
;
INSERT INTO csr.question_type (question_type, label, answer_type)
SELECT question_type, label, answer_type
  FROM csr.qs_question_type;
ALTER TABLE CSR.QUESTION ADD CONSTRAINT FK_QV_QUESTION_TYPE
    FOREIGN KEY (QUESTION_TYPE)
    REFERENCES CSR.QUESTION_TYPE(QUESTION_TYPE)
;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT RefQS_QUESTION_TYPE2196;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QSQ_QUESTION_TYPE
    FOREIGN KEY (QUESTION_TYPE)
    REFERENCES CSR.QUESTION_TYPE(QUESTION_TYPE)
;
DROP TABLE CSR.QS_QUESTION_TYPE;
CREATE TABLE CSR.QUESTION_TAG(
    APP_SID				NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
    QUESTION_ID			NUMBER(10, 0)	NOT NULL,
    QUESTION_VERSION	NUMBER(10, 0)	NOT NULL,
    TAG_ID				NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT		NUMBER(1)		DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_QT_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0),
    CONSTRAINT PK_QUESTION_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, TAG_ID)
)
;
INSERT INTO csr.question (
	app_sid, question_id, question_type, lookup_key, maps_to_ind_sid,
	measure_sid, owned_by_survey_sid, custom_question_type_id
)
SELECT qsq.app_sid, qsq.question_id, qsq.question_type, qsq.lookup_key, qsq.maps_to_ind_sid,
	   qsq.measure_sid, qsq.survey_sid, qsq.custom_question_type_id
  FROM csr.quick_survey_question qsq
  JOIN (
		SELECT app_sid, question_id, CASE survey_version WHEN 9999999999 THEN 0 ELSE survey_version END survey_version
		  FROM (
			SELECT app_sid, question_id, MAX(CASE survey_version WHEN 0 THEN 9999999999 ELSE survey_version END) survey_version
			  FROM csr.quick_survey_question
			 GROUP BY app_sid, question_id
		  )
     ) t ON t.app_sid = qsq.app_sid
	    AND t.question_id = qsq.question_id
		AND t.survey_version = qsq.survey_version;
INSERT INTO csr.question_version (
	app_sid, question_id, question_draft, question_version,	parent_id, parent_draft, parent_version, pos,
	score, max_score, upload_score,
	weight, dont_normalise_score, has_score_expression, has_max_score_expr,
	remember_answer, count_question, label, action
)
SELECT 	app_sid, question_id, 0, survey_version, parent_id, 0, survey_version, pos,
	score, max_score, upload_score,
	weight, dont_normalise_score, has_score_expression, has_max_score_expr,
	remember_answer, count_question, label, action
  FROM csr.quick_survey_question
  ORDER BY question_id ASC;
INSERT INTO csr.question_option (
	app_sid, question_option_id, question_id, pos, label, question_draft, question_version, score,
	color, lookup_key, maps_to_ind_sid, option_action, non_compliance_popup, non_comp_default_id,
	non_compliance_type_id, non_compliance_label, non_compliance_detail, non_comp_root_cause, non_comp_suggested_action
)
SELECT app_sid, question_option_id, question_id, pos, label, 0, survey_version, score,
	color, lookup_key, maps_to_ind_sid, option_action, non_compliance_popup, non_comp_default_id,
	non_compliance_type_id, non_compliance_label, non_compliance_detail, non_comp_root_cause, non_comp_suggested_action
  FROM csr.qs_question_option;
  
INSERT INTO csr.question_option_nc_tag (
	app_sid, question_id, question_option_id, question_version, question_draft, tag_id
)
SELECT app_sid, question_id, question_option_id, survey_version, 0, tag_id
  FROM csr.qs_question_option_nc_tag;
INSERT INTO csr.question_tag (app_sid, question_id, question_version, tag_id, question_draft)
SELECT app_sid, question_id, survey_version, tag_id, 0
  FROM csr.quick_survey_question_tag;
ALTER TABLE CSR.QUESTION_TAG ADD CONSTRAINT FK_QUESTION_TAG_QUESTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
    REFERENCES CSR.QUESTION_VERSION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;
CREATE OR REPLACE PACKAGE CSR.quick_survey_pkg AS
END quick_survey_pkg;
/
CREATE TABLE CSRIMP.QUESTION(
	CSRIMP_SESSION_ID		NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	OWNED_BY_SURVEY_SID		NUMBER(10, 0)	 NULL,
	QUESTION_TYPE			VARCHAR2(20)	 NOT NULL,
	CUSTOM_QUESTION_TYPE_ID	NUMBER(10, 0),
	LOOKUP_KEY				VARCHAR2(255),
	MAPS_TO_IND_SID			NUMBER(10, 0),
	MEASURE_SID				NUMBER(10, 0),
	CONSTRAINT PK_QUESTION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID),
	CONSTRAINT CONS_QUESTION_MEASURE UNIQUE (CSRIMP_SESSION_ID, QUESTION_ID, MEASURE_SID),
	CONSTRAINT CHK_Q_CUSTOM_QUESTION_ID CHECK ((QUESTION_TYPE!='custom' AND CUSTOM_QUESTION_TYPE_ID IS NULL) OR (QUESTION_TYPE='custom' AND CUSTOM_QUESTION_TYPE_ID IS NOT NULL)),
    CONSTRAINT FK_QUESTION_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;
CREATE TABLE CSRIMP.QUESTION_VERSION(
	CSRIMP_SESSION_ID		NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	QUESTION_ID				NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION		NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT			NUMBER(1)		 NOT NULL,
	PARENT_ID				NUMBER(10, 0),
	PARENT_VERSION			NUMBER(10, 0),
	PARENT_DRAFT			NUMBER(10, 0),
	POS						NUMBER(10, 0),
	LABEL					VARCHAR2(4000),
	SCORE					NUMBER(13, 3),
	MAX_SCORE				NUMBER(10, 0),
	UPLOAD_SCORE			NUMBER(10, 0),
	WEIGHT					NUMBER(15, 5)	 NOT NULL,
	DONT_NORMALISE_SCORE	NUMBER(1, 0)	 NOT NULL,
	HAS_SCORE_EXPRESSION	NUMBER(1, 0)	 NOT NULL,
	HAS_MAX_SCORE_EXPR		NUMBER(1, 0)	 NOT NULL,
	REMEMBER_ANSWER			NUMBER(1, 0)	 NOT NULL,
	COUNT_QUESTION			NUMBER(1, 0)	 NOT NULL,
	ACTION					VARCHAR2(50),
	CONSTRAINT CHK_QV_DNT_NORM_SC_0_1 CHECK (DONT_NORMALISE_SCORE IN (0,1)),
	CONSTRAINT CHK_QV_HAS_SC_EXPR_0_1 CHECK (HAS_SCORE_EXPRESSION IN (0,1)),
	CONSTRAINT CHK_QV_MAX_SC_EXPR_0_1 CHECK (HAS_MAX_SCORE_EXPR IN (0,1)),
	CONSTRAINT CHK_QV_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_VERSION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
    CONSTRAINT FK_QUESTION_VER_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;
CREATE TABLE CSRIMP.QUESTION_OPTION(
	CSRIMP_SESSION_ID			NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	QUESTION_OPTION_ID			NUMBER(10, 0)	 NOT NULL,
	QUESTION_ID					NUMBER(10, 0)	 NOT NULL,
	QUESTION_VERSION			NUMBER(10, 0)	 NOT NULL,
	QUESTION_DRAFT				NUMBER(1)		 NOT NULL,
	POS							NUMBER(10, 0)	 NOT NULL,
	LABEL						VARCHAR2(4000)	 NOT NULL,
    SCORE						NUMBER(13, 3),
	COLOR						NUMBER(10, 0),
	LOOKUP_KEY					VARCHAR2(1000),
	MAPS_TO_IND_SID				NUMBER(10, 0),
	OPTION_ACTION				VARCHAR2(50),
	NON_COMPLIANCE_POPUP		NUMBER(1, 0),
	NON_COMP_DEFAULT_ID			NUMBER(10, 0),
	NON_COMPLIANCE_TYPE_ID		NUMBER(10, 0),
	NON_COMPLIANCE_LABEL		VARCHAR2(255),
	NON_COMPLIANCE_DETAIL		VARCHAR2(4000),
	NON_COMP_ROOT_CAUSE			VARCHAR2(4000),
	NON_COMP_SUGGESTED_ACTION	VARCHAR2(4000),
	CONSTRAINT CHK_QO_NON_COMP_POPUP_0_1 CHECK (NON_COMPLIANCE_POPUP IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_OPTION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT),
    CONSTRAINT FK_QUESTION_OPT_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;
CREATE TABLE CSRIMP.QUESTION_OPTION_NC_TAG(
	CSRIMP_SESSION_ID	  NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    QUESTION_ID           NUMBER(10, 0)    NOT NULL,
    QUESTION_OPTION_ID    NUMBER(10, 0)    NOT NULL,
    QUESTION_VERSION      NUMBER(10, 0)    NOT NULL,
    QUESTION_DRAFT        NUMBER(1)        NOT NULL,
    TAG_ID                NUMBER(10, 0)    NOT NULL,
	CONSTRAINT CHK_QONT_QUESTION_DRAFT CHECK (QUESTION_DRAFT IN (0,1)),
	CONSTRAINT PK_QUESTION_OPTION_NC_TAG PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_OPTION_ID, QUESTION_VERSION, QUESTION_DRAFT, TAG_ID),
    CONSTRAINT FK_QUESTION_OPT_NC_T_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;
CREATE TABLE CSRIMP.QUESTION_TAG(
	CSRIMP_SESSION_ID	NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
    QUESTION_ID			NUMBER(10, 0)	NOT NULL,
    QUESTION_VERSION	NUMBER(10, 0)	NOT NULL,
    TAG_ID				NUMBER(10, 0)	NOT NULL,
	QUESTION_DRAFT		NUMBER(1)		NOT NULL,
	CONSTRAINT CHK_QT_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0),
    CONSTRAINT PK_QUESTION_TAG PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, TAG_ID),
    CONSTRAINT FK_QUESTION_TAG_IS FOREIGN KEY
    	(CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID)
    	ON DELETE CASCADE
)
;
  
CREATE GLOBAL TEMPORARY TABLE chain.tt_product (
	product_type_id				NUMBER(10) NOT NULL,
	product						VARCHAR2(255) NOT NULL,
	certification_type			VARCHAR2(255) NULL
) ON COMMIT DELETE ROWS;
CREATE TABLE chain.company_request_action(
	app_sid 					NUMBER(10)		DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	company_sid 				NUMBER(10)		NOT NULL,
	matched_company_sid			NUMBER(10),
	action						NUMBER(10)		NOT NULL,
	is_processed				NUMBER(1)		DEFAULT 0 NOT NULL,
	batch_job_id				NUMBER(10),
	error_message				VARCHAR2(4000),
	error_detail				VARCHAR2(4000),
	CONSTRAINT pk_company_request_action PRIMARY KEY (app_sid, company_sid)
);
CREATE TABLE csrimp.chain_company_request_action(
	csrimp_session_id			NUMBER(10) 		DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	company_sid 				NUMBER(10)		NOT NULL,
	matched_company_sid			NUMBER(10),
	action						NUMBER(10)		NOT NULL,
	is_processed				NUMBER(1)		NOT NULL,
	batch_job_id				NUMBER(10),
	error_message				VARCHAR2(4000),
	error_detail				VARCHAR2(4000),
	CONSTRAINT pk_chain_company_request_act PRIMARY KEY (csrimp_session_id, company_sid)
);
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_EXPORT_SYSTEM_VALUES (
	REGION_SID				NUMBER(10),
	START_DTM				DATE,
	END_DTM					DATE,
	CONSTRAINT PK_TEMP_EXPORT_SYSTEM_VALUES PRIMARY KEY (REGION_SID)
) ON COMMIT DELETE ROWS;
CREATE SEQUENCE CHAIN.PRODUCT_COMPANY_ALERT_ID_SEQ
	START WITH 1
	INCREMENT BY 1
	NOMINVALUE
	NOMAXVALUE
	CACHE 20
	NOORDER
;
CREATE TABLE CHAIN.PRODUCT_COMPANY_ALERT(
	APP_SID					NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	ALERT_ID				NUMBER(10, 0)	NOT NULL,
	COMPANY_PRODUCT_ID		NUMBER(10, 0)	NOT NULL,
	PURCHASER_COMPANY_SID	NUMBER(10, 0)	NOT NULL,
	SUPPLIER_COMPANY_SID	NUMBER(10, 0)	NOT NULL,
	USER_SID				NUMBER(10, 0)	NOT NULL,
	SENT_DTM				TIMESTAMP(6),
	CONSTRAINT PK_PRODUCT_COMPANY_ALERT PRIMARY KEY (APP_SID, ALERT_ID)
);
CREATE TABLE CSRIMP.CHAIN_PRODUCT_COMPANY_ALERT (
	CSRIMP_SESSION_ID 		NUMBER(10)		DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	ALERT_ID 				NUMBER(10,0)	NOT NULL,
	COMPANY_PRODUCT_ID 		NUMBER(10,0)	NOT NULL,
	PURCHASER_COMPANY_SID 	NUMBER(10,0)	NOT NULL,
	SUPPLIER_COMPANY_SID 	NUMBER(10,0)	NOT NULL,
	USER_SID 				NUMBER(10,0)	NOT NULL,
	SENT_DTM 				TIMESTAMP(6),
	CONSTRAINT PK_CHAIN_PRODUCT_COMPANY_ALERT PRIMARY KEY (CSRIMP_SESSION_ID, ALERT_ID),
	CONSTRAINT FK_CHAIN_PRDCT_CMPNY_ALERT_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE SEQUENCE chain.customer_filter_column_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE TABLE chain.customer_filter_column (
	app_sid						NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	customer_filter_column_id	NUMBER(10, 0)	NOT NULL,
	card_group_id				NUMBER(10, 0)	NOT NULL,
	column_name					VARCHAR2(255)	NOT NULL,
	session_prefix 				VARCHAR2(255),
	label						VARCHAR2(1024)	NOT NULL,
	width						NUMBER(10, 0)	NOT NULL,
	fixed_width					NUMBER(1, 0)	NOT NULL,
	sortable					NUMBER(1, 0)	NOT NULL,
	CONSTRAINT pk_cust_filt_col PRIMARY KEY (app_sid, customer_filter_column_id),
	CONSTRAINT fk_cust_filt_col_card_grp FOREIGN KEY (card_group_id) REFERENCES chain.card_group (card_group_id),
	CONSTRAINT ck_cust_filt_col_fixed_width CHECK (fixed_width IN (1, 0)),
	CONSTRAINT ck_cust_filt_col_sortable CHECK (sortable IN (1, 0))
);
CREATE UNIQUE INDEX chain.uk_customer_filter_column ON chain.customer_filter_column(app_sid, card_group_id, column_name, session_prefix);
CREATE SEQUENCE chain.customer_filter_item_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE TABLE chain.customer_filter_item (
	app_sid						NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	customer_filter_item_id		NUMBER(10, 0) NOT NULL,
	card_group_id				NUMBER(10, 0) NOT NULL,
	item_name					VARCHAR2(255) NOT NULL,
	session_prefix 				VARCHAR2(255),
	label						VARCHAR2(1024)	NOT NULL,
	can_breakdown				NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT pk_cust_filt_item PRIMARY KEY (app_sid, customer_filter_item_id),
	CONSTRAINT fk_cust_filt_item_card_grp FOREIGN KEY (card_group_id) REFERENCES chain.card_group (card_group_id),
	CONSTRAINT ck_cust_filt_item_can_brkdn CHECK (can_breakdown IN (1, 0))
);
CREATE UNIQUE INDEX chain.uk_customer_filter_item ON chain.customer_filter_item(app_sid, card_group_id, item_name, session_prefix);
CREATE SEQUENCE chain.cust_filt_item_agg_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER
;
CREATE TABLE chain.cust_filt_item_agg_type (
	app_sid						NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	cust_filt_item_agg_type_id	NUMBER(10, 0) NOT NULL,
	customer_filter_item_id		NUMBER(10, 0) NOT NULL,
	analytic_function			NUMBER(10, 0) NOT NULL,
	CONSTRAINT pk_cust_filt_item_agg_type PRIMARY KEY (app_sid, cust_filt_item_agg_type_id),
	CONSTRAINT fk_cust_filt_item_agg_type FOREIGN KEY (app_sid, customer_filter_item_id) REFERENCES chain.customer_filter_item (app_sid, customer_filter_item_id)
);
CREATE UNIQUE INDEX chain.uk_cust_filt_item_agg_type ON chain.cust_filt_item_agg_type(app_sid, customer_filter_item_id, analytic_function);
CREATE OR REPLACE TYPE csr.t_qs_response_perm_row AS
	OBJECT (
		survey_response_id			NUMBER(10),
		object_id					NUMBER(10),
		can_see_response			NUMBER(1),
		can_see_scores				NUMBER(1),
		MAP MEMBER FUNCTION MAP
			RETURN VARCHAR2
	);
/
CREATE OR REPLACE TYPE BODY csr.t_qs_response_perm_row AS
	MAP MEMBER FUNCTION MAP
		RETURN VARCHAR2
	IS
	BEGIN
		RETURN survey_response_id || ',' || object_id;
	END;
END;
/
CREATE OR REPLACE TYPE csr.t_qs_response_perm_table AS
	TABLE OF csr.t_qs_response_perm_row;
/
CREATE TABLE CSRIMP.CHAIN_CUST_FILTER_COLUMN (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	CUSTOMER_FILTER_COLUMN_ID NUMBER(10,0) NOT NULL,
	CARD_GROUP_ID NUMBER(10,0) NOT NULL,
	COLUMN_NAME VARCHAR2(255) NOT NULL,
	FIXED_WIDTH NUMBER(1,0) NOT NULL,
	LABEL VARCHAR2(1024) NOT NULL,
	SESSION_PREFIX VARCHAR2(255),
	SORTABLE NUMBER(1,0) NOT NULL,
	WIDTH NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_CUST_FILTER_COLUMN PRIMARY KEY (CSRIMP_SESSION_ID, CUSTOMER_FILTER_COLUMN_ID),
	CONSTRAINT FK_CHAIN_CUST_FILTER_COLUMN_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_CUSTOM_FILTER_ITEM (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	CUSTOMER_FILTER_ITEM_ID NUMBER(10,0) NOT NULL,
	CAN_BREAKDOWN NUMBER(1,0) NOT NULL,
	CARD_GROUP_ID NUMBER(10,0) NOT NULL,
	ITEM_NAME VARCHAR2(255) NOT NULL,
	LABEL VARCHAR2(1024) NOT NULL,
	SESSION_PREFIX VARCHAR2(255),
	CONSTRAINT PK_CHAIN_CUSTOM_FILTER_ITEM PRIMARY KEY (CSRIMP_SESSION_ID, CUSTOMER_FILTER_ITEM_ID),
	CONSTRAINT FK_CHAIN_CUSTOM_FILTER_ITEM_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.CHAIN_CU_FIL_ITE_AGG_TYP (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	CUST_FILT_ITEM_AGG_TYPE_ID NUMBER(10,0) NOT NULL,
	ANALYTIC_FUNCTION NUMBER(10,0) NOT NULL,
	CUSTOMER_FILTER_ITEM_ID NUMBER(10,0) NOT NULL,
	CONSTRAINT PK_CHAIN_CU_FIL_ITE_AGG_TYP PRIMARY KEY (CSRIMP_SESSION_ID, CUST_FILT_ITEM_AGG_TYPE_ID),
	CONSTRAINT FK_CHAIN_CU_FIL_ITE_AGG_TYP_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_CHAIN_CUST_FILT_COL (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_CHAIN_CUST_FILTER_COLUM_ID NUMBER(10) NOT NULL,
	NEW_CHAIN_CUST_FILTER_COLUM_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_CUST_FILT_COL PRIMARY KEY (CSRIMP_SESSION_ID, OLD_CHAIN_CUST_FILTER_COLUM_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_CUST_FILT_COL UNIQUE (CSRIMP_SESSION_ID, NEW_CHAIN_CUST_FILTER_COLUM_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_CUST_FILT_COL_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_CHAIN_CUST_FILT_ITEM (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_CHAIN_CUST_FILTER_ITEM_ID NUMBER(10) NOT NULL,
	NEW_CHAIN_CUST_FILTER_ITEM_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_CUST_FILT_ITEM PRIMARY KEY (CSRIMP_SESSION_ID, OLD_CHAIN_CUST_FILTER_ITEM_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_CUST_FILT_ITEM UNIQUE (CSRIMP_SESSION_ID, NEW_CHAIN_CUST_FILTER_ITEM_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_CUST_FILT_ITEM_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_CHAIN_CU_FI_IT_AG_TY (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_CHAIN_CU_FI_ITE_AGG_TYP_ID NUMBER(10) NOT NULL,
	NEW_CHAIN_CU_FI_ITE_AGG_TYP_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_CU_FI_IT_AG_TY PRIMARY KEY (CSRIMP_SESSION_ID, OLD_CHAIN_CU_FI_ITE_AGG_TYP_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_CU_FI_IT_AG_TY UNIQUE (CSRIMP_SESSION_ID, NEW_CHAIN_CU_FI_ITE_AGG_TYP_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_CU_FI_IT_AG_TY_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE csr.issue_due_source (
	app_sid							NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	issue_due_source_id				NUMBER(10,0) NOT NULL,
	issue_type_id					NUMBER(10,0) NOT NULL,
	source_description				VARCHAR2(1024) NOT NULL,
	fetch_proc						VARCHAR2(256) NOT NULL,
    CONSTRAINT pk_issue_due_source	PRIMARY KEY (app_sid, issue_due_source_id)
);
ALTER TABLE csr.issue_due_source ADD CONSTRAINT fk_issue_due_source_issue_type
	FOREIGN KEY (app_sid, issue_type_id) 
	REFERENCES csr.issue_type (app_sid, issue_type_id);
CREATE INDEX csr.issue_due_source_issue_type ON csr.issue_due_source(app_sid, issue_type_id);
CREATE TABLE csrimp.issue_due_source (
	csrimp_session_id				NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	issue_due_source_id				NUMBER(10,0) NOT NULL,
	issue_type_id					NUMBER(10,0) NOT NULL,
	source_description				VARCHAR2(1024) NOT NULL,
	fetch_proc						VARCHAR2(256) NOT NULL,
    CONSTRAINT pk_issue_due_source	PRIMARY KEY (csrimp_session_id, issue_due_source_id),
    CONSTRAINT fk_issue_due_source_is 
		FOREIGN KEY (CSRIMP_SESSION_ID) 
		REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) 
		ON DELETE CASCADE
);
 
CREATE TABLE csr.compl_permit_app_status (
	compl_permit_app_status_id		NUMBER(10, 0)	NOT NULL,
	label							VARCHAR2(256)	NOT NULL,
	pos 							NUMBER(10, 0)	NOT NULL,
	CONSTRAINT pk_compl_permit_app_status PRIMARY KEY (compl_permit_app_status_id)
);
INSERT INTO csr.compl_permit_app_status(compl_permit_app_status_id, label, pos) VALUES (0, 'In Progress', 0);
INSERT INTO csr.compl_permit_app_status(compl_permit_app_status_id, label, pos) VALUES (1, 'Granted', 1);
INSERT INTO csr.compl_permit_app_status(compl_permit_app_status_id, label, pos) VALUES (2, 'Refused', 2);
CREATE SEQUENCE chain.supplier_rel_score_id_seq
	START WITH 1
	INCREMENT BY 1
	NOMINVALUE
	NOMAXVALUE
	CACHE 20
	NOORDER
;
CREATE TABLE chain.supplier_relationship_score(
	app_sid							NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	supplier_relationship_score_id	NUMBER(10, 0)	NOT NULL,
	purchaser_company_sid			NUMBER(10, 0)	NOT NULL,
	supplier_company_sid			NUMBER(10, 0)	NOT NULL,
	score_threshold_id				NUMBER(10, 0),
	set_dtm							DATE			DEFAULT SYSDATE NOT NULL,
	score							NUMBER(15, 5),
	changed_by_user_sid 			NUMBER(10, 0)	DEFAULT SYS_CONTEXT('SECURITY', 'SID'),
	score_type_id					NUMBER(10, 0)	NOT NULL,
	is_effective					NUMBER(1, 0)	DEFAULT 1 NOT NULL,
	CONSTRAINT pk_supplier_relationhsip_score PRIMARY KEY (app_sid, supplier_relationship_score_id),
	CONSTRAINT chk_is_current CHECK (is_effective IN (0,1))
);
CREATE UNIQUE INDEX chain.uk_supplier_relationship_score 
	ON chain.supplier_relationship_score(app_sid, purchaser_company_sid, supplier_company_sid, score_type_id,
		DECODE(is_effective, 1, 1, supplier_relationship_score_id + 1));
CREATE TABLE CSRIMP.CHAIN_SUPPL_RELATI_SCORE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	SUPPLIER_RELATIONSHIP_SCORE_ID NUMBER(10,0) NOT NULL,
	PURCHASER_COMPANY_SID NUMBER(10,0) NOT NULL,
	SCORE NUMBER(15,5),
	SCORE_THRESHOLD_ID NUMBER(10,0),
	SCORE_TYPE_ID NUMBER(10,0) NOT NULL,
	SET_DTM DATE NOT NULL,
	SUPPLIER_COMPANY_SID NUMBER(10,0) NOT NULL,
	CHANGED_BY_USER_SID NUMBER(10, 0) NOT NULL,
	IS_EFFECTIVE	NUMBER(1, 0) NOT NULL,
	CONSTRAINT PK_CHAIN_SUPPL_RELATI_SCORE PRIMARY KEY (CSRIMP_SESSION_ID, SUPPLIER_RELATIONSHIP_SCORE_ID),
	CONSTRAINT FK_CHAIN_SUPPL_RELATI_SCORE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE CSRIMP.MAP_CHAIN_SUPP_REL_SCORE (
	CSRIMP_SESSION_ID NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	OLD_CHAIN_SUPPLIE_REL_SCORE_ID NUMBER(10) NOT NULL,
	NEW_CHAIN_SUPPLIE_REL_SCORE_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_MAP_CHAIN_SUPP_REL_SCORE PRIMARY KEY (CSRIMP_SESSION_ID, OLD_CHAIN_SUPPLIE_REL_SCORE_ID) USING INDEX,
	CONSTRAINT UK_MAP_CHAIN_SUPP_REL_SCORE UNIQUE (CSRIMP_SESSION_ID, NEW_CHAIN_SUPPLIE_REL_SCORE_ID) USING INDEX,
	CONSTRAINT FK_MAP_CHAIN_SUPP_REL_SCORE_IS FOREIGN KEY (CSRIMP_SESSION_ID) REFERENCES CSRIMP.CSRIMP_SESSION (CSRIMP_SESSION_ID) ON DELETE CASCADE
);
CREATE TABLE csr.tpl_report_tag_qchart
(
    app_sid NUMBER(10,0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL, 
	tpl_report_tag_qchart_id NUMBER(10,0) NOT NULL, 
	month_offset NUMBER(10,0) DEFAULT -12 NOT NULL, 
	month_duration NUMBER(10,0) DEFAULT 12 NOT NULL, 
	period_set_id NUMBER(10,0) NOT NULL, 
	period_interval_id NUMBER(10,0) NOT NULL, 
	hide_if_empty NUMBER(1,0) DEFAULT 0 NOT NULL, 
	split_table_by_columns NUMBER(10,0) DEFAULT 0 NOT NULL, 
	saved_filter_sid NUMBER(10,0), 
    CONSTRAINT pk_tpl_report_tag_qchart PRIMARY KEY (app_sid, tpl_report_tag_qchart_id),
    CONSTRAINT fk_tpl_rp_tg_qc_period_int
        FOREIGN KEY (app_sid, period_set_id, period_interval_id)
        REFERENCES csr.period_interval(app_sid, period_set_id, period_interval_id),
    CONSTRAINT fk_tpl_rprt_tag_qc_saved_fltr 
        FOREIGN KEY (app_sid, saved_filter_sid)
	    REFERENCES chain.saved_filter (app_sid, saved_filter_sid)
);
CREATE TABLE csrimp.tpl_report_tag_qchart
(
    csrimp_session_id NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	tpl_report_tag_qchart_id NUMBER(10,0) NOT NULL, 
	month_offset NUMBER(10,0) NOT NULL, 
	month_duration NUMBER(10,0) NOT NULL, 
	period_set_id NUMBER(10,0) NOT NULL, 
	period_interval_id NUMBER(10,0) NOT NULL, 
	hide_if_empty NUMBER(1,0) NOT NULL, 
	split_table_by_columns NUMBER(10,0) NOT NULL, 
	saved_filter_sid NUMBER(10,0), 
    CONSTRAINT pk_tpl_report_tag_qchart PRIMARY KEY (csrimp_session_id, tpl_report_tag_qchart_id),
    CONSTRAINT fk_tpl_rep_tag_qc_is FOREIGN KEY
    	(csrimp_session_id) REFERENCES csrimp.csrimp_session (csrimp_session_id)
    	ON DELETE CASCADE
);
CREATE TABLE csrimp.map_tpl_report_tag_qc (
	csrimp_session_id               NUMBER(10) DEFAULT SYS_CONTEXT('SECURITY', 'CSRIMP_SESSION_ID') NOT NULL,
	old_tpl_report_tag_qc_id		NUMBER(10)	NOT NULL,
	new_tpl_report_tag_qc_id		NUMBER(10)	NOT NULL,
	CONSTRAINT pk_map_tpl_report_tag_qc primary key (csrimp_session_id, old_tpl_report_tag_qc_id) USING INDEX,
	CONSTRAINT uk_map_tpl_report_tag_qc unique (csrimp_session_id, new_tpl_report_tag_qc_id) USING INDEX,
    CONSTRAINT fk_map_tpl_rep_tag_qc_is FOREIGN KEY
    	(csrimp_session_id) REFERENCES csrimp.csrimp_session (csrimp_session_id)
    	ON DELETE CASCADE
);


ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NULL,
	SURVEY_SID				NUMBER(10, 0)		NULL
);
UPDATE csr.qs_question_option_nc_tag qsnt
   SET qsnt.question_version = qsnt.survey_version,
	   qsnt.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qsnt.app_sid AND qsq.question_id = qsnt.question_id AND qsq.survey_version = qsnt.survey_version);
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG MODIFY SURVEY_SID NOT NULL;
ALTER TABLE CSR.QS_QUESTION_OPTION ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NULL,
	SURVEY_SID				NUMBER(10, 0)		NULL,
	QUESTION_DRAFT			NUMBER(1)	 		DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_QSQO_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);
UPDATE csr.qs_question_option qso
   SET qso.question_version = qso.survey_version,
	   qso.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qso.app_sid AND qsq.question_id = qso.question_id AND qsq.survey_version = qso.survey_version);
	   
ALTER TABLE CSR.QS_QUESTION_OPTION MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QS_QUESTION_OPTION MODIFY SURVEY_SID NOT NULL;
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT FK_QSQO_QO
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
    REFERENCES CSR.QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NULL,
	QUESTION_DRAFT		NUMBER(1) 		DEFAULT 0 NOT NULL,
	PARENT_VERSION		NUMBER(10, 0) 	NULL,
	CONSTRAINT CHK_QSQ_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);
UPDATE csr.quick_survey_question
   SET question_version = survey_version;
   
UPDATE csr.quick_survey_question   
   SET parent_version = survey_version
 WHERE parent_id IS NOT NULL;
 
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD (
	CONSTRAINT CHK_QSQ_PARENT CHECK ((PARENT_ID IS NULL AND PARENT_VERSION IS NULL) OR (PARENT_ID IS NOT NULL AND PARENT_VERSION IS NOT NULL))
);
ALTER TABLE CSR.QUICK_SURVEY_QUESTION MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QSQ_QUESTION_VERSION
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
	REFERENCES CSR.QUESTION_VERSION (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT UK_QSQ UNIQUE (APP_SID, QUESTION_ID, SURVEY_SID, SURVEY_VERSION);
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NULL,
	SURVEY_SID			NUMBER(10, 0) 	NULL
);
UPDATE csr.quick_survey_answer qsa
   SET question_version = survey_version,
       survey_sid = ( SELECT survey_sid FROM csr.quick_survey_response qsr WHERE qsr.app_sid = qsa.app_sid AND qsa.survey_response_id = qsr.survey_response_id );
ALTER TABLE CSR.QUICK_SURVEY_ANSWER MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER MODIFY SURVEY_SID NOT NULL;

ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NULL,
	SURVEY_SID			NUMBER(10, 0) 	NULL
);
UPDATE csr.issue_survey_answer isa
   SET isa.question_version = isa.survey_version,
	   isa.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = isa.app_sid AND qsq.question_id = isa.question_id AND qsq.survey_version = isa.survey_version);
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER DROP CONSTRAINT UK_ISSUE_SURVEY_ANSWER;
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD CONSTRAINT UK_ISSUE_SURVEY_ANSWER UNIQUE (SURVEY_RESPONSE_ID, QUESTION_ID, QUESTION_VERSION);
	   
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER MODIFY SURVEY_SID NOT NULL;
ALTER TABLE CSR.NON_COMPLIANCE ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NULL,
	QUESTION_DRAFT			NUMBER(1)		NULL,
	CONSTRAINT CHK_NC_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);
UPDATE csr.non_compliance nc
   SET nc.question_draft = 0, nc.question_version = 0
 WHERE nc.question_id IS NOT NULL;
ALTER TABLE CSR.NON_COMPLIANCE ADD CONSTRAINT FK_NON_COMPLIANCE_Q
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
	REFERENCES CSR.QUESTION_VERSION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT)
;
ALTER TABLE CSR.QS_ANSWER_FILE ADD (
	SURVEY_SID			NUMBER(10, 0)	NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NULL
);
UPDATE csr.qs_answer_file qaf
   SET qaf.question_version = qaf.survey_version,
	   qaf.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qaf.app_sid AND qsq.question_id = qaf.question_id AND qsq.survey_version = qaf.survey_version);
ALTER TABLE	CSR.QS_ANSWER_FILE MODIFY SURVEY_SID NOT NULL;
ALTER TABLE	CSR.QS_ANSWER_FILE MODIFY QUESTION_VERSION NOT NULL;	   
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_DESCRIPTION;
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_PARAM_1;
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_PARAM_2;
ALTER TABLE CSR.QS_ANSWER_LOG DROP COLUMN XXX_PARAM_3;
ALTER TABLE CSR.QS_ANSWER_LOG ADD (
	QUESTION_VERSION	NUMBER(10, 0) NULL
);
UPDATE csr.qs_answer_log qsa
   SET question_version = (SELECT survey_version FROM csr.quick_survey_response qsr WHERE qsr.app_sid = qsa.app_sid AND qsa.survey_response_id = qsr.survey_response_id);
ALTER TABLE CSR.QS_ANSWER_LOG MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QS_FILTER_CONDITION ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NULL
);
UPDATE csr.qs_filter_condition
   SET question_version = survey_version;
ALTER TABLE CSR.QS_FILTER_CONDITION MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG ADD (
	SURVEY_SID			NUMBER(10, 0)	NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NULL
)
;
UPDATE csr.quick_survey_question_tag qsqt
   SET qsqt.question_version = qsqt.survey_version,
	   qsqt.survey_sid = (SELECT qsq.survey_sid FROM csr.quick_survey_question qsq WHERE qsq.app_sid = qsqt.app_sid AND qsq.question_id = qsqt.question_id AND qsq.survey_version = qsqt.survey_version);
	   
ALTER TABLE	CSR.QUICK_SURVEY_QUESTION_TAG MODIFY SURVEY_SID NOT NULL;
ALTER TABLE	CSR.QUICK_SURVEY_QUESTION_TAG MODIFY QUESTION_VERSION NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_EXPR ADD(
	QUESTION_VERSION				NUMBER(10)
);
UPDATE csr.quick_survey_expr
   SET question_version = survey_version
 WHERE question_id IS NOT NULL;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD(
	MANDATORY_QUESTION_VERSION		NUMBER(10, 0),
	SHOW_QUESTION_VERSION			NUMBER(10, 0),
	SHOW_PAGE_VERSION				NUMBER(10, 0)
);
UPDATE csr.quick_survey_expr_action
   SET mandatory_question_version = survey_version
 WHERE mandatory_question_id IS NOT NULL;
 
UPDATE csr.quick_survey_expr_action
   SET show_question_version = survey_version
 WHERE show_question_id IS NOT NULL;
 
UPDATE csr.quick_survey_expr_action
   SET show_page_version = survey_version
 WHERE show_page_id IS NOT NULL; 
ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NULL
);
UPDATE chain.higg_question_survey
   SET qs_question_version = survey_version;
ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY MODIFY QS_QUESTION_VERSION NOT NULL;
ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NULL,
	QS_QUESTION_DRAFT				NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT CHK_HQOS_QUESTION_DRAFT CHECK (QS_QUESTION_DRAFT = 0)
);
UPDATE chain.higg_question_option_survey
   SET qs_question_version = survey_version;
ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY MODIFY QS_QUESTION_VERSION NOT NULL;
GRANT SELECT, REFERENCES ON CSR.QUESTION_OPTION TO CHAIN;
DECLARE
	v_count NUMBER;
BEGIN
	SELECT COUNT(*) INTO v_count
	FROM all_constraints
	WHERE constraint_name = 'FK_HQS_QS_QO' AND owner = 'CHAIN' AND table_name = 'HIGG_QUESTION_OPTION_SURVEY';
	IF v_count > 0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY DROP CONSTRAINT FK_HQS_QS_QO';
	END IF;
END;
/
ALTER TABLE CHAIN.HIGG_QUESTION_OPTION_SURVEY ADD CONSTRAINT FK_HQS_QS_QO
	FOREIGN KEY (APP_SID, QS_QUESTION_ID, QS_QUESTION_VERSION, QS_QUESTION_DRAFT, QS_QUESTION_OPTION_ID)
    REFERENCES CSR.QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_DRAFT, QUESTION_OPTION_ID)
;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG DROP CONSTRAINT PK_QS_QUESTION_TAG DROP INDEX;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG ADD CONSTRAINT PK_QS_QUESTION_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION, TAG_ID);
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG DROP CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG DROP INDEX;
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG ADD CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION, TAG_ID);
ALTER TABLE CSR.QS_FILTER_CONDITION DROP CONSTRAINT FK_QS_FIL_COND_CMP_OP;
ALTER TABLE CSR.QS_QUESTION_OPTION DROP CONSTRAINT QS_Q_OPT_PARENT_OPT;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QS_Q_OPT_ANSWER;
ALTER TABLE CSR.QUICK_SURVEY_EXPR DROP CONSTRAINT FK_QUICK_SURVEY_EXPR_QUEST_OPT;
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG DROP CONSTRAINT FK_QSQ_OPT_TAG_OPTION;
ALTER TABLE CSR.QS_QUESTION_OPTION DROP CONSTRAINT PK_QS_QUESTION_OPTION DROP INDEX;
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT PK_QS_QUESTION_OPTION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION);
ALTER TABLE CSR.QS_FILTER_CONDITION ADD CONSTRAINT FK_QS_FIL_COND_CMP_OP
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, COMPARE_TO_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT QS_Q_OPT_PARENT_OPT
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, PARENT_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QS_Q_OPT_ANSWER
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;
ALTER TABLE CSR.QUICK_SURVEY_EXPR ADD CONSTRAINT FK_QUICK_SURVEY_EXPR_QUEST_OPT
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
	REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QS_QUESTION_OPTION_NC_TAG ADD CONSTRAINT FK_QSQ_OPT_TAG_OPTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QS_QUESTION_OPTION(APP_SID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QS_QUESTION_OPTION DROP CONSTRAINT RefQUICK_SURVEY_QUESTION2195;
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER DROP CONSTRAINT FK_ISS_SURV_ANS_QSTN;
ALTER TABLE CSR.QS_ANSWER_FILE DROP CONSTRAINT FK_QS_ANS_FILE_QSTN_ID;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG DROP CONSTRAINT FK_QS_QUESTION_TAG_QS_QUESTION;
ALTER TABLE CSR.QS_FILTER_CONDITION DROP CONSTRAINT FK_QS_FIL_COND_QN;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT FK_EXPR_SHOW_QUESTION_ID;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION DROP CONSTRAINT QS_EA_SHOW_PAGE_QUESTION;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT FK_QS_QUES_PARENT_QUES;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER DROP CONSTRAINT FK_QSQ_QSA_MEASUREX;
ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY DROP CONSTRAINT FK_HQS_QS_QUESTION;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION DROP CONSTRAINT PK_QUICK_SURVEY_QUESTION DROP INDEX;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT PK_QUICK_SURVEY_QUESTION PRIMARY KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION);
ALTER TABLE CSR.QUICK_SURVEY_QUESTION ADD CONSTRAINT FK_QS_QUES_PARENT_QUES
    FOREIGN KEY (APP_SID, PARENT_ID, PARENT_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QS_QUESTION_OPTION ADD CONSTRAINT FK_QSQO_QSQ
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;
ALTER TABLE CSR.ISSUE_SURVEY_ANSWER ADD CONSTRAINT FK_ISS_SURV_ANS_QSTN
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;
ALTER TABLE CSR.QS_ANSWER_FILE ADD CONSTRAINT FK_QS_ANS_FILE_QSTN_ID
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;
ALTER TABLE CSR.QUICK_SURVEY_QUESTION_TAG ADD CONSTRAINT FK_QS_QUESTION_TAG_QS_QUESTION
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QUICK_SURVEY_ANSWER ADD CONSTRAINT FK_QSA_QSQ
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION) DEFERRABLE INITIALLY DEFERRED
;
ALTER TABLE CSR.QS_FILTER_CONDITION ADD CONSTRAINT FK_QS_FIL_COND_QN
    FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QUICK_SURVEY_EXPR ADD CONSTRAINT FK_QUICK_SURVEY_EXPR_QSQ
	FOREIGN KEY (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
	REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT FK_EXPR_SHOW_QUESTION_ID
    FOREIGN KEY (APP_SID, SHOW_QUESTION_ID, SHOW_QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT QS_EA_SHOW_PAGE_QUESTION
    FOREIGN KEY (APP_SID, SHOW_PAGE_ID, SHOW_PAGE_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CSR.QUICK_SURVEY_EXPR_ACTION ADD CONSTRAINT FK_EXPR_MANDATORY_QUESTION_ID
    FOREIGN KEY (APP_SID, MANDATORY_QUESTION_ID, MANDATORY_QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
    REFERENCES CSR.QUICK_SURVEY_QUESTION(APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
ALTER TABLE CHAIN.HIGG_QUESTION_SURVEY ADD CONSTRAINT FK_HQS_QS_QUESTION
	FOREIGN KEY (APP_SID, QS_QUESTION_ID, QS_QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
	REFERENCES CSR.QUICK_SURVEY_QUESTION (APP_SID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION)
;
DROP TABLE CSR.TEMPOR_QUESTION;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMPOR_QUESTION (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	PARENT_ID				NUMBER(10),
	PARENT_VERSION			NUMBER(10),
	POS						NUMBER(10),
	LABEL					VARCHAR2(4000),
	QUESTION_TYPE			VARCHAR2(40),
	SCORE					NUMBER(13,3),
	MAX_SCORE				NUMBER(13,3),
	UPLOAD_SCORE			NUMBER(13,3),
	LOOKUP_KEY				VARCHAR2(255),
	INVERT_SCORE			VARCHAR2(255),
	CUSTOM_QUESTION_TYPE_ID	NUMBER(10),
	WEIGHT					NUMBER(15,5),
	DONT_NORMALISE_SCORE	NUMBER(1),
	HAS_SCORE_EXPRESSION	NUMBER(1),
	HAS_MAX_SCORE_EXPR		NUMBER(1),
	REMEMBER_ANSWER			NUMBER(1),
	COUNT_QUESTION			NUMBER(1),
	ACTION					VARCHAR2(50)
) ON COMMIT DELETE ROWS;
DROP TABLE CSR.TEMP_QUESTION_OPTION;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_QUESTION_OPTION (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	QUESTION_OPTION_ID		NUMBER(10),
	POS						NUMBER(10),
	LABEL					VARCHAR2(4000),
	SCORE					NUMBER(13,3),
	HAS_OVERRIDE			NUMBER(1),
	SCORE_OVERRIDE			NUMBER(13,3),
	HIDDEN					NUMBER(1),
	COLOR					NUMBER(10),
	LOOKUP_KEY				VARCHAR2(255),
	OPTION_ACTION			VARCHAR2(50),
	NON_COMPLIANCE_POPUP	NUMBER(1),
	NON_COMP_DEFAULT_ID		NUMBER(10),
	NON_COMPLIANCE_TYPE_ID	NUMBER(10),
	NON_COMPLIANCE_LABEL	VARCHAR2(255),
	NON_COMPLIANCE_DETAIL	VARCHAR2(4000),
	NON_COMP_ROOT_CAUSE		VARCHAR2(4000),
	NON_COMP_SUGGESTED_ACTION VARCHAR2(4000)
) ON COMMIT DELETE ROWS;
DROP TABLE CSR.TEMP_QUESTION_OPTION_NC_TAG;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_QUESTION_OPTION_NC_TAG (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	QUESTION_OPTION_ID		NUMBER(10),
	TAG_ID					NUMBER(10)
) ON COMMIT DELETE ROWS;
DROP TABLE CSR.TEMP_QUESTION_OPTION_SHOW_Q;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_QUESTION_OPTION_SHOW_Q (
	QUESTION_ID				NUMBER(10),
	QUESTION_VERSION		NUMBER(10),
	QUESTION_OPTION_ID		NUMBER(10),
	SHOW_QUESTION_ID		NUMBER(10),
	SHOW_QUESTION_VERSION	NUMBER(10)
) ON COMMIT DELETE ROWS;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION_NC_TAG ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NOT NULL,
	SURVEY_SID				NUMBER(10, 0)		NOT NULL
);
ALTER TABLE CSRIMP.QS_QUESTION_OPTION_NC_TAG DROP CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG DROP INDEX;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION_NC_TAG ADD CONSTRAINT PK_QS_QUESTION_OPTION_NC_TAG
	PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION, TAG_ID);
		
ALTER TABLE CSRIMP.QS_QUESTION_OPTION ADD (
	QUESTION_VERSION		NUMBER(10, 0)		NOT NULL,
	SURVEY_SID				NUMBER(10, 0)		NOT NULL,
	QUESTION_DRAFT			NUMBER(1)	 		NOT NULL,
	CONSTRAINT CHK_QSQO_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);
ALTER TABLE CSRIMP.QS_QUESTION_OPTION DROP CONSTRAINT PK_QS_QUESTION_OPTION DROP INDEX;
ALTER TABLE CSRIMP.QS_QUESTION_OPTION ADD CONSTRAINT PK_QS_QUESTION_OPTION
	PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, QUESTION_OPTION_ID, SURVEY_SID, SURVEY_VERSION);
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION ADD(
	QUESTION_VERSION			NUMBER(10, 0) 	NOT NULL,
	QUESTION_DRAFT				NUMBER(1) 		NOT NULL,
	PARENT_VERSION				NUMBER(10, 0) 	NULL,
	CONSTRAINT CHK_QSQ_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0),
	CONSTRAINT CHK_QSQ_PARENT CHECK ((PARENT_ID IS NULL AND PARENT_VERSION IS NULL) OR (PARENT_ID IS NOT NULL AND PARENT_VERSION IS NOT NULL))
);
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION DROP CONSTRAINT PK_QUICK_SURVEY_QUESTION DROP INDEX;
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION ADD CONSTRAINT PK_QUICK_SURVEY_QUESTION
 PRIMARY KEY (CSRIMP_SESSION_ID, QUESTION_ID, QUESTION_VERSION, SURVEY_SID, SURVEY_VERSION);
	
ALTER TABLE CSRIMP.QUICK_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NOT NULL,
	SURVEY_SID			NUMBER(10, 0) 	NOT NULL
);
ALTER TABLE CSRIMP.ISSUE_SURVEY_ANSWER ADD (
	QUESTION_VERSION	NUMBER(10, 0) 	NOT NULL,
	SURVEY_SID			NUMBER(10, 0) 	NOT NULL
);
ALTER TABLE CSRIMP.NON_COMPLIANCE ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NULL,
	QUESTION_DRAFT			NUMBER(1)		NULL,
	CONSTRAINT CHK_NC_QUESTION_DRAFT CHECK (QUESTION_DRAFT = 0)
);
ALTER TABLE CSRIMP.QS_ANSWER_FILE ADD (
	SURVEY_SID			NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NOT NULL
);
ALTER TABLE CSRIMP.QS_ANSWER_LOG ADD (
	QUESTION_VERSION	NUMBER(10, 0) NOT NULL
);
ALTER TABLE CSRIMP.QS_FILTER_CONDITION ADD (
	QUESTION_VERSION		NUMBER(10, 0)	NOT NULL
);
ALTER TABLE CSRIMP.QUICK_SURVEY_QUESTION_TAG ADD (
	SURVEY_SID			NUMBER(10, 0)	NOT NULL,
	QUESTION_VERSION	NUMBER(10, 0)	NOT NULL
);
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR ADD(
	QUESTION_VERSION	NUMBER(10)
);
ALTER TABLE CSRIMP.QUICK_SURVEY_EXPR_ACTION ADD(
	MANDATORY_QUESTION_VERSION		NUMBER(10, 0),
	SHOW_QUESTION_VERSION			NUMBER(10, 0),
	SHOW_PAGE_VERSION				NUMBER(10, 0)
);
ALTER TABLE CSRIMP.HIGG_QUESTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NOT NULL
);
ALTER TABLE CSRIMP.HIGG_QUESTION_OPTION_SURVEY ADD (
	QS_QUESTION_VERSION				NUMBER(10) NOT NULL,
	QS_QUESTION_DRAFT				NUMBER(1) NOT NULL,
	CONSTRAINT CHK_HQOS_QUESTION_DRAFT CHECK (QS_QUESTION_DRAFT = 0)
);
create index chain.ix_higg_question_qs_question_o on chain.higg_question_option_survey (app_sid, qs_question_option_id, qs_question_id, qs_question_version, qs_question_draft);
create index chain.ix_higg_question_qs_question_i on chain.higg_question_survey (app_sid, qs_question_id, qs_question_version, survey_sid, survey_version);
create index csr.ix_issue_survey__question_id_q on csr.issue_survey_answer (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_non_complianc_question_id_q on csr.non_compliance (app_sid, question_id, question_version, question_draft);
create index csr.ix_qs_answer_fil_question_id_q on csr.qs_answer_file (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_qs_filter_con_question_id_q on csr.qs_filter_condition (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_qs_filter_con_question_id_2 on csr.qs_filter_condition (app_sid, question_id, question_version, compare_to_option_id, survey_sid, survey_version);
create index csr.ix_qs_question_o_question_id_q on csr.qs_question_option (app_sid, question_id, question_version, parent_option_id, survey_sid, survey_version);
create index csr.ix_qs_question_o_question_id_2 on csr.qs_question_option (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_qs_question_o_question_opti on csr.qs_question_option (app_sid, question_option_id, question_id, question_version, question_draft);
create index csr.ix_question_question_type on csr.question (question_type);
create index csr.ix_question_maps_to_ind_s on csr.question (app_sid, maps_to_ind_sid, measure_sid);
create index csr.ix_question_custom_questi on csr.question (app_sid, custom_question_type_id);
create index csr.ix_question_owned_by_surv on csr.question (app_sid, owned_by_survey_sid);
create index csr.ix_question_opti_question_opti on csr.question_option_nc_tag (app_sid, question_option_id, question_id, question_version, question_draft);
create index csr.ix_question_tag_question_id_q on csr.question_tag (app_sid, question_id, question_version, question_draft);
create index csr.ix_question_vers_parent_id on csr.question_version (app_sid, parent_id);
create index csr.ix_quick_survey__question_id_m on csr.quick_survey_answer (app_sid, question_id, measure_sid);
create index csr.ix_quick_survey__question_id_q on csr.quick_survey_answer (app_sid, question_id, question_version, question_option_id, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_2 on csr.quick_survey_answer (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_3 on csr.quick_survey_expr (app_sid, question_id, question_version, question_option_id, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_4 on csr.quick_survey_expr (app_sid, question_id, question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__show_question on csr.quick_survey_expr_action (app_sid, show_question_id, show_question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__show_page_id1 on csr.quick_survey_expr_action (app_sid, show_page_id, show_page_version, survey_sid, survey_version);
create index csr.ix_quick_survey__mandatory_que on csr.quick_survey_expr_action (app_sid, mandatory_question_id, mandatory_question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__parent_id_que on csr.quick_survey_question (app_sid, parent_id, question_version, survey_sid, survey_version);
create index csr.ix_quick_survey__question_id_5 on csr.quick_survey_question (app_sid, question_id, question_version, question_draft);
create index csr.ix_quick_srv_q_question_id_m on csr.quick_survey_question (app_sid, question_id, measure_sid);
create index csr.ix_quick_survey__parent_id_par on csr.quick_survey_question (app_sid, parent_id, parent_version, survey_sid, survey_version);
DROP INDEX csr.uk_compliance_item_ref;
CREATE UNIQUE INDEX csr.uk_compliance_item_ref ON csr.compliance_item (
	app_sid,
	DECODE(compliance_item_type, 2, TO_CHAR("COMPLIANCE_ITEM_ID"), DECODE("SOURCE", 0, NVL("REFERENCE_CODE", TO_CHAR("COMPLIANCE_ITEM_ID")), TO_CHAR("COMPLIANCE_ITEM_ID")))
);
ALTER TABLE csr.compliance_permit ADD (
	site_commissioning_required 	NUMBER(1) DEFAULT 0 NOT NULL,
	site_commissioning_dtm 			DATE NULL
);
ALTER TABLE csrimp.compliance_permit ADD (
	site_commissioning_required 	NUMBER(1) NOT NULL,
	site_commissioning_dtm 			DATE NULL
);
ALTER TABLE chain.company_request_action ADD CONSTRAINT chk_company_request_action
	CHECK (action IN (1, 2, 3));
	
ALTER TABLE chain.company_request_action ADD CONSTRAINT chk_action_matched
	CHECK ((action = 3 AND matched_company_sid IS NOT NULL) OR matched_company_sid IS NULL);
ALTER TABLE chain.company_request_action ADD CONSTRAINT fk_req_act_cmpny_sid
	FOREIGN KEY (app_sid, company_sid) REFERENCES chain.company (app_sid, company_sid);
	
ALTER TABLE chain.company_request_action ADD CONSTRAINT fk_req_act_mtchd_cmpny_sid
	FOREIGN KEY (app_sid, matched_company_sid) REFERENCES chain.company (app_sid, company_sid);
ALTER TABLE csrimp.chain_company_request_action ADD CONSTRAINT chk_company_request_action
	CHECK (action IN (1, 2, 3));
ALTER TABLE csrimp.chain_company_request_action ADD CONSTRAINT fk_chain_cmpny_rqst_action_is
	FOREIGN KEY (csrimp_session_id) REFERENCES csrimp.csrimp_session (csrimp_session_id) ON DELETE CASCADE;
ALTER TABLE CSR.METER_RAW_DATA_IMPORT_JOB ADD (
	RAW_DATA_SOURCE_ID		NUMBER(10)
);
ALTER TABLE CSR.BATCH_JOB ADD (
	IN_ORDER_GROUP			VARCHAR2(256)
);
ALTER TABLE CSR.TEMP_METER_READING_ROWS MODIFY (
	UNIT_OF_MEASURE			VARCHAR2(256)
);
ALTER TABLE CHAIN.PRODUCT_COMPANY_ALERT ADD CONSTRAINT FK_PRODUCT_COMPANY_ALERT_PROD
	FOREIGN KEY (APP_SID, COMPANY_PRODUCT_ID) REFERENCES CHAIN.COMPANY_PRODUCT (APP_SID, PRODUCT_ID);
ALTER TABLE CHAIN.PRODUCT_COMPANY_ALERT ADD CONSTRAINT FK_PRODUCT_COMPANY_ALERT_CPNYP
	FOREIGN KEY (APP_SID, PURCHASER_COMPANY_SID) REFERENCES CHAIN.COMPANY (APP_SID, COMPANY_SID);
ALTER TABLE CHAIN.PRODUCT_COMPANY_ALERT ADD CONSTRAINT FK_PRODUCT_COMPANY_ALERT_CPNYS
	FOREIGN KEY (APP_SID, SUPPLIER_COMPANY_SID) REFERENCES CHAIN.COMPANY (APP_SID, COMPANY_SID);
ALTER TABLE CHAIN.PRODUCT_COMPANY_ALERT ADD CONSTRAINT FK_PRODUCT_COMPANY_ALERT_USER
	FOREIGN KEY (APP_SID, USER_SID) REFERENCES CHAIN.CHAIN_USER (APP_SID, USER_SID);
CREATE INDEX CHAIN.IX_PRODUCT_COMPANY_ALERT_PROD ON CHAIN.PRODUCT_COMPANY_ALERT (APP_SID, COMPANY_PRODUCT_ID);
CREATE INDEX CHAIN.IX_PRODUCT_COMPANY_ALERT_CPNYP ON CHAIN.PRODUCT_COMPANY_ALERT (APP_SID, PURCHASER_COMPANY_SID);
CREATE INDEX CHAIN.IX_PRODUCT_COMPANY_ALERT_CPNYS ON CHAIN.PRODUCT_COMPANY_ALERT (APP_SID, SUPPLIER_COMPANY_SID);
CREATE INDEX CHAIN.IX_PRODUCT_COMPANY_ALERT_USER ON CHAIN.PRODUCT_COMPANY_ALERT (APP_SID, USER_SID);
ALTER TABLE chain.customer_aggregate_type DROP CONSTRAINT chk_customer_aggregate_type;
DROP INDEX chain.uk_customer_aggregate_type;
ALTER TABLE chain.customer_aggregate_type ADD (
	cust_filt_item_agg_type_id		NUMBER(10, 0),
	CONSTRAINT fk_cust_agg_typ_cust_filt_item FOREIGN KEY (app_sid, cust_filt_item_agg_type_id) REFERENCES chain.cust_filt_item_agg_type (app_sid, cust_filt_item_agg_type_id),
	CONSTRAINT chk_customer_aggregate_type 
	CHECK ((
		CASE WHEN cms_aggregate_type_id			IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN initiative_metric_id			IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ind_sid						IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN filter_page_ind_interval_id	IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN meter_aggregate_type_id		IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN score_type_agg_type_id		IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN cust_filt_item_agg_type_id	IS NOT NULL THEN 1 ELSE 0 END
	) = 1)
);
CREATE UNIQUE INDEX chain.uk_customer_aggregate_type ON chain.customer_aggregate_type (
		app_sid, card_group_id, cms_aggregate_type_id, initiative_metric_id, ind_sid, filter_page_ind_interval_id, meter_aggregate_type_id, score_type_agg_type_id, cust_filt_item_agg_type_id)
;
ALTER TABLE csrimp.chain_customer_aggregate_type DROP CONSTRAINT chk_customer_aggregate_type;
DROP INDEX csrimp.uk_customer_aggregate_type;
ALTER TABLE csrimp.chain_customer_aggregate_type ADD (
	cust_filt_item_agg_type_id		NUMBER(10, 0)
);
create index chain.ix_customer_aggr_cust_filt_ite on chain.customer_aggregate_type (app_sid, cust_filt_item_agg_type_id);
create index chain.ix_cust_filt_col_card_group_id on chain.customer_filter_column (card_group_id);
create index chain.ix_cust_filt_itm_card_group_id on chain.customer_filter_item (card_group_id);
ALTER TABLE chain.customer_options
  ADD create_one_flow_item_for_comp NUMBER(1, 0) DEFAULT (1) NOT NULL;
ALTER TABLE chain.customer_options
  ADD CONSTRAINT chk_create_one_flow_item CHECK(create_one_flow_item_for_comp IN (0, 1));
ALTER TABLE csrimp.chain_customer_options
  ADD create_one_flow_item_for_comp NUMBER(1, 0) NOT NULL;
ALTER TABLE csrimp.chain_customer_options
  ADD CONSTRAINT chk_create_one_flow_item CHECK(create_one_flow_item_for_comp IN (0, 1));
ALTER TABLE csr.issue_type ADD
(
	allow_critical	NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT chk_allow_critical CHECK(allow_critical IN (0,1))
);
ALTER TABLE csr.issue ADD
(
	is_critical	NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT chk_is_critical CHECK(is_critical IN (0,1))
);
ALTER TABLE csr.issue_scheduled_task ADD
(
	create_critical	NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT chk_create_critical CHECK(create_critical IN (0,1))
);
ALTER TABLE csr.temp_issue_search ADD
(
	allow_critical	NUMBER(1),
	is_critical	NUMBER(1)
);
ALTER TABLE csrimp.issue_type ADD
(
	allow_critical	NUMBER(1) NOT NULL,
	CONSTRAINT chk_allow_critical CHECK(allow_critical IN (0,1))
);
ALTER TABLE csrimp.issue ADD
(
	is_critical	NUMBER(1) NOT NULL,
	CONSTRAINT chk_is_critical CHECK(is_critical IN (0,1))
);
ALTER TABLE csrimp.issue_scheduled_task ADD
(
	create_critical	NUMBER(1) NOT NULL,
	CONSTRAINT chk_create_critical CHECK(create_critical IN (0,1))
);
ALTER TABLE CSR.SCORE_TYPE_AGG_TYPE ADD APPLIES_TO_AUDITS NUMBER(1) DEFAULT 0 NOT NULL;
ALTER TABLE CSR.SCORE_TYPE_AGG_TYPE DROP CONSTRAINT CHK_SCORE_TYPE_AGG_TYPE;
ALTER TABLE CSR.SCORE_TYPE_AGG_TYPE ADD CONSTRAINT CHK_SCORE_TYPE_AGG_TYPE CHECK(
	(APPLIES_TO_NC_SCORE = 1 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 0 AND IA_TYPE_SURVEY_GROUP_ID IS NULL AND APPLIES_TO_AUDITS = 0) OR
	(APPLIES_TO_NC_SCORE = 0 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 1 AND IA_TYPE_SURVEY_GROUP_ID IS NULL AND APPLIES_TO_AUDITS = 0) OR
	(APPLIES_TO_NC_SCORE = 0 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 0 AND IA_TYPE_SURVEY_GROUP_ID IS NOT NULL AND APPLIES_TO_AUDITS = 0) OR
	(APPLIES_TO_NC_SCORE = 0 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 0 AND IA_TYPE_SURVEY_GROUP_ID IS NULL AND APPLIES_TO_AUDITS = 1)
);
ALTER TABLE CSRIMP.SCORE_TYPE_AGG_TYPE ADD APPLIES_TO_AUDITS NUMBER(1) NOT NULL;
ALTER TABLE CSRIMP.SCORE_TYPE_AGG_TYPE DROP CONSTRAINT CHK_SCORE_TYPE_AGG_TYPE;
ALTER TABLE CSRIMP.SCORE_TYPE_AGG_TYPE ADD CONSTRAINT CHK_SCORE_TYPE_AGG_TYPE CHECK(
	(APPLIES_TO_NC_SCORE = 1 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 0 AND IA_TYPE_SURVEY_GROUP_ID IS NULL AND APPLIES_TO_AUDITS = 0) OR
	(APPLIES_TO_NC_SCORE = 0 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 1 AND IA_TYPE_SURVEY_GROUP_ID IS NULL AND APPLIES_TO_AUDITS = 0) OR
	(APPLIES_TO_NC_SCORE = 0 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 0 AND IA_TYPE_SURVEY_GROUP_ID IS NOT NULL AND APPLIES_TO_AUDITS = 0) OR
	(APPLIES_TO_NC_SCORE = 0 AND APPLIES_TO_PRIMARY_AUDIT_SURVY = 0 AND IA_TYPE_SURVEY_GROUP_ID IS NULL AND APPLIES_TO_AUDITS = 1)
);
BEGIN
	EXECUTE IMMEDIATE 'ALTER TABLE csr.issue DROP CONSTRAINT CHK_ISSUE_FKS';
EXCEPTION 
	WHEN OTHERS THEN NULL;
END;
/
ALTER TABLE csr.issue ADD (
	issue_due_source_id				NUMBER(10,0) NULL,
	issue_due_offset_days			NUMBER(10,0) NULL,
	issue_due_offset_months			NUMBER(10,0) NULL,
	issue_due_offset_years			NUMBER(10,0) NULL,
	permit_id						NUMBER(10,0) NULL,
	CONSTRAINT CHK_ISSUE_FKS CHECK (
		CASE WHEN ISSUE_PENDING_VAL_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_SHEET_VALUE_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_SURVEY_ANSWER_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_NON_COMPLIANCE_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_ACTION_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_METER_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_METER_ALARM_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_METER_RAW_DATA_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_METER_DATA_SOURCE_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_METER_MISSING_DATA_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_SUPPLIER_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_INITIATIVE_ID IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN ISSUE_COMPLIANCE_REGION_ID IS NOT NULL OR PERMIT_ID IS NOT NULL THEN 1 ELSE 0 END
		IN (0, 1)
	)
);
ALTER TABLE csr.issue ADD CONSTRAINT fk_issue_issue_due_source 
	FOREIGN KEY (app_sid, issue_due_source_id) 
	REFERENCES csr.issue_due_source (app_sid, issue_due_source_id);
ALTER TABLE csr.issue ADD CONSTRAINT fk_issue_permit
	FOREIGN KEY (app_sid, permit_id) 
	REFERENCES csr.compliance_permit (app_sid, compliance_permit_id);
CREATE INDEX csr.issue_issue_due_source ON csr.issue(app_sid, issue_due_source_id);
CREATE INDEX csr.issue_permit ON csr.issue(app_sid, permit_id);
ALTER TABLE csrimp.issue ADD (
	issue_due_source_id				NUMBER(10,0) NULL,
	issue_due_offset_days			NUMBER(10,0) NULL,
	issue_due_offset_months			NUMBER(10,0) NULL,
	issue_due_offset_years			NUMBER(10,0) NULL,
	permit_id						NUMBER(10,0) NULL 
);
ALTER TABLE csr.compliance_permit_application ADD (
	compl_permit_app_status_id	NUMBER(1) DEFAULT 0 NOT NULL,
	CONSTRAINT fk_compl_permit_app_status_id FOREIGN KEY (compl_permit_app_status_id) REFERENCES csr.compl_permit_app_status (compl_permit_app_status_id)
);
CREATE INDEX csr.ix_cpa_stat 
	ON csr.compliance_permit_application (compl_permit_app_status_id);
ALTER TABLE csrimp.compliance_permit_application ADD (
	compl_permit_app_status_id	NUMBER(1) NOT NULL
);
ALTER TABLE csr.score_type ADD applies_to_supp_rels NUMBER(1, 0) DEFAULT 0 NOT NULL;
ALTER TABLE csr.score_type ADD CONSTRAINT chk_score_type_appl_suprel CHECK (applies_to_supp_rels IN (0,1));
ALTER TABLE csr.score_type ADD CONSTRAINT chk_score_type_not_sup_and_sr CHECK (applies_to_supplier = 0 OR applies_to_supp_rels = 0);
ALTER TABLE csrimp.score_type ADD applies_to_supp_rels NUMBER(1, 0) NOT NULL;
ALTER TABLE csrimp.score_type ADD CONSTRAINT chk_score_type_appl_suprel CHECK (applies_to_supp_rels IN (0,1));
ALTER TABLE csrimp.score_type ADD CONSTRAINT chk_score_type_not_sup_and_sr CHECK (applies_to_supplier = 0 OR applies_to_supp_rels = 0);
ALTER TABLE chain.supplier_relationship_score ADD CONSTRAINT fk_supplier_rel_score_rel
	FOREIGN KEY (app_sid, purchaser_company_sid, supplier_company_sid)
	REFERENCES chain.supplier_relationship (app_sid, purchaser_company_sid, supplier_company_sid);
	
ALTER TABLE csr.tpl_report_tag 
    ADD TPL_REPORT_TAG_QC_ID NUMBER(10,0);
ALTER TABLE csr.tpl_report_tag 
    ADD CONSTRAINT fk_tpl_report_tag_qc_data 
        FOREIGN KEY (app_sid, tpl_report_tag_qc_id)
	    REFERENCES csr.tpl_report_tag_qchart (app_sid, tpl_report_tag_qchart_id) DEFERRABLE INITIALLY DEFERRED;
CREATE SEQUENCE csr.tpl_report_tag_qc_id_seq;
ALTER TABLE csrimp.tpl_report_tag 
    ADD tpl_report_tag_qc_id NUMBER(10,0);
CREATE index csr.ix_tpl_report_tag_trtqc on csr.TPL_REPORT_TAG(APP_SID, TPL_REPORT_TAG_QC_ID);
ALTER TABLE csr.tpl_report_tag DROP CONSTRAINT ct_tpl_report_tag;
ALTER TABLE csrimp.tpl_report_tag DROP CONSTRAINT ct_tpl_report_tag;
ALTER TABLE csr.tpl_report_tag ADD CONSTRAINT CT_TPL_REPORT_TAG CHECK (
    (tag_type IN (1,4,5) AND tpl_report_tag_ind_id IS NOT NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 6 AND tpl_report_tag_eval_id IS NOT NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type IN (2,3,101) AND tpl_report_tag_dataview_id IS NOT NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 7 AND tpl_report_tag_logging_form_id IS NOT NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 8 AND tpl_rep_cust_tag_type_id IS NOT NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 9 AND tpl_report_tag_text_id IS NOT NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = -1 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 10 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NOT NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 11 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NOT NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 102 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NOT NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 103 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NOT NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 12 AND tpl_report_tag_qc_id IS NOT NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL)
);
ALTER TABLE csrimp.tpl_report_tag ADD CONSTRAINT CT_TPL_REPORT_TAG CHECK (
    (tag_type IN (1,4,5) AND tpl_report_tag_ind_id IS NOT NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 6 AND tpl_report_tag_eval_id IS NOT NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type IN (2,3,12,101) AND tpl_report_tag_dataview_id IS NOT NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 7 AND tpl_report_tag_logging_form_id IS NOT NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 8 AND tpl_rep_cust_tag_type_id IS NOT NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 9 AND tpl_report_tag_text_id IS NOT NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = -1 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 10 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NOT NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 11 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NOT NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 102 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NOT NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 103 AND tpl_report_tag_text_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_eval_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NOT NULL AND tpl_report_tag_reg_data_id IS NULL AND tpl_report_tag_qc_id IS NULL)
    OR (tag_type = 12 AND tpl_report_tag_qc_id IS NOT NULL AND tpl_report_tag_dataview_id IS NULL AND tpl_report_tag_ind_id IS NULL AND tpl_report_tag_eval_id IS NULL AND tpl_report_tag_logging_form_id IS NULL AND tpl_rep_cust_tag_type_id IS NULL AND tpl_report_tag_text_id IS NULL AND TPL_REPORT_NON_COMPL_ID IS NULL AND tpl_report_tag_app_note_id IS NULL AND tpl_report_tag_app_matrix_id IS NULL AND tpl_report_tag_reg_data_id IS NULL)
);
create index csr.ix_tpl_rep_qc_period_set_id on csr.tpl_report_tag_qchart (app_sid, period_set_id, period_interval_id);
create index csr.ix_tpl_rep_qc_saved_filt_id on csr.tpl_report_tag_qchart (app_sid, saved_filter_sid);
EXEC security.user_pkg.LogonAdmin;
DROP TYPE CHAIN.T_COMPANY_RELATIONSHIP_TABLE;
CREATE OR REPLACE TYPE CHAIN.T_COMPANY_RELATIONSHIP_ROW AS
	OBJECT (
		COMPANY_SID					NUMBER(10),
		NAME						VARCHAR(1000),
		COUNTRY_NAME				VARCHAR(1000),
		ACTIVE_RELATIONSHIP			NUMBER(1),
		EDITABLE_RELATIONSHIP		NUMBER(1),--Based on capabilities
		COMPANY_TYPE_DESCRIPTION	VARCHAR(1000),
		RELATIONSHIP_ROLE			NUMBER(1), --1 SUPPLIER, 2 PURCHASER
		HAS_READ_PERMS_ON_COMPANY	NUMBER(1),
		IS_PRIMARY					NUMBER(1),
		CAN_BE_PRIMARY				NUMBER(1)
	);
/
CREATE OR REPLACE TYPE CHAIN.T_COMPANY_RELATIONSHIP_TABLE AS 
	TABLE OF CHAIN.T_COMPANY_RELATIONSHIP_ROW;
/
ALTER TABLE chain.company_type_relationship ADD (
	can_be_primary			NUMBER(1) DEFAULT 0 NOT NULL
);
ALTER TABLE chain.supplier_relationship ADD (
	is_primary				NUMBER(1) DEFAULT 0 NOT NULL
);
ALTER TABLE chain.company_tab ADD (
	supplier_restriction	NUMBER(1) DEFAULT 0 NOT NULL
);
ALTER TABLE chain.company_type_relationship ADD (
	CONSTRAINT chk_cmp_type_rel_cbp CHECK (can_be_primary IN (1, 0))
);
ALTER TABLE chain.supplier_relationship ADD (
	CONSTRAINT chk_supp_rel_primary CHECK (is_primary IN (1, 0))
);
ALTER TABLE chain.company_tab ADD (
	CONSTRAINT chk_comp_tab_supp_res CHECK (supplier_restriction IN (0, 1, 2))
);
ALTER TABLE csrimp.chain_compan_type_relati ADD (
	can_be_primary			NUMBER(1)
);
ALTER TABLE csrimp.chain_supplier_relationship ADD (
	is_primary			NUMBER(1)
);
ALTER TABLE csrimp.chain_company_tab ADD (
	supplier_restriction			NUMBER(1)
);
UPDATE csrimp.chain_compan_type_relati SET can_be_primary = 0;
UPDATE csrimp.chain_supplier_relationship SET is_primary = 0;
UPDATE csrimp.chain_company_tab SET supplier_restriction = 0;
ALTER TABLE csrimp.chain_compan_type_relati MODIFY can_be_primary NOT NULL;
ALTER TABLE csrimp.chain_supplier_relationship MODIFY is_primary NOT NULL;
ALTER TABLE csrimp.chain_company_tab MODIFY supplier_restriction NOT NULL;
ALTER TABLE csr.auto_imp_importer_cms
MODIFY tab_sid NULL;
BEGIN
	-- Clear any that aren't actually tabs
	security.user_pkg.logonadmin();
	
	UPDATE csr.auto_imp_importer_cms
	   SET tab_sid = NULL
	 WHERE tab_sid NOT IN (
		SELECT tab_sid
		  FROM cms.tab
	 );
END;
/
alter table csr.customer add calc_start_dtm date default date '1990-01-01' not null;
alter table csr.customer add calc_end_dtm date default date '2021-01-01' not null;
alter table csrimp.customer add calc_start_dtm date not null;
alter table csrimp.customer add calc_end_dtm date not null;
	
ALTER TABLE CSR.METER_SOURCE_TYPE ADD (
	ALLOW_NULL_START_DTM		NUMBER(1) DEFAULT 0 NOT NULL
);
ALTER TABLE CSR.METER_INSERT_DATA MODIFY (
	START_DTM					TIMESTAMP WITH TIME ZONE	NULL
);
ALTER TABLE CSRIMP.METER_SOURCE_TYPE ADD (
	ALLOW_NULL_START_DTM		NUMBER(1) DEFAULT 0 NOT NULL
);
DROP INDEX CSR.UK_METER_SOURCE_DATA;
CREATE UNIQUE INDEX CSR.UK_METER_SOURCE_DATA ON CSR.METER_SOURCE_DATA(APP_SID, REGION_SID, METER_INPUT_ID, PRIORITY, START_DTM, END_DTM);


grant select,insert,update,delete on csrimp.question to tool_user;
grant select,insert,update,delete on csrimp.question_version to tool_user;
grant select,insert,update,delete on csrimp.question_option to tool_user;
grant select,insert,update,delete on csrimp.question_option_nc_tag to tool_user;
grant select,insert,update,delete on csrimp.question_tag to tool_user;
grant select,insert,update on csr.question to csrimp;
grant select,insert,update on csr.question_version to csrimp;
grant select,insert,update on csr.question_option to csrimp;
grant select,insert,update on csr.question_option_nc_tag to csrimp;
grant select,insert,update on csr.question_tag to csrimp;
GRANT SELECT ON csr.question_type TO chain;
grant select on csr.flow_capability to csrimp;
GRANT SELECT ON csr.internal_audit_type_id_seq TO chain;
GRANT INSERT ON csr.internal_audit_type TO chain;
GRANT SELECT, INSERT, UPDATE ON chain.company_request_action TO csrimp;
GRANT SELECT ON chain.company_request_action TO csr;
GRANT SELECT, INSERT, UPDATE, DELETE ON csrimp.chain_company_request_action TO tool_user;
CREATE INDEX chain.ix_company_reque_matched_compa on chain.company_request_action (app_sid, matched_company_sid);
GRANT SELECT, INSERT, UPDATE ON Chain.product_company_alert TO CSR;
GRANT SELECT, INSERT, UPDATE ON chain.product_company_alert TO csrimp;
GRANT SELECT, INSERT, UPDATE, DELETE ON csrimp.chain_product_company_alert TO tool_user;
grant select, insert, update, delete on csrimp.chain_cust_filter_column to tool_user;
grant select, insert, update, delete on csrimp.chain_custom_filter_item to tool_user;
grant select, insert, update, delete on csrimp.chain_cu_fil_ite_agg_typ to tool_user;
grant select, insert, update on chain.customer_filter_column to CSR;
grant select, insert, update on chain.customer_filter_item to CSR;
grant select, insert, update on chain.cust_filt_item_agg_type to CSR;
grant select on chain.customer_filter_column_id_seq to CSR;
grant select on chain.customer_filter_item_id_seq to CSR;
grant select on chain.cust_filt_item_agg_type_id_seq to CSR;
grant select, insert, update on chain.customer_filter_column to csrimp;
grant select, insert, update on chain.customer_filter_item to csrimp;
grant select, insert, update on chain.cust_filt_item_agg_type to csrimp;
grant select on chain.customer_filter_column_id_seq to csrimp;
grant select on chain.customer_filter_item_id_seq to csrimp;
grant select on chain.cust_filt_item_agg_type_id_seq to csrimp;
grant select,insert,update,delete on csrimp.issue_due_source to tool_user;
grant insert on csr.issue_due_source to csrimp;
grant select, insert, update, delete on csrimp.chain_suppl_relati_score to tool_user;
grant select, insert, update on chain.supplier_relationship_score to csrimp;
grant select on chain.supplier_rel_score_id_seq to csrimp;
grant select on chain.supplier_rel_score_id_seq to CSR;
grant select, insert, update on chain.supplier_relationship_score to CSR;
grant select on csr.tpl_report_tag_qc_id_seq to csrimp;
grant insert on csr.tpl_report_tag_qchart to csrimp;


ALTER TABLE chain.supplier_relationship_score ADD CONSTRAINT fk_sup_rel_score_type 
	FOREIGN KEY (app_sid, score_type_id)
	REFERENCES csr.score_type(app_sid, score_type_id);
ALTER TABLE chain.supplier_relationship_score ADD CONSTRAINT fk_sup_rel_score_thresh_id 
	FOREIGN KEY (app_sid, score_threshold_id)
	REFERENCES csr.score_threshold(app_sid, score_threshold_id);
	
CREATE INDEX chain.ix_rel_score_purch_suppl ON chain.supplier_relationship_score (app_sid, purchaser_company_sid, supplier_company_sid);
CREATE INDEX chain.ix_rel_score_type ON chain.supplier_relationship_score (app_sid, score_type_id);
CREATE INDEX chain.ix_rel_score_threshold ON chain.supplier_relationship_score (app_sid, score_threshold_id);
ALTER TABLE CSR.AUTO_IMP_IMPORTER_CMS ADD CONSTRAINT FK_AUTO_IMP_IMPORTER_CMS_TAB
    FOREIGN KEY (APP_SID, TAB_SID)
    REFERENCES CMS.TAB(APP_SID, TAB_SID)
;
CREATE INDEX csr.ix_auto_imp_impo_tab_sid ON csr.auto_imp_importer_cms (app_sid, tab_sid);
ALTER TABLE chain.supplier_relationship_score ADD CONSTRAINT fk_sup_rel_csr_user 
	FOREIGN KEY (app_sid, changed_by_user_sid)
	REFERENCES csr.csr_user(app_sid, csr_user_sid);
CREATE INDEX chain.ix_rel_score_csr_user ON chain.supplier_relationship_score (app_sid, changed_by_user_sid);


CREATE OR REPLACE VIEW csr.v$question AS
	SELECT qv.app_sid, qv.question_id, qv.question_version, qv.question_draft, qv.parent_id, qv.parent_version, qv.label, qv.pos, qv.score, qv.max_score, qv.upload_score, 
		qv.weight, qv.dont_normalise_score, qv.has_score_expression, qv.has_max_score_expr, qv.remember_answer, qv.count_question, qv.action,
		q.owned_by_survey_sid, q.question_type, q.custom_question_type_id, q.lookup_key, q.maps_to_ind_sid, q.measure_sid
	  FROM csr.question_version qv
	  JOIN csr.question q ON q.question_id = qv.question_id AND q.app_sid = qv.app_sid;
  
CREATE OR REPLACE VIEW csr.v$quick_survey_question AS
	SELECT qsq.question_id, qsq.question_version, qsq.survey_sid, qsq.survey_version, qsq.is_visible, q.label, q.parent_id, q.parent_version, q.pos, 
	  q.score, q.max_score, q.upload_score, q.weight, q.dont_normalise_score, q.has_score_expression, q.has_max_score_expr, q.remember_answer, q.count_question, 
	  q.action,	q.owned_by_survey_sid, q.question_type, q.custom_question_type_id, q.lookup_key, q.maps_to_ind_sid, q.measure_sid
	  FROM csr.quick_survey_question qsq
	  JOIN csr.v$question q ON qsq.question_id = q.question_id AND qsq.question_version = q.question_version AND qsq.app_sid = q.app_sid AND qsq.question_draft = q.question_draft AND (q.owned_by_survey_sid IS NULL OR q.owned_by_survey_sid = qsq.survey_sid)
	 WHERE qsq.question_draft = 0;
CREATE OR REPLACE VIEW CHAIN.v$questionnaire_share AS
	SELECT q.app_sid, q.questionnaire_id, q.component_id, q.questionnaire_type_id, q.created_dtm,
		   qs.due_by_dtm, qs.overdue_events_sent, qs.qnr_owner_company_sid, qs.share_with_company_sid,
		   qsle.share_log_entry_index, qsle.entry_dtm, qs.questionnaire_share_id, qs.reminder_sent_dtm,
		   qs.overdue_sent_dtm, qsle.share_status_id, ss.description share_status_name,
		   qsle.company_sid entry_by_company_sid, qsle.user_sid entry_by_user_sid, qsle.user_notes,
		   qt.class qt_class, qt.name questionnaire_name, qs.expiry_dtm,
		   CASE WHEN qs.expiry_dtm < SYSDATE THEN 1 ELSE 0 END has_expired,
		   q.rejected questionnaire_rejected,
		   CASE WHEN qsle.entry_dtm < qstle.entry_dtm THEN qstle.entry_dtm ELSE qsle.entry_dtm END status_entry_dtm
	  FROM questionnaire q
	  JOIN questionnaire_share qs ON q.app_sid = qs.app_sid AND q.questionnaire_id = qs.questionnaire_id
	  JOIN qnr_share_log_entry qsle ON qs.app_sid = qsle.app_sid AND qs.questionnaire_share_id = qsle.questionnaire_share_id
	  JOIN qnr_status_log_entry qstle ON q.app_sid = qstle.app_sid AND q.questionnaire_id = qstle.questionnaire_id
	  JOIN share_status ss ON qsle.share_status_id = ss.share_status_id
	  JOIN company s ON q.app_sid = s.app_sid AND q.company_sid = s.company_sid
	  JOIN questionnaire_type qt ON q.app_sid = qt.app_sid AND q.questionnaire_type_id = qt.questionnaire_type_id	 
	 WHERE s.deleted = 0
	   AND (								-- allows builtin admin to see relationships as well for debugging purposes
	   			qs.share_with_company_sid = NVL(SYS_CONTEXT('SECURITY', 'CHAIN_COMPANY'), qs.share_with_company_sid)
	   		 OR qs.qnr_owner_company_sid = NVL(SYS_CONTEXT('SECURITY', 'CHAIN_COMPANY'), qs.qnr_owner_company_sid)
	   	   )
	   AND (qsle.app_sid, qsle.questionnaire_share_id, qsle.share_log_entry_index) IN (   
	   			SELECT app_sid, questionnaire_share_id, MAX(share_log_entry_index)
	   			  FROM qnr_share_log_entry
	   			 GROUP BY app_sid, questionnaire_share_id
			)
	   AND qstle.status_log_entry_index = (   
	   			SELECT MAX(status_log_entry_index)
	   			  FROM qnr_status_log_entry
				 WHERE app_sid = qstle.app_sid
				   AND questionnaire_id = qstle.questionnaire_id
			)
;
CREATE OR REPLACE VIEW chain.v$company_request AS
	SELECT c.app_sid, c.company_sid, c.name, c.address_1, c.address_2, c.address_3, c.address_4,
		   c.state, c.city, c.postcode, c.country_code, c.phone, c.fax, c.website, c.email,
		   c.requested_by_user_sid, c.requested_by_company_sid
	  FROM company c
	 WHERE c.pending = 1
	    OR EXISTS (
			SELECT 1
			  FROM company_request_action
			 WHERE company_sid = c.company_sid
		   );
CREATE OR REPLACE VIEW chain.v$company AS
   	SELECT c.app_sid, c.company_sid, c.created_dtm, c.name, c.active, c.activated_dtm, c.deactivated_dtm,
   		   c.address_1, c.address_2, c.address_3, c.address_4, c.state, c.city, c.postcode, c.country_code,
   		   c.phone, c.fax, c.website, c.email, c.deleted, c.details_confirmed, c.stub_registration_guid, 
   		   c.allow_stub_registration, c.approve_stub_registration, c.mapping_approval_required, 
   		   c.user_level_messaging, c.sector_id,
   		   cou.name country_name, s.description sector_description, c.can_see_all_companies, c.company_type_id,
   		   ct.lookup_key company_type_lookup, ct.singular company_type_description, c.supp_rel_code_label, c.supp_rel_code_label_mand,
   		   c.parent_sid, p.name parent_name, p.country_code parent_country_code, pcou.name parent_country_name,
   		   c.country_is_hidden, cs.region_sid
   	  FROM company c
   	  LEFT JOIN postcode.country cou ON c.country_code = cou.country
   	  LEFT JOIN sector s ON c.sector_id = s.sector_id AND c.app_sid = s.app_sid
   	  LEFT JOIN company_type ct ON c.company_type_id = ct.company_type_id
   	  LEFT JOIN company p ON c.parent_sid = p.company_sid AND c.app_sid = p.app_sid
   	  LEFT JOIN postcode.country pcou ON p.country_code = pcou.country
   	  LEFT JOIN csr.supplier cs ON cs.company_sid = c.company_sid AND cs.app_sid = c.app_sid
   	 WHERE c.deleted = 0
   	   AND c.pending = 0;
		   
		   
		   
CREATE OR REPLACE VIEW chain.v$company_product AS
	SELECT cp.app_sid, cp.product_id, tr.description product_name, cp.company_sid, cp.product_type_id,
		   cp.sku, cp.lookup_key, cp.is_active
	  FROM chain.company_product cp
	  JOIN chain.company_product_tr tr ON tr.product_id = cp.product_id AND tr.lang = NVL(SYS_CONTEXT('SECURITY', 'LANGUAGE'), 'en');
CREATE OR REPLACE VIEW csr.v$simple_issue AS
	SELECT i.app_sid, i.issue_id, i.label, i.source_label, i.is_visible, i.source_url, i.region_sid, i.parent_id, i.is_critical,
	   CASE WHEN closed_by_user_sid IS NULL AND resolved_by_user_sid IS NULL AND rejected_by_user_sid IS NULL AND SYSDATE > due_dtm THEN 1 ELSE 0
	   END is_overdue,
	   CASE WHEN i.resolved_dtm IS NULL THEN 0 ELSE 1
	   END is_resolved,
	   CASE WHEN i.closed_dtm IS NULL THEN 0 ELSE 1
	   END is_closed,
	   CASE WHEN i.rejected_dtm IS NULL THEN 0 ELSE 1
	   END is_rejected
  FROM issue i;
  
CREATE OR REPLACE VIEW csr.v$issue AS
SELECT i.app_sid, NVL2(i.issue_ref, ist.internal_issue_ref_prefix || i.issue_ref, null) custom_issue_id, i.issue_id, i.label, i.description, i.source_label, i.is_visible, i.source_url, i.region_sid, re.description region_name, i.parent_id,
	   i.issue_escalated, i.owner_role_sid, i.owner_user_sid, cuown.user_name owner_user_name, cuown.full_name owner_full_name, cuown.email owner_email,
	   r2.name owner_role_name, i.first_issue_log_id, i.last_issue_log_id, NVL(lil.logged_dtm, i.raised_dtm) last_modified_dtm,
	   i.is_public, i.is_pending_assignment, i.rag_status_id, i.manual_completion_dtm, manual_comp_dtm_set_dtm, itrs.label rag_status_label, itrs.colour rag_status_colour,
	   raised_by_user_sid, raised_dtm, curai.user_name raised_user_name, curai.full_name raised_full_name, curai.email raised_email,
	   resolved_by_user_sid, resolved_dtm, cures.user_name resolved_user_name, cures.full_name resolved_full_name, cures.email resolved_email,
	   closed_by_user_sid, closed_dtm, cuclo.user_name closed_user_name, cuclo.full_name closed_full_name, cuclo.email closed_email,
	   rejected_by_user_sid, rejected_dtm, curej.user_name rejected_user_name, curej.full_name rejected_full_name, curej.email rejected_email,
	   assigned_to_user_sid, cuass.user_name assigned_to_user_name, cuass.full_name assigned_to_full_name, cuass.email assigned_to_email,
	   assigned_to_role_sid, r.name assigned_to_role_name, c.correspondent_id, c.full_name correspondent_full_name, c.email correspondent_email, c.phone correspondent_phone, 
	   c.more_info_1 correspondent_more_info_1, sysdate now_dtm, due_dtm, forecast_dtm, ist.issue_type_Id, ist.label issue_type_label, ist.require_priority, 
	   ist.allow_children, ist.can_set_public, ist.show_forecast_dtm, ist.require_var_expl, ist.enable_reject_action, ist.require_due_dtm_comment, 
	   ist.enable_manual_comp_date, ist.comment_is_optional, ist.due_date_is_mandatory, ist.is_region_editable is_issue_type_region_editable, i.issue_priority_id, 
	   ip.due_date_offset, ip.description priority_description,
	   CASE WHEN i.issue_priority_id IS NULL OR i.due_dtm = i.raised_dtm + ip.due_date_offset THEN 0 ELSE 1 END priority_overridden, 
	   i.first_priority_set_dtm, issue_pending_val_id, i.issue_sheet_value_id, issue_survey_answer_id, issue_non_compliance_Id, issue_action_id, issue_meter_id,
	   issue_meter_alarm_id, issue_meter_raw_data_id, issue_meter_data_source_id, issue_meter_missing_data_id, issue_supplier_id, issue_compliance_region_id,
	   CASE WHEN closed_by_user_sid IS NULL AND resolved_by_user_sid IS NULL AND rejected_by_user_sid IS NULL AND SYSDATE > NVL(forecast_dtm, due_dtm) THEN 1 ELSE 0
	   END is_overdue,
	   CASE WHEN rrm.user_sid = SYS_CONTEXT('SECURITY', 'SID') OR i.owner_user_sid = SYS_CONTEXT('SECURITY', 'SID') THEN 1 ELSE 0
	   END is_owner,
	   CASE WHEN assigned_to_user_sid = SYS_CONTEXT('SECURITY', 'SID') THEN 1 ELSE 0 --OR #### HOW + WHERE CAN I GET THE ROLES THE USER IS PART OF??
	   END is_assigned_to_you,
	   CASE WHEN i.resolved_dtm IS NULL AND i.manual_completion_dtm IS NULL THEN 0 ELSE 1
	   END is_resolved,
	   CASE WHEN i.closed_dtm IS NULL THEN 0 ELSE 1
	   END is_closed,
	   CASE WHEN i.rejected_dtm IS NULL THEN 0 ELSE 1
	   END is_rejected,
	   CASE
		WHEN i.closed_dtm IS NOT NULL THEN 'Closed'
		WHEN i.resolved_dtm IS NOT NULL THEN 'Resolved'
		WHEN i.rejected_dtm IS NOT NULL THEN 'Rejected'
		ELSE 'Ongoing'
	   END status,
	   CASE WHEN ist.auto_close_after_resolve_days IS NULL THEN NULL ELSE i.allow_auto_close END allow_auto_close, ist.auto_close_after_resolve_days,
	   ist.restrict_users_to_region, ist.deletable_by_administrator, ist.deletable_by_owner, ist.deletable_by_raiser, ist.send_alert_on_issue_raised,
	   ind.ind_sid, ind.description ind_name, isv.start_dtm, isv.end_dtm, ist.owner_can_be_changed, ist.show_one_issue_popup, ist.lookup_key, ist.allow_owner_resolve_and_close,
	   CASE WHEN ist.get_assignables_sp IS NULL THEN 0 ELSE 1 END get_assignables_overridden, ist.create_raw,
	   i.permit_id, i.issue_due_source_id, i.issue_due_offset_days, i.issue_due_offset_months, i.issue_due_offset_years, ids.source_description due_dtm_source_description,
	   CASE WHEN EXISTS(SELECT * 
						  FROM issue_due_source ids
						 WHERE ids.app_sid = i.app_sid 
						   AND ids.issue_type_id = i.issue_type_id)
			THEN 1 ELSE 0
	   END relative_due_dtm_enabled,
	   i.is_critical, ist.allow_critical
  FROM issue i, issue_type ist, csr_user curai, csr_user cures, csr_user cuclo, csr_user curej, csr_user cuass, csr_user cuown,  role r, role r2, correspondent c, issue_priority ip,
	   (SELECT * FROM region_role_member WHERE user_sid = SYS_CONTEXT('SECURITY', 'SID')) rrm, v$region re, issue_log lil, v$issue_type_rag_status itrs,
	   v$ind ind, issue_sheet_value isv, issue_due_source ids
 WHERE i.app_sid = curai.app_sid AND i.raised_by_user_sid = curai.csr_user_sid
   AND i.app_sid = ist.app_sid AND i.issue_type_Id = ist.issue_type_id
   AND i.app_sid = cures.app_sid(+) AND i.resolved_by_user_sid = cures.csr_user_sid(+)
   AND i.app_sid = cuclo.app_sid(+) AND i.closed_by_user_sid = cuclo.csr_user_sid(+)
   AND i.app_sid = curej.app_sid(+) AND i.rejected_by_user_sid = curej.csr_user_sid(+)
   AND i.app_sid = cuass.app_sid(+) AND i.assigned_to_user_sid = cuass.csr_user_sid(+)
   AND i.app_sid = cuown.app_sid(+) AND i.owner_user_sid = cuown.csr_user_sid(+)
   AND i.app_sid = r.app_sid(+) AND i.assigned_to_role_sid = r.role_sid(+)
   AND i.app_sid = r2.app_sid(+) AND i.owner_role_sid = r2.role_sid(+)
   AND i.app_sid = re.app_sid(+) AND i.region_sid = re.region_sid(+)
   AND i.app_sid = c.app_sid(+) AND i.correspondent_id = c.correspondent_id(+)
   AND i.app_sid = ip.app_sid(+) AND i.issue_priority_id = ip.issue_priority_id(+)
   AND i.app_sid = rrm.app_sid(+) AND i.region_sid = rrm.region_sid(+) AND i.owner_role_sid = rrm.role_sid(+)
   AND i.app_sid = lil.app_sid(+) AND i.last_issue_log_id = lil.issue_log_id(+)
   AND i.app_sid = itrs.app_sid(+) AND i.rag_status_id = itrs.rag_status_id(+) AND i.issue_type_id = itrs.issue_type_id(+)
   AND i.app_sid = isv.app_sid(+) AND i.issue_sheet_value_id = isv.issue_sheet_value_id(+)
   AND isv.app_sid = ind.app_sid(+) AND isv.ind_sid = ind.ind_sid(+)
   AND i.app_sid = ids.app_sid(+) AND i.issue_due_source_id = ids.issue_due_source_id(+)
   AND i.deleted = 0;

INSERT INTO csr.util_script (util_script_id,util_script_name,description,util_script_sp,wiki_article)
VALUES (33, 'Reset permit workflows', 'Resets the permit, permit application and permit condition workflows back to the default. Can be used to get the latest updates made to the default workflow','ResyncDefaultPermitFlows', 'W3092');
UPDATE csr.util_script
   SET wiki_article ='W3093'
 WHERE util_script_id = 30;
BEGIN
	INSERT INTO csr.batch_job_type (batch_job_type_id, description, sp, plugin_name, in_order, file_data_sp)
		 VALUES (61, 'Pending companies batch job', NULL, 'process-pending-company-records', 0, NULL);
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL;
END;
/
DECLARE
	v_card_id			chain.card.card_id%TYPE;
	v_desc				chain.card.description%TYPE;
	v_class				chain.card.class_type%TYPE;
	v_js_path			chain.card.js_include%TYPE;
	v_js_class			chain.card.js_class_type%TYPE;
	v_css_path			chain.card.css_include%TYPE;
	v_actions			chain.T_STRING_LIST;
BEGIN
	v_desc := 'Company Request Filter';
	v_class := 'Credit360.Chain.Cards.Filters.CompanyRequestFilter';
	v_js_path := '/csr/site/chain/companyRequest/filters/CompanyRequestFilter.js';
	v_js_class := 'Chain.companyRequest.filters.CompanyRequestFilter';
	v_css_path := '';
	
	BEGIN
		INSERT INTO chain.card (card_id, description, class_type, js_include, js_class_type, css_include)
		VALUES (chain.card_id_seq.NEXTVAL, v_desc, v_class, v_js_path, v_js_class, v_css_path)
		RETURNING card_id INTO v_card_id;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			UPDATE chain.card
			   SET description = v_desc, class_type = v_class, js_include = v_js_path, css_include = v_css_path
			 WHERE js_class_type = v_js_class
			RETURNING card_id INTO v_card_id;
	END;
	
	DELETE FROM chain.card_progression_action
	 WHERE card_id = v_card_id
	   AND action NOT IN ('default');
	
	v_actions := chain.T_STRING_LIST('default');
	
	FOR i IN v_actions.FIRST .. v_actions.LAST
	LOOP
		BEGIN
			INSERT INTO chain.card_progression_action (card_id, action)
			VALUES (v_card_id, v_actions(i));
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
END;
/
DECLARE
	v_card_id						NUMBER(10);
	v_audit_filter_card_id			NUMBER(10);
	v_sid							NUMBER(10);
BEGIN
	BEGIN
		INSERT INTO chain.card_group(card_group_id, name, description, helper_pkg, list_page_url)
		VALUES(61 /*chain.filter_pkg.FILTER_TYPE_COMPANY_REQUEST*/, 'Company Request Filter', 'Allows filtering of add company requests.', 'chain.company_request_report_pkg', '/csr/site/chain/companyRequest/companyRequestList.acds?savedFilterSid=');
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL;
	END;
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Chain.companyRequest.filters.CompanyRequestFilter';
	
	BEGIN	
		INSERT INTO chain.filter_type (filter_type_id,description,helper_pkg,card_id) 
		    VALUES (chain.filter_type_id_seq.NEXTVAL, 'Company Request Filter', 'chain.company_request_report_pkg', v_card_id);
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL;
	END;
	
	FOR r IN (
		SELECT app_sid FROM chain.customer_options
	) LOOP
		BEGIN
			INSERT INTO chain.card_group_card (app_sid, card_group_id, card_id, position)
					VALUES (r.app_sid, 61 /*chain.filter_pkg.FILTER_TYPE_COMPANY_REQUEST*/, v_card_id, 0);
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
	END LOOP;
END;
/
BEGIN
	BEGIN
		INSERT INTO chain.aggregate_type (card_group_id, aggregate_type_id, description)
		VALUES (61 /*chain.filter_pkg.FILTER_TYPE_COMPANY_REQUEST*/, 1 /*chain.company_request_report_pkg.AGG_TYPE_COUNT*/, 'Number of records');
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			NULL;
	END;
END;
/
DECLARE
	v_card_id	NUMBER(10);
BEGIN
	SELECT card_id
	  INTO v_card_id
	  FROM chain.card
	 WHERE js_class_type = 'Credit360.Property.Filters.PropertyIssuesFilter';
	
	BEGIN	
		INSERT INTO chain.filter_type (filter_type_id,description,helper_pkg,card_id) 
		    VALUES (chain.filter_type_id_seq.NEXTVAL, 'Property Issues Filter', 'csr.property_report_pkg', v_card_id);
	EXCEPTION
		WHEN dup_val_on_index THEN
			NULL;
	END;
END;
/
BEGIN
	UPDATE csr.batch_job_type 
	   SET in_order = 1 
	 WHERE plugin_name = 'meter-raw-data-import';
END;
/
DECLARE
	v_alert_id NUMBER := 5030;
	v_group_id NUMBER := 8;
BEGIN
	-- Supplier Company associated with Product alert
	BEGIN
		INSERT INTO csr.std_alert_type (std_alert_type_id, description, send_trigger, sent_from, std_alert_type_group_id) VALUES (v_alert_id,
		'Supplier Company associated with Product alert',
		'Sent on a scheduled basis for suppliers to review their data.',
		'The configured system e-mail address (this defaults to support@credit360.com, but can be changed from the site setup page).',
		v_group_id);
	EXCEPTION
		WHEN dup_val_on_index THEN
			UPDATE csr.std_alert_type SET
				description = 'Supplier Company associated with Product alert',
				send_trigger = 'Sent on a scheduled basis for suppliers to review their data.',
				sent_from = 'The configured system e-mail address (this defaults to support@credit360.com, but can be changed from the site setup page).'
			WHERE std_alert_type_id = v_alert_id;
	END;
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'TO_NAME', 'To full name', 'The name of the user the alert is being sent to', 1);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'TO_FRIENDLY_NAME', 'To friendly name', 'The friendly name of the user the alert is being sent to', 2);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'TO_EMAIL', 'To e-mail', 'The e-mail address of the user the alert is being sent to', 3);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'PRODUCT_ID', 'Product Id', 'The product id the alert is being sent for', 4);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'PRODUCT_NAME', 'Product Name', 'The product the alert is being sent for', 5);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'PURCHASER_COMPANY_NAME', 'Purchaser Company', 'The company to which the product is supplied to', 6);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'PURCHASER_COMPANY_SID', 'Purchaser Company Sid', 'The purchasing company sid with which the product has been associated to', 7);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'SUPPLIER_COMPANY_NAME', 'Supplier Company', 'The company from which the product is supplied', 8);
	INSERT INTO csr.std_alert_type_param (std_alert_type_id, repeats, field_name, description, help_text, display_pos)
	VALUES (v_alert_id, 0, 'SUPPLIER_COMPANY_SID', 'Supplier Company Sid', 'The supplier company sid with which the product has been associated to', 9);
	
	-- Run Setup-SuperAdmin-Utility Scripts-"Add missing alert" for id 5030 if you want to use this alert.
END;
/
INSERT INTO csr.batch_job_type (batch_job_type_id, description, sp, plugin_name, in_order, file_data_sp, timeout_mins)
VALUES (62, 'Product type translations export', null, 'batch-exporter', 0, null, 120);
INSERT INTO csr.batch_job_type (batch_job_type_id, description, sp, plugin_name, in_order, file_data_sp, timeout_mins)
VALUES (63, 'Product type translations import', null, 'batch-importer', 0, null, 120);
INSERT INTO csr.batched_export_type (BATCH_JOB_TYPE_ID, LABEL, ASSEMBLY)
VALUES (62, 'Product type translation export', 'Credit360.ExportImport.Export.Batched.Exporters.ProductTypeTranslationExporter');
INSERT INTO csr.batched_import_type (BATCH_JOB_TYPE_ID, LABEL, ASSEMBLY)
VALUES (63, 'Product type translation import', 'Credit360.ExportImport.Import.Batched.Importers.Translations.ProductTypeTranslationImporter');
BEGIN
	security.user_pkg.LogonAdmin;
	UPDATE chain.customer_options
	   SET create_one_flow_item_for_comp = 0;
	security.user_pkg.LogOff(SYS_CONTEXT('SECURITY', 'ACT'));
END;
/
INSERT INTO csr.issue_action_type (ISSUE_ACTION_TYPE_ID, DESCRIPTION)
VALUES (23, 'Critical status changed');
UPDATE csr.issue_type SET allow_critical = 1 WHERE issue_type_id = 22;
BEGIN
	INSERT INTO chain.card_group (card_group_id, name, description, helper_pkg, list_page_url)
	VALUES (59, 'Question Library Filter', 'Allows filtering of question library questions.', 'csr.question_library_report_pkg', '/csr/site/quickSurvey/library/Library.acds?savedFilterSid=');
EXCEPTION
	WHEN dup_val_on_index THEN
		NULL;
END;
/
INSERT INTO csr.flow_state_nature (FLOW_STATE_NATURE_ID, FLOW_ALERT_CLASS, LABEL) VALUES (29, 'permit', 'Refused');
INSERT INTO csr.flow_state_nature (FLOW_STATE_NATURE_ID, FLOW_ALERT_CLASS, LABEL) VALUES (30, 'application', 'Withdrawn');
BEGIN
	INSERT INTO csr.plugin
		(plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details, preview_image_path)
	VALUES
		(csr.plugin_id_seq.NEXTVAL, 11, 'Supplier relationship scores', '/csr/site/chain/managecompany/controls/SuppRelScoreHeader.js',
		 'Chain.ManageCompany.SuppRelScoreHeader', 'Credit360.Chain.Plugins.SuppRelScoreHeaderDto',
		 'This header shows any scores on the relationship between the company you are logged in as and the company you are viewing.',
		 '/csr/shared/plugins/screenshots/supplier_relationship_scores.png');
EXCEPTION
	WHEN dup_val_on_index THEN
		NULL;
END;
/
CREATE OR REPLACE PROCEDURE chain.Temp_RegisterCapability (
	in_capability_type			IN  NUMBER,
	in_capability				IN  VARCHAR2, 
	in_perm_type				IN  NUMBER,
	in_is_supplier				IN  NUMBER DEFAULT 0
)
AS
	v_count						NUMBER(10);
	v_ct						NUMBER(10);
BEGIN
	IF in_capability_type = 10 /*chain_pkg.CT_COMPANIES*/ THEN
		Temp_RegisterCapability(1 /*chain_pkg.CT_COMPANY*/, in_capability, in_perm_type);
		Temp_RegisterCapability(2 /*chain_pkg.CT_SUPPLIERS*/, in_capability, in_perm_type, 1);
		RETURN;	
	END IF;
	
	IF in_capability_type = 1 AND in_is_supplier <> 0 /* chain_pkg.IS_NOT_SUPPLIER_CAPABILITY */ THEN
		RAISE_APPLICATION_ERROR(-20001, 'Company capabilities cannot be supplier centric');
	ELSIF in_capability_type = 2 /* chain_pkg.CT_SUPPLIERS */ AND in_is_supplier <> 1 /* chain_pkg.IS_SUPPLIER_CAPABILITY */ THEN
		RAISE_APPLICATION_ERROR(-20001, 'Supplier capabilities must be supplier centric');
	END IF;
	
	SELECT COUNT(*)
	  INTO v_count
	  FROM chain.capability
	 WHERE capability_name = in_capability
	   AND capability_type_id = in_capability_type
	   AND perm_type = in_perm_type;
	
	IF v_count > 0 THEN
		-- this is already registered
		RETURN;
	END IF;
	
	SELECT COUNT(*)
	  INTO v_count
	  FROM chain.capability
	 WHERE capability_name = in_capability
	   AND perm_type <> in_perm_type;
	
	IF v_count > 0 THEN
		RAISE_APPLICATION_ERROR(security.security_pkg.ERR_ACCESS_DENIED, 'A capability named '''||in_capability||''' already exists using a different permission type');
	END IF;
	
	SELECT COUNT(*)
	  INTO v_count
	  FROM chain.capability
	 WHERE capability_name = in_capability
	   AND (
			(capability_type_id = 0 /*chain_pkg.CT_COMMON*/ AND (in_capability_type = 0 /*chain_pkg.CT_COMPANY*/ OR in_capability_type = 2 /*chain_pkg.CT_SUPPLIERS*/))
			 OR (in_capability_type = 0 /*chain_pkg.CT_COMMON*/ AND (capability_type_id = 1 /*chain_pkg.CT_COMPANY*/ OR capability_type_id = 2 /*chain_pkg.CT_SUPPLIERS*/))
		   );
	
	IF v_count > 0 THEN
		RAISE_APPLICATION_ERROR(security.security_pkg.ERR_ACCESS_DENIED, 'A capability named '''||in_capability||''' is already registered as a different capability type');
	END IF;
	
	INSERT INTO chain.capability 
	(capability_id, capability_name, capability_type_id, perm_type, is_supplier) 
	VALUES 
	(chain.capability_id_seq.NEXTVAL, in_capability, in_capability_type, in_perm_type, in_is_supplier);
	
END;
/
BEGIN
	chain.Temp_RegisterCapability(
		in_capability_type	=> 3,  															/* CT_ON_BEHALF_OF*/
		in_capability		=> 'Set primary purchaser in a relationship between A and B', 	/* SET_PRIMARY_PRCHSR */
		in_perm_type		=> 1, 															/* BOOLEAN_PERMISSION */
		in_is_supplier		=> 1
	);
END;
/
DROP PROCEDURE chain.Temp_RegisterCapability;
BEGIN
	INSERT INTO csr.plugin
		(plugin_id, plugin_type_id, description, js_include, js_class, cs_class, details, preview_image_path)
	VALUES
		(csr.plugin_id_seq.NEXTVAL, 11, 'Primary purchasers', '/csr/site/chain/managecompany/controls/PrimaryPurchasersHeader.js',
			'Chain.ManageCompany.PrimaryPurchasersHeader', 'Credit360.Chain.Plugins.PrimaryPurchasersHeaderDto',
			'This header shows any primary purchasers for a company.',
			'/csr/shared/plugins/screenshots/company_header_primary_purchasers.png');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		NULL;
END;
/
DECLARE
	v_old_meter_source_type_id		csr.meter_source_type.meter_source_type_id%TYPE;
	v_new_meter_source_type_id		csr.meter_source_type.meter_source_type_id%TYPE;
	v_next_meter_source_type_id		csr.meter_source_type.meter_source_type_id%TYPE;
BEGIN
	FOR c IN (
		SELECT host
		  FROM csr.customer
		 WHERE host IN (
		 	'adobe.credit360.com',
		 	'jmfamily.credit360.com')
	) LOOP
		
		security.user_pkg.logonadmin(c.host);
		BEGIN
			SELECT meter_source_type_id
			  INTO v_new_meter_source_type_id
			  FROM csr.meter_source_type
			 WHERE app_sid = SYS_CONTEXT('SECURITY', 'APP')
			   AND name = 'period-null-start-dtm';
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				SELECT NVL(MAX(meter_source_type_id), 0) + 1
				  INTO v_next_meter_source_type_id
				  FROM csr.meter_source_type
				 WHERE app_sid = SYS_CONTEXT('SECURITY', 'APP');
				v_new_meter_source_type_id := v_next_meter_source_type_id;
				
				INSERT INTO csr.meter_source_type (app_sid, meter_source_type_id, name, description,
					arbitrary_period, add_invoice_data, show_in_meter_list, allow_null_start_dtm)
				VALUES (security.security_pkg.GetAPP, v_new_meter_source_type_id, 
					'period-null-start-dtm', 'Allow null start date', 1, 0, 1, 1);
		END;
		BEGIN
			SELECT meter_source_type_id
			  INTO v_old_meter_source_type_id
			  FROM csr.meter_source_type
			 WHERE app_sid = SYS_CONTEXT('SECURITY', 'APP')
			   AND name = 'period';
			UPDATE csr.all_meter
			   SET meter_source_type_id = v_new_meter_source_type_id
			 WHERE app_sid = SYS_CONTEXT('SECURITY', 'APP')
			   AND meter_source_type_id = v_old_meter_source_type_id
			   AND manual_data_entry = 0;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				NULL;
		END;
		security.user_pkg.logonadmin;
	END LOOP;
END;
/
BEGIN
	INSERT INTO csr.module (module_id, module_name, enable_sp, description, license_warning)
	VALUES (96, 'Metering - Urjanet start date kludge', 'EnableUrjanetStartDateKludge', 
		'Enable the Urjanet "null start date kludge". This adds a source type called "Allow null start date" which will allow reading data with a null start date to be processed for meters with this source type.', 1);
END;
/

CREATE OR REPLACE TYPE CHAIN.T_SID_AND_DESCRIPTION_ROW AS 
  OBJECT ( 
	pos				NUMBER(10,0),
	sid_id 			NUMBER(10,0),
	description		VARCHAR2(2047)
  );
/
CREATE OR REPLACE TYPE CHAIN.T_SID_AND_DESCRIPTION_TABLE AS 
  TABLE OF CHAIN.T_SID_AND_DESCRIPTION_ROW;
/
CREATE OR REPLACE PACKAGE csr.question_library_report_pkg AS END;
/

GRANT EXECUTE ON csr.question_library_report_pkg TO web_user;
GRANT EXECUTE ON csr.question_library_report_pkg TO chain;

@..\quick_survey_pkg
@..\schema_pkg
@..\permit_pkg
@..\automated_import_pkg
@..\plugin_pkg
@..\chain\plugin_pkg
@..\chain\test_product_data_pkg
@..\util_script_pkg
@..\flow_pkg
@..\batch_job_pkg
@..\chain\chain_pkg
@..\chain\company_pkg
@..\chain\filter_pkg
@..\chain\company_request_report_pkg
@..\chain\company_dedupe_pkg
@..\meter_monitor_pkg
@..\chain\scheduled_alert_pkg
@..\quick_survey_report_pkg
@..\chain\product_type_pkg
@..\section_pkg
@..\chain\supplier_flow_pkg
@..\csr_data_pkg
@..\issue_pkg
@..\compliance_pkg
@..\initiative_pkg
@..\meter_pkg
@..\property_pkg
@..\supplier_pkg
@..\teamroom_pkg
@..\factor_pkg
@..\factor_set_group_pkg
@..\question_library_report_pkg
@..\chain\certification_report_pkg
@..\training_pkg
@..\templated_report_pkg
@..\chain\company_type_pkg
@..\chain\company_filter_pkg
@..\calc_pkg
@..\enable_pkg


@..\csr_app_body
@..\quick_survey_body
@..\csrimp\imp_body
@..\schema_body
@..\chain\higg_body
@..\chain\higg_setup_body
@..\testdata_body
@..\compliance_body
@..\enable_body
@..\permit_body
@..\compliance_setup_body
@..\automated_import_body
@..\plugin_body
@..\chain\plugin_body
@..\chain\chain_body
@..\chain\test_product_data_body
@..\flow_body 
@..\util_script_body
@..\chain\questionnaire_body
@..\permit_report_body
@..\batch_job_body
@..\chain\company_body
@..\chain\setup_body
@..\chain\company_request_report_body
@..\chain\company_filter_body
@..\chain\company_user_body
@..\chain\product_body
@..\audit_body
@..\chain\business_relationship_body
@..\chain\chain_link_body
@..\chain\dashboard_body
@..\chain\dedupe_preprocess_body
@..\chain\dev_body
@..\chain\flow_form_body
@..\chain\type_capability_body
@..\supplier_body
@..\chain\company_dedupe_body
@..\meter_body
@..\meter_monitor_body
@..\meter_patch_body
@..\chain\company_product_body
@..\chain\scheduled_alert_body
@..\chain\filter_body
@..\quick_survey_report_body
@..\chain\product_type_body
@..\initiative_project_body
@..\audit_report_body
@..\section_body
@..\chain\supplier_flow_body
@..\issue_body
@..\initiative_body
@..\property_body
@..\teamroom_body
@..\issue_report_body
@..\ssp_body
@..\factor_body
@..\factor_set_group_body
@..\templated_report_body
@..\indicator_body
@..\chain\company_type_body
@..\question_library_report_body
@..\non_compliance_report_body
@..\compliance_library_report_body
@..\initiative_report_body
@..\meter_list_body
@..\meter_report_body
@..\property_report_body
@..\region_report_body
@..\chain\certification_report_body
@..\compliance_register_report_body
@..\training_body
@..\training_flow_helper_body
@..\schema_body 
@..\enable_body 
@..\..\..\aspen2\cms\db\tab_body
@..\calc_body
@..\aggregate_ind_body
@..\approval_dashboard_body
@..\customer_body
@..\flow_report_body
@..\like_for_like_body
@..\region_body
@..\region_metric_body
@..\stored_calc_datasource_body
@..\tag_body



@update_tail
