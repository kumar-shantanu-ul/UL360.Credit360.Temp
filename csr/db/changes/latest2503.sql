-- Please update version.sql too -- this keeps clean builds in sync
define version=2503
@update_header

ALTER TABLE CSR.EST_CUSTOMER DROP COLUMN ESP_ID;
ALTER TABLE CSR.EST_BUILDING DROP COLUMN ESP_ID;
ALTER TABLE CSR.EST_SPACE DROP COLUMN ESP_ID;
ALTER TABLE CSR.EST_ENERGY_METER DROP COLUMN ESP_ID;
ALTER TABLE CSR.EST_WATER_METER DROP COLUMN ESP_ID;

ALTER TABLE CSR.EST_ERROR DROP CONSTRAINT FK_EST_EMETER_ERROR;
ALTER TABLE CSR.EST_ERROR DROP CONSTRAINT FK_EST_WMETER_ERROR;
ALTER TABLE CSR.EST_ERROR DROP CONSTRAINT FK_EST_SPACE_ERROR;
ALTER TABLE CSR.EST_ERROR DROP CONSTRAINT FK_EST_BUILDING_ERROR;

CREATE SEQUENCE CSR.EST_JOB_ID_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 5
    NOORDER
;

CREATE TABLE CSR.EST_METER(
    APP_SID              NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID      NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID       VARCHAR2(256)    NOT NULL,
    PM_BUILDING_ID       VARCHAR2(256)    NOT NULL,
    PM_METER_ID          VARCHAR2(256)    NOT NULL,
    PM_SPACE_ID          VARCHAR2(256),
    REGION_SID           NUMBER(10, 0),
    METER_NAME           VARCHAR2(256)    NOT NULL,
    METER_TYPE           VARCHAR2(256)    NOT NULL,
    UOM                  VARCHAR2(256)    NOT NULL,
    ACTIVE               NUMBER(1, 0)     DEFAULT 1 NOT NULL,
    ADD_TO_TOTAL         NUMBER(1, 0)     DEFAULT 1 NOT NULL,
    OTHER_DESC           VARCHAR2(256),
    LAST_ENTRY_DATE      DATE,
    LAST_POLL_DTM        DATE,
    LAST_JOB_DTM         DATE,
    MISSING              NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    WRITE_ACCESS         NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    SELLBACK             NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    ENVIRO_ATTR_OWNED    NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    GENERATION_METHOD    VARCHAR2(256),
    CHECK (ACTIVE IN(0,1)),
    CHECK (ADD_TO_TOTAL IN(0,1)),
    CHECK (MISSING IN(0,1)),
    CHECK (SELLBACK IN(0,1)),
    CHECK (ENVIRO_ATTR_OWNED IN(0,1)),
    CHECK (WRITE_ACCESS IN(0,1)),
    CONSTRAINT PK_EST_METER PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID)
)
;

CREATE TABLE CSR.EST_METER_TYPE_MAPPING(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID    NUMBER(10, 0)    NOT NULL,
    METER_TYPE         VARCHAR2(256)    NOT NULL,
    METER_IND_ID       NUMBER(10, 0),
    CONSTRAINT PK_EST_METER_TYPE_MAPPING PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, METER_TYPE)
)
;

CREATE TABLE CSR.EST_CONV_MAPPING(
    APP_SID                  NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID          NUMBER(10, 0)    NOT NULL,
    METER_TYPE               VARCHAR2(256)    NOT NULL,
    UOM                      VARCHAR2(256)    NOT NULL,
    MEASURE_CONVERSION_ID    NUMBER(10, 0),
    MEASURE_SID              NUMBER(10, 0),
    CONSTRAINT PK_EST_CONV_MAPPING PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, METER_TYPE, UOM)
)
;

CREATE TABLE CSR.EST_JOB_TYPE(
    EST_JOB_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    DESCRIPTION        VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK_EST_JOB_TYPE PRIMARY KEY (EST_JOB_TYPE_ID)
)
;

CREATE TABLE CSR.EST_JOB_STATE(
    EST_JOB_STATE_ID    NUMBER(10, 0)    NOT NULL,
    DESCRIPTION         VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK_EST_JOB_STATE PRIMARY KEY (EST_JOB_STATE_ID)
)
;

CREATE TABLE CSR.EST_JOB(
    APP_SID              NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_JOB_ID           NUMBER(10, 0)    NOT NULL,
    EST_ACCOUNT_SID      NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID       VARCHAR2(256),
    PM_BUILDING_ID       VARCHAR2(256),
    PM_SPACE_ID          VARCHAR2(256),
    PM_METER_ID          NUMBER(10, 0),
    REGION_SID           NUMBER(10, 0),
    EST_JOB_TYPE_ID      NUMBER(10, 0)    NOT NULL,
    EST_JOB_STATE_ID     NUMBER(10, 0)    DEFAULT 0 NOT NULL,
    PROCESSING           NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    CREATED_DTM          DATE             DEFAULT SYSDATE NOT NULL,
    PROCESS_AFTER_DTM    DATE,
    LAST_ATTEMPT_DTM     DATE,
    UPDATE_PM_OBJECT     NUMBER(1, 0)     DEFAULT 1 NOT NULL,
    CHECK (PROCESSING IN(0,1)),
    CHECK (UPDATE_PM_OBJECT IN(0,1)),
    CONSTRAINT PK_EST_JOB PRIMARY KEY (APP_SID, EST_JOB_ID)
)
;

CREATE UNIQUE INDEX CSR.UK_EST_JOB ON CSR.EST_JOB(APP_SID, EST_JOB_TYPE_ID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID, PM_METER_ID, PROCESSING)
;

ALTER TABLE CSR.EST_ACCOUNT DROP COLUMN TX_POLL_WAIT_MINUTES
;

ALTER TABLE CSR.EST_ACCOUNT DROP COLUMN TX_POLL_TIMEOUT_MINUTES
;

ALTER TABLE CSR.EST_ACCOUNT ADD(
	ACCOUNT_CUSTOMER_ID       VARCHAR2(256),
	CONNECT_JOB_INTERVAL      NUMBER(10, 0),
    LAST_CONNECT_JOB_DTM      DATE,
    SHARE_JOB_INTERVAL        NUMBER(10, 0),
    LAST_SHARE_JOB_DTM        DATE,
    BUILDING_JOB_INTERVAL     NUMBER(10, 0),
    METER_JOB_INTERVAL        NUMBER(10, 0)
);

ALTER TABLE CSR.EST_BUILDING ADD (
	OTHER_STATE              VARCHAR2(256),
	CONSTRUCTION_STATUS      VARCHAR2(256),
	IS_FEDERAL_PROPERTY      NUMBER(1, 0)      DEFAULT 0 NOT NULL,
	FEDERAL_OWNER            VARCHAR2(16),
    FEDERAL_AGENCY           VARCHAR2(1024),
    FEDERAL_AGENCY_REGION    VARCHAR2(1024),
    FEDERAL_CAMPUS           VARCHAR2(1024),
	LAST_JOB_DTM			 DATE,
	WRITE_ACCESS             NUMBER(1, 0)      DEFAULT 0 NOT NULL,
	CHECK (IS_FEDERAL_PROPERTY IN(0,1)),
	CHECK (WRITE_ACCESS IN(0, 1))
);

-- These will be updated the next time the building is polled
BEGIN
	UPDATE csr.est_building
	   SET year_built = -1
	 WHERE year_built IS NULL;
	
	UPDATE csr.est_building
	   SET primary_function = '<UNDEFINED>'
	 WHERE primary_function IS NULL;
	
	UPDATE csr.est_building
	   SET construction_status = '<UNDEFINED>'
	 WHERE construction_status IS NULL;
END;
/

ALTER TABLE CSR.EST_BUILDING MODIFY (
	YEAR_BUILT				NUMBER(10, 0)	NOT NULL,
	PRIMARY_FUNCTION		VARCHAR2(1024)	NOT NULL,
	CONSTRUCTION_STATUS		VARCHAR2(256) 	NOT NULL
);

CREATE TABLE CSR.EST_PROPERTY_TYPE_MAP(
    APP_SID                 NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    PROPERTY_SUB_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    PROPERTY_TYPE_ID        NUMBER(10, 0)    NOT NULL,
    EST_PROPERTY_TYPE       VARCHAR2(256)    NOT NULL,
    IS_DEFAULT              NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    CHECK (IS_DEFAULT IN(0,1)),
    CONSTRAINT PK_EST_PROPERTY_TYPE_MAP PRIMARY KEY (APP_SID, PROPERTY_SUB_TYPE_ID, PROPERTY_TYPE_ID)
)
;

CREATE TABLE CSR.EST_REGION_CHANGE_LOG(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID    NUMBER(10, 0)    NOT NULL,
    REGION_SID         NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID     VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK_EST_REGION_CHANGE_LOG PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, REGION_SID)
)
;

CREATE TABLE CSR.EST_BUILDING_CHANGE_LOG(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID    NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID     VARCHAR2(256)    NOT NULL,
    PM_BUILDING_ID     VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK_BUILDING_CNG_LOG PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID)
)
;

CREATE TABLE CSR.EST_SPACE_CHANGE_LOG(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID    NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID     VARCHAR2(256)    NOT NULL,
    PM_BUILDING_ID     VARCHAR2(256)    NOT NULL,
    PM_SPACE_ID        VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK_EST_SPACE_CHANGE_LOG PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
)
;

CREATE TABLE CSR.EST_SPACE_ATTR_CHANGE_LOG(
    APP_SID                 NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID         NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID          VARCHAR2(256)    NOT NULL,
    PM_BUILDING_ID          VARCHAR2(256)    NOT NULL,
    PM_SPACE_ID             VARCHAR2(256)    NOT NULL,
    REGION_METRIC_VAL_ID    NUMBER(10, 0)    NOT NULL,
    PM_VAL_ID               NUMBER(10, 0),
    CONSTRAINT EST_SPACE_ATTR_CHANGE_LOG PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID, REGION_METRIC_VAL_ID)
)
;

CREATE TABLE CSR.EST_METER_CHANGE_LOG(
    APP_SID            NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID    NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID     VARCHAR2(256)    NOT NULL,
    PM_BUILDING_ID     VARCHAR2(256)    NOT NULL,
    PM_METER_ID        VARCHAR2(256)    NOT NULL,
    CONSTRAINT PK_EST_METER_CNG_LOG PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID)
)
;

CREATE TABLE CSR.EST_METER_READING_CHANGE_LOG(
    APP_SID             NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_ACCOUNT_SID     NUMBER(10, 0)    NOT NULL,
    PM_CUSTOMER_ID      VARCHAR2(256)    NOT NULL,
    PM_BUILDING_ID      VARCHAR2(256)    NOT NULL,
    PM_METER_ID         VARCHAR2(256)    NOT NULL,
    METER_READING_ID    NUMBER(10, 0)    NOT NULL,
    PM_READING_ID       NUMBER(10, 0),
    CONSTRAINT PK_EST_METER_RDNG_CNG_LOG PRIMARY KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID, METER_READING_ID)
)
;

CREATE TABLE CSR.EST_JOB_ATTR(
    APP_SID                 NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_JOB_ID              NUMBER(10, 0)    NOT NULL,
    REGION_METRIC_VAL_ID    NUMBER(10, 0)    NOT NULL,
    PM_VAL_ID               NUMBER(10, 0),
    CONSTRAINT PK_EST_JOB_ATTR PRIMARY KEY (APP_SID, EST_JOB_ID, REGION_METRIC_VAL_ID)
)
;

CREATE TABLE CSR.EST_JOB_READING(
    APP_SID             NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    EST_JOB_ID          NUMBER(10, 0)    NOT NULL,
    METER_READING_ID    NUMBER(10, 0)    NOT NULL,
    PM_READING_ID       NUMBER(10, 0),
    CONSTRAINT PK_EST_JOB_READING PRIMARY KEY (APP_SID, EST_JOB_ID, METER_READING_ID)
)
;

CREATE TABLE CSR.EST_OPTIONS(
    APP_SID                NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    DEFAULT_PUSH           NUMBER(1, 0)     DEFAULT 0 NOT NULL,
    DEFAULT_ACCOUNT_SID    NUMBER(10, 0)    NOT NULL,
    DEFAULT_CUSTOMER_ID    VARCHAR2(256),
    CHECK (DEFAULT_PUSH IN(0,1)),
    CONSTRAINT PK_EST_OPTIONS PRIMARY KEY (APP_SID)
)
;

ALTER TABLE CSR.EST_BUILDING_METRIC_MAPPING ADD (
	READ_ONLY			NUMBER(1, 0)	DEFAULT 1 NOT NULL,
	CHECK (READ_ONLY IN (0,1))
);

ALTER TABLE CSR.EST_METER ADD CONSTRAINT FK_EST_BUILDING_METER 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID)
    REFERENCES CSR.EST_BUILDING(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID)
;

ALTER TABLE CSR.EST_METER ADD CONSTRAINT FK_EST_SPACE_METER 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
    REFERENCES CSR.EST_SPACE(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
;

ALTER TABLE CSR.EST_METER ADD CONSTRAINT FK_REGION_EST_METER 
    FOREIGN KEY (APP_SID, REGION_SID)
    REFERENCES CSR.REGION(APP_SID, REGION_SID)
;

ALTER TABLE CSR.EST_METER_TYPE_MAPPING ADD CONSTRAINT EST_TYPE_METER_IND 
    FOREIGN KEY (APP_SID, METER_IND_ID)
    REFERENCES CSR.METER_IND(APP_SID, METER_IND_ID)
;


ALTER TABLE CSR.EST_METER_TYPE_MAPPING ADD CONSTRAINT FK_EST_TYPE_ACCNTT 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID)
    REFERENCES CSR.EST_ACCOUNT(APP_SID, EST_ACCOUNT_SID)
;

ALTER TABLE CSR.EST_CONV_MAPPING ADD CONSTRAINT FK_CONV_MAPPING 
    FOREIGN KEY (APP_SID, MEASURE_CONVERSION_ID, MEASURE_SID)
    REFERENCES CSR.MEASURE_CONVERSION(APP_SID, MEASURE_CONVERSION_ID, MEASURE_SID)
;

ALTER TABLE CSR.EST_CONV_MAPPING ADD CONSTRAINT FK_EST_TYPE_CONV_MAP 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, METER_TYPE)
    REFERENCES CSR.EST_METER_TYPE_MAPPING(APP_SID, EST_ACCOUNT_SID, METER_TYPE)
;

ALTER TABLE CSR.EST_JOB ADD CONSTRAINT FK_CUSTOMER_EST_JOB 
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

ALTER TABLE CSR.EST_JOB ADD CONSTRAINT FK_EST_ACCOUNT_EST_JOB 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID)
    REFERENCES CSR.EST_ACCOUNT(APP_SID, EST_ACCOUNT_SID)
;

ALTER TABLE CSR.EST_JOB ADD CONSTRAINT FK_EST_JOB_STATE_JOB 
    FOREIGN KEY (EST_JOB_STATE_ID)
    REFERENCES CSR.EST_JOB_STATE(EST_JOB_STATE_ID)
;

ALTER TABLE CSR.EST_JOB ADD CONSTRAINT FK_EST_JOB_TYPE_JOB 
    FOREIGN KEY (EST_JOB_TYPE_ID)
    REFERENCES CSR.EST_JOB_TYPE(EST_JOB_TYPE_ID)
;

ALTER TABLE CSR.EST_JOB ADD CONSTRAINT FK_REGION_EST_JOB 
    FOREIGN KEY (APP_SID, REGION_SID)
    REFERENCES CSR.REGION(APP_SID, REGION_SID)
;

ALTER TABLE CSR.EST_BUILDING_CHANGE_LOG ADD CONSTRAINT FK_EST_BLD_BLD_CNG_LOG 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID)
    REFERENCES CSR.EST_BUILDING(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID)
;

ALTER TABLE CSR.EST_SPACE_CHANGE_LOG ADD CONSTRAINT FK_EST_SPACE_SPCHLOG 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
    REFERENCES CSR.EST_SPACE(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
;

ALTER TABLE CSR.EST_SPACE_ATTR_CHANGE_LOG ADD CONSTRAINT FK_EST_SPACE_SPATTRCHLOG 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
    REFERENCES CSR.EST_SPACE(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
;

ALTER TABLE CSR.EST_METER_CHANGE_LOG ADD CONSTRAINT FK_EST_METER_CNGLOG 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID)
    REFERENCES CSR.EST_METER(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID)
;

ALTER TABLE CSR.EST_METER_READING_CHANGE_LOG ADD CONSTRAINT FK_EST_METER_RDNGCNGLOG 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID)
    REFERENCES CSR.EST_METER(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID)
;

ALTER TABLE CSR.EST_REGION_CHANGE_LOG ADD CONSTRAINT FK_EST_ACC_EST_RGN_CNG_LOG 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID)
    REFERENCES CSR.EST_ACCOUNT(APP_SID, EST_ACCOUNT_SID)
;

ALTER TABLE CSR.EST_REGION_CHANGE_LOG ADD CONSTRAINT FK_REGION_EST_RGN_CNG_LOG 
    FOREIGN KEY (APP_SID, REGION_SID)
    REFERENCES CSR.REGION(APP_SID, REGION_SID)
;

ALTER TABLE CSR.EST_REGION_CHANGE_LOG ADD CONSTRAINT FK_EST_CUST_RGNCNGLOG 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID)
    REFERENCES CSR.EST_CUSTOMER(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID)
;

ALTER TABLE CSR.EST_JOB_ATTR ADD CONSTRAINT FK_EST_JOB_JOBATTR 
    FOREIGN KEY (APP_SID, EST_JOB_ID)
    REFERENCES CSR.EST_JOB(APP_SID, EST_JOB_ID)
;

ALTER TABLE CSR.EST_JOB_READING ADD CONSTRAINT FK_EST_JOB_JOBREADING 
    FOREIGN KEY (APP_SID, EST_JOB_ID)
    REFERENCES CSR.EST_JOB(APP_SID, EST_JOB_ID)
;

ALTER TABLE CSR.EST_PROPERTY_TYPE_MAP ADD CONSTRAINT FK_CUST_ESTPROPTYPEMAP 
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

ALTER TABLE CSR.EST_PROPERTY_TYPE_MAP ADD CONSTRAINT FK_PROPST_ESTPROPTYPEMAP 
    FOREIGN KEY (APP_SID, PROPERTY_TYPE_ID, PROPERTY_SUB_TYPE_ID)
    REFERENCES CSR.PROPERTY_SUB_TYPE(APP_SID, PROPERTY_TYPE_ID, PROPERTY_SUB_TYPE_ID)
;

-- All of the simulated metrics are editable values on a property
BEGIN
	UPDATE csr.est_building_metric_mapping
	   SET read_only = 0
	 WHERE simulated = 1;
END;
/

-- Space attribute changes
ALTER TABLE CSR.EST_SPACE_ATTR RENAME TO EST_SPACE_ATTR_LEGACY;

-- The new space attribute table will be populated when the data is next pulled from energy star
CREATE TABLE CSR.EST_SPACE_ATTR(
    APP_SID                 NUMBER(10, 0)     DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    PM_VAL_ID               NUMBER(10, 0)     NOT NULL,
    EST_ACCOUNT_SID         NUMBER(10, 0)     NOT NULL,
    PM_CUSTOMER_ID          VARCHAR2(256)     NOT NULL,
    PM_BUILDING_ID          VARCHAR2(256)     NOT NULL,
    PM_SPACE_ID             VARCHAR2(256)     NOT NULL,
    REGION_METRIC_VAL_ID    NUMBER(10, 0),
    ATTR_NAME               VARCHAR2(256)     NOT NULL,
    EFFECTIVE_DATE          DATE              NOT NULL,
    VAL                     NUMBER(24, 10),
    STR                     VARCHAR2(512),
    UOM                     VARCHAR2(256),
    IS_DEFAULT				NUMBER(1, 0)      DEFAULT 0 NOT NULL,
    CHECK(IS_DEFAULT IN (0, 1)),
    CONSTRAINT PK_EST_SPACE_ATTR2 PRIMARY KEY (APP_SID, PM_VAL_ID)
);

ALTER TABLE CSR.EST_SPACE_ATTR ADD CONSTRAINT FK_CUST_SET_SPACE_ATTR 
    FOREIGN KEY (APP_SID)
    REFERENCES CSR.CUSTOMER(APP_SID)
;

ALTER TABLE CSR.EST_SPACE_ATTR ADD CONSTRAINT FK_EST_SPACE_SPACE_ATTR 
    FOREIGN KEY (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)
    REFERENCES CSR.EST_SPACE(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID)  DEFERRABLE INITIALLY DEFERRED
;

ALTER TABLE CSR.EST_SPACE_ATTR ADD CONSTRAINT FK_RMVAL_EST_SPACE_ATTR 
    FOREIGN KEY (APP_SID, REGION_METRIC_VAL_ID)
    REFERENCES CSR.REGION_METRIC_VAL(APP_SID, REGION_METRIC_VAL_ID)
;


-- FK INDEXES
CREATE INDEX CSR.IX_EST_BUILDING_METER  ON CSR.EST_METER (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID);
CREATE INDEX CSR.IX_EST_SPACE_METER ON CSR.EST_METER (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID);
CREATE INDEX CSR.IX_REGION_EST_METER ON CSR.EST_METER (APP_SID, REGION_SID);
CREATE INDEX CSR.IX_TYPE_METER_IND ON CSR.EST_METER_TYPE_MAPPING (APP_SID, METER_IND_ID);
CREATE INDEX CSR.IX_EST_TYPE_ACCNTT ON CSR.EST_METER_TYPE_MAPPING (APP_SID, EST_ACCOUNT_SID);
CREATE INDEX CSR.IX_CONV_MAPPING ON CSR.EST_CONV_MAPPING (APP_SID, MEASURE_CONVERSION_ID, MEASURE_SID);
CREATE INDEX CSR.IX_EST_TYPE_CONV_MAP ON CSR.EST_CONV_MAPPING (APP_SID, EST_ACCOUNT_SID, METER_TYPE);
CREATE INDEX CSR.IX_CUSTOMER_EST_JOB ON CSR.EST_JOB (APP_SID);
CREATE INDEX CSR.IX_EST_ACCOUNT_EST_JOB ON CSR.EST_JOB (APP_SID, EST_ACCOUNT_SID);
CREATE INDEX CSR.IX_EST_JOB_STATE_JOB ON CSR.EST_JOB (EST_JOB_STATE_ID);
CREATE INDEX CSR.IX_EST_JOB_TYPE_JOB ON CSR.EST_JOB (EST_JOB_TYPE_ID);
CREATE INDEX CSR.IX_REGION_EST_JOB ON CSR.EST_JOB (APP_SID, REGION_SID);
CREATE INDEX CSR.IX_EST_SPACE_SPATTRCHLOG ON CSR.EST_SPACE_ATTR_CHANGE_LOG (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID);
CREATE INDEX CSR.IX_EST_METER_RDNGCNGLOG ON CSR.EST_METER_READING_CHANGE_LOG (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_METER_ID);
CREATE INDEX CSR.IX_EST_ACC_EST_RGN_CNG_LOG ON CSR.EST_REGION_CHANGE_LOG (APP_SID, EST_ACCOUNT_SID);
CREATE INDEX CSR.IX_REGION_EST_RGN_CNG_LOG ON CSR.EST_REGION_CHANGE_LOG (APP_SID, REGION_SID);
CREATE INDEX CSR.IX_EST_CUST_RGNCNGLOG ON CSR.EST_REGION_CHANGE_LOG (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID);
CREATE INDEX CSR.IX_EST_JOB_JOBATTR ON CSR.EST_JOB_ATTR (APP_SID, EST_JOB_ID);
CREATE INDEX CSR.IX_EST_JOB_JOBREADING ON CSR.EST_JOB_READING (APP_SID, EST_JOB_ID);
CREATE INDEX CSR.IX_CUST_ESTPROPTYPEMAP ON CSR.EST_PROPERTY_TYPE_MAP (APP_SID);
CREATE INDEX CSR.IX_PROPST_ESTPROPTYPEMAP ON CSR.EST_PROPERTY_TYPE_MAP (APP_SID, PROPERTY_TYPE_ID, PROPERTY_SUB_TYPE_ID);
CREATE INDEX CSR.IX_CUST_SET_SPACE_ATTR ON CSR.EST_SPACE_ATTR (APP_SID);
CREATE INDEX CSR.IX_EST_SPACE_SPACE_ATTR ON CSR.EST_SPACE_ATTR (APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID);
CREATE INDEX CSR.IX_RMVAL_EST_SPACE_ATTR ON CSR.EST_SPACE_ATTR (APP_SID, REGION_METRIC_VAL_ID);

CREATE UNIQUE INDEX CSR.UK_EST_SPACE_ATTR_DTM ON CSR.EST_SPACE_ATTR(APP_SID, EST_ACCOUNT_SID, PM_CUSTOMER_ID, PM_BUILDING_ID, PM_SPACE_ID, ATTR_NAME, EFFECTIVE_DATE);

DROP TYPE CSR.T_EST_ATTR_TABLE;

CREATE OR REPLACE TYPE CSR.T_EST_ATTR_ROW AS
  OBJECT ( 
  	ID					NUMBER(10),
  	REGION_METRIC_ID	NUMBER(10),
	NAME				VARCHAR2(256),
	VAL					NUMBER(24, 10),
	STR					VARCHAR2(1024),
	DTM					DATE,
	UOM					VARCHAR2(256),
	POS					NUMBER(10)
  );
/

CREATE OR REPLACE TYPE CSR.T_EST_ATTR_TABLE AS 
  TABLE OF CSR.T_EST_ATTR_ROW;
/

DROP TABLE CSR.TEMP_METER_CONSUMPTIONS;
CREATE GLOBAL TEMPORARY TABLE CSR.TEMP_METER_CONSUMPTIONS(
	ID						NUMBER(10),
	START_DTM				DATE,
	END_DTM					DATE,
	CONSUMPTION				NUMBER(24,10),
	COST					NUMBER(24,10)
) ON COMMIT DELETE ROWS;

ALTER TABLE CSR.METER_READING ADD (
	PM_READING_ID	NUMBER(10, 0)
);

CREATE OR REPLACE VIEW csr.v$meter_reading AS
	SELECT mr.app_sid, mr.meter_reading_id, mr.region_sid, mr.start_dtm, mr.end_dtm, mr.val_number, mr.baseline_val,
		mr.entered_by_user_sid, mr.entered_dtm, mr.note, mr.reference, mr.cost, mr.meter_document_id, mr.created_invoice_id,
		mr.approved_dtm, mr.approved_by_sid, mr.is_estimate,
		mr.flow_item_id, mr.pm_reading_id
	  FROM csr.all_meter am, csr.meter_reading mr
	 WHERE am.app_sid = mr.app_sid
	   AND am.region_sid = mr.region_sid
	   AND am.meter_source_type_id = mr.meter_source_type_id
	   AND mr.active = 1
	   AND req_approval = 0
;

ALTER TABLE CSR.ALL_PROPERTY ADD(
	ENERGY_STAR_SYNC		NUMBER(1)	DEFAULT 0 NOT NULL,
	ENERGY_STAR_PUSH		NUMBER(1)	DEFAULT 0 NOT NULL,
	CHECK(ENERGY_STAR_SYNC IN (0, 1)),
	CHECK(ENERGY_STAR_PUSH IN (0, 1))
);

CREATE OR REPLACE VIEW CSR.PROPERTY
	(APP_SID, REGION_SID, FLOW_ITEM_ID,
	 STREET_ADDR_1, STREET_ADDR_2, CITY, STATE, POSTCODE,
	 COMPANY_SID, PROPERTY_TYPE_ID, PROPERTY_SUB_TYPE_ID,
	 FUND_ID, MGMT_COMPANY_ID, MGMT_COMPANY_OTHER,
	 PM_BUILDING_ID, CURRENT_LEASE_ID, MGMT_COMPANY_CONTACT_ID,
	 ENERGY_STAR_SYNC, ENERGY_STAR_PUSH) AS
  SELECT ALP.APP_SID, ALP.REGION_SID, ALP.FLOW_ITEM_ID,
	 ALP.STREET_ADDR_1, ALP.STREET_ADDR_2, ALP.CITY, ALP.STATE, ALP.POSTCODE,
	 ALP.COMPANY_SID, ALP.PROPERTY_TYPE_ID, ALP.PROPERTY_SUB_TYPE_ID,
	 ALP.FUND_ID, ALP.MGMT_COMPANY_ID, ALP.MGMT_COMPANY_OTHER,
	 ALP.PM_BUILDING_ID, ALP.CURRENT_LEASE_ID, ALP.MGMT_COMPANY_CONTACT_ID,
	 ENERGY_STAR_SYNC, ENERGY_STAR_PUSH
    FROM ALL_PROPERTY ALP JOIN region r ON r.region_sid = alp.region_sid
   WHERE r.region_type = 3;

-- RLS
DECLARE
	FEATURE_NOT_ENABLED EXCEPTION;
	PRAGMA EXCEPTION_INIT(FEATURE_NOT_ENABLED, -439);
	policy_already_exists exception;
	pragma exception_init(policy_already_exists, -28101);
	type t_tabs is table of varchar2(30);
	v_list t_tabs;
	v_null_list t_tabs;
	v_nullable VARCHAR2(1);
begin	
	v_list := t_tabs(
		'EST_METER',
		'EST_METER_TYPE_MAPPING',
		'EST_CONV_MAPPING',
		-- EST_JOB', -- Uses merge!
		'EST_JOB_READING',
		'EST_JOB_ATTR',
		'EST_PROPERTY_TYPE_MAP',
		'EST_REGION_CHANGE_LOG',
		'EST_BUILDING_CHANGE_LOG',
		'EST_METER_CHANGE_LOG',
		'EST_METER_READING_CHANGE_LOG',
		'EST_SPACE_CHANGE_LOG',
		'EST_SPACE_ATTR_CHANGE_LOG',
		'EST_SPACE_ATTR',
		'EST_OPTIONS'
	);
	for i in 1 .. v_list.count loop
		declare
			v_name varchar2(30);
			v_i pls_integer default 1;
		begin
			loop
				begin					
					-- verify that the table has an app_sid column (dev helper)
					BEGIN
						SELECT nullable 
						  INTO v_nullable
						  FROM all_tab_columns 
						 WHERE owner = 'CSR' 
						   AND table_name = UPPER(v_list(i))
						   AND column_name = 'APP_SID';
					EXCEPTION
						WHEN no_data_found THEN
							raise_application_error(-20001, 'CSR.'||v_list(i)||' does not have an app_sid column');
					END;
					
					if v_i = 1 then
						v_name := SUBSTR(v_list(i), 1, 23)||'_POLICY';
					else
						v_name := SUBSTR(v_list(i), 1, 21)||'_POLICY_'||v_i;
					end if;
					dbms_output.put_line('doing '||v_name);
				    dbms_rls.add_policy(
				        object_schema   => 'CSR',
				        object_name     => v_list(i),
				        policy_name     => v_name,
				        function_schema => 'CSR',
				        policy_function => (CASE WHEN v_nullable ='N' THEN 'appSidCheck' ELSE 'nullableAppSidCheck' END),
				        statement_types => 'select, insert, update, delete',
				        update_check	=> true,
				        policy_type     => dbms_rls.context_sensitive );
				  	exit;
				exception
					when policy_already_exists then
						v_i := v_i + 1;
					WHEN FEATURE_NOT_ENABLED THEN
						DBMS_OUTPUT.PUT_LINE('RLS policy '||v_name||' not applied as feature not enabled');
						exit;
				end;
			end loop;
		end;
	end loop;
end;
/

CREATE OR REPLACE TYPE CSR.T_EST_QUEUE_ENTRY AS OBJECT (
	EST_JOB_ID NUMBER(10)
);
/

-- create a queue for energy star jobs
BEGIN
	DBMS_AQADM.CREATE_QUEUE_TABLE (
		queue_table        => 'csr.est_queue',
		queue_payload_type => 'csr.t_est_queue_entry'
	);
	DBMS_AQADM.CREATE_QUEUE (
		queue_name  => 'csr.est_queue',
		queue_table => 'csr.est_queue'
	);
	DBMS_AQADM.START_QUEUE (
		queue_name => 'csr.est_queue'
	);
END;
/

-- New app lock type for hosts already using energy star
BEGIN
	INSERT INTO csr.app_lock (app_sid, lock_type)
		SELECT DISTINCT app_sid, 3 /*csr_data_pkg.LOCK_TYPE_ENERGY_STAR*/
		  FROM csr.est_account
		 MINUS 
		SELECT app_sid, lock_type
		  FROM csr.app_lock;
	commit;
END;
/

BEGIN
	INSERT INTO csr.est_job_type (est_job_type_id, description) VALUES(0, 'Connect');
	INSERT INTO csr.est_job_type (est_job_type_id, description) VALUES(1, 'Share');
	INSERT INTO csr.est_job_type (est_job_type_id, description) VALUES(2, 'Property');
	INSERT INTO csr.est_job_type (est_job_type_id, description) VALUES(3, 'Space');
	INSERT INTO csr.est_job_type (est_job_type_id, description) VALUES(4, 'Meter');
	INSERT INTO csr.est_job_type (est_job_type_id, description) VALUES(5, 'Region');
	commit;
END;
/

BEGIN
	INSERT INTO csr.est_job_state (est_job_state_id, description) VALUES(0, 'Idle');
	INSERT INTO csr.est_job_state (est_job_state_id, description) VALUES(1, 'Failed');
	INSERT INTO csr.est_job_state (est_job_state_id, description) VALUES(2, 'Running');
	commit;
END;
/

BEGIN
	-- Merge meter data into new est_meter table
	INSERT INTO csr.est_meter (app_sid, est_account_sid, pm_customer_id, pm_building_id, pm_meter_id, pm_space_id, region_sid,
			meter_name, meter_type, uom, active, add_to_total, other_desc, last_entry_date, 
			last_poll_dtm, last_job_dtm, missing, enviro_attr_owned, generation_method,
			write_access)
		SELECT app_sid, est_account_sid, pm_customer_id, pm_building_id, pm_energy_meter_id pm_meter_id, pm_space_id, region_sid,
			meter_name, energy_type meter_type, uom, active, add_to_total, other_desc, last_entry_date, 
			last_poll_dtm, NULL, missing, enviro_atrr_owned, generation_method,
			DECODE(access_level, 'Read Write', 1, 0) write_access
		  FROM csr.est_energy_meter
		UNION
		SELECT app_sid, est_account_sid, pm_customer_id, pm_building_id, pm_water_meter_id pm_meter_id, pm_space_id, region_sid,
			meter_name, use_type meter_type, uom, active, add_to_total, other_desc, NULL last_entry_date, 
			last_poll_dtm, NULL, missing, 0 enviro_atrr_owned, NULL generation_method,
			DECODE(access_level, 'Read Write', 1, 0) write_access
		  FROM csr.est_water_meter
	;
	
	-- Merge conversions into new est_meter_type_mapping and est_conv_mapping tables
	INSERT INTO csr.est_meter_type_mapping (app_sid, est_account_sid, meter_type, meter_ind_id)
		SELECT app_sid, est_account_sid, meter_type, MIN(meter_ind_id)
  		  FROM (SELECT app_sid, est_account_sid, energy_type meter_type, meter_ind_id
				  FROM csr.est_energy_type_mapping
				UNION
				SELECT app_sid, est_account_sid, use_type meter_type, meter_ind_id
				  FROM csr.est_water_use_mapping)
		 GROUP BY app_sid, est_account_sid, meter_type
	;
	
	INSERT INTO csr.est_conv_mapping (app_sid, est_account_sid, meter_type, uom, measure_conversion_id, measure_sid)
		SELECT app_sid, est_account_sid, energy_type meter_type, uom, measure_conversion_id, measure_sid
		  FROM csr.est_energy_conv_mapping
		UNION
		SELECT app_sid, est_account_sid, use_type meter_type, uom, measure_conversion_id, measure_sid
		  FROM csr.est_water_conv_mapping
	;
END;
/

-- Drop old meter tables
/*
DROP TABLE CSR.EST_ENERGY_METER CASCADE CONSTRAINTS;
DROP TABLE CSR.EST_WATER_METER CASCADE CONSTRAINTS;
DROP TABLE CSR.EST_ENERGY_CONV_MAPPING CASCADE CONSTRAINTS;
DROP TABLE CSR.EST_WATER_CONV_MAPPING CASCADE CONSTRAINTS;
DROP TABLE CSR.EST_ENERGY_TYPE_MAPPING CASCADE CONSTRAINTS;
DROP TABLE CSR.EST_WATER_USE_MAPPING CASCADE CONSTRAINTS;
*/

-- As we're not going to delete the above tables right away unhook the csontratints
ALTER TABLE CSR.EST_ENERGY_METER DROP CONSTRAINT FK_EST_METER_BLDNG;
ALTER TABLE CSR.EST_ENERGY_METER DROP CONSTRAINT FK_EST_METER_SPACE;
ALTER TABLE CSR.EST_ENERGY_METER DROP CONSTRAINT FK_EST_METER_RGN;
ALTER TABLE CSR.EST_ENERGY_METER DROP CONSTRAINT FK_EST_METER_PRGN;
ALTER TABLE CSR.EST_WATER_METER DROP CONSTRAINT FK_WMETER_BLDNG;
ALTER TABLE CSR.EST_WATER_METER DROP CONSTRAINT FK_WMETER_SPACE;
ALTER TABLE CSR.EST_WATER_METER DROP CONSTRAINT FK_WMETER_RGN;
ALTER TABLE CSR.EST_WATER_METER DROP CONSTRAINT FK_WMETER_PRGN;
ALTER TABLE CSR.EST_ENERGY_CONV_MAPPING DROP CONSTRAINT FK_EST_ENERGYTYP_CONV_MAP;
ALTER TABLE CSR.EST_ENERGY_CONV_MAPPING DROP CONSTRAINT FK_ENERGY_CONV_MAPPING;
ALTER TABLE CSR.EST_ENERGY_TYPE_MAPPING DROP CONSTRAINT EST_ENERGYTYP_METER_IND;
ALTER TABLE CSR.EST_WATER_CONV_MAPPING DROP CONSTRAINT FK_EST_WATERUSE_CONV_MAP;
ALTER TABLE CSR.EST_WATER_CONV_MAPPING DROP CONSTRAINT FK_WATER_CONV_MAPPING;
ALTER TABLE CSR.EST_WATER_USE_MAPPING DROP CONSTRAINT EST_WATERUSE_METER_IND;

create or replace package csr.energy_star_job_pkg as end;
/
create or replace package csr.energy_star_job_data_pkg as end;
/
create or replace package csr.energy_star_helper_pkg as end;
/

grant execute on csr.energy_star_job_pkg to web_user;
grant execute on csr.energy_star_job_data_pkg to web_user;
grant execute on csr.energy_star_helper_pkg to web_user;

-- job to populate the energy star job queue
DECLARE
    job BINARY_INTEGER;
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
       job_name             => 'csr.QueueEstJobs',
       job_type             => 'PLSQL_BLOCK',
       job_action           => 'csr.energy_star_job_pkg.QueueJobs;',
       job_class            => 'low_priority_job',
       start_date           => to_timestamp_tz('2008/01/01 00:00 +00:00','YYYY/MM/DD HH24:MI TZH:TZM'),
       repeat_interval      => 'FREQ=SECONDLY;INTERVAL=60',
       enabled              => TRUE,
       auto_drop            => FALSE,
       comments             => 'Poll peridically and scan energy star change logs to produce jobs for exchanging data');
END;
/

@../csr_data_pkg
@../enable_pkg
@../energy_star_pkg
@../energy_star_job_pkg
@../energy_star_job_data_pkg
@../energy_star_helper_pkg
@../region_metric_pkg

@../enable_body
@../energy_star_body
@../energy_star_job_body
@../energy_star_job_data_body
@../energy_star_helper_body
@../region_body
@../meter_body
@../space_body
@../region_metric_body

@update_tail
