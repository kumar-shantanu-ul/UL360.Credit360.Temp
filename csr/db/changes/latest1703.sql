-- Please update version.sql too -- this keeps clean builds in sync
define version=1703
@update_header

CREATE TABLE csr.plugin_type (
	plugin_type_id	NUMBER(10, 0) NOT NULL,
	description		VARCHAR2(50) NOT NULL,
	CONSTRAINT pk_plugin_type PRIMARY KEY (plugin_type_id)
);

CREATE TABLE csr.plugin (
	plugin_id		NUMBER(10, 0) NOT NULL,
	plugin_type_id	NUMBER(10, 0) NOT NULL,
	description		VARCHAR2(50) NOT NULL,
	js_include		VARCHAR2(255) NOT NULL,
	js_class		VARCHAR2(255) NOT NULL,
	cs_class		VARCHAR2(255) NOT NULL,
	CONSTRAINT pk_plugin PRIMARY KEY (plugin_id),
	CONSTRAINT uk_plugin_js_class UNIQUE (js_class),
	CONSTRAINT uk_plugin_id_and_type_id UNIQUE (plugin_id, plugin_type_id),
	CONSTRAINT fk_plugin_plugin_type FOREIGN KEY (plugin_type_id) REFERENCES csr.plugin_type(plugin_type_id)
);

CREATE SEQUENCE csr.plugin_id_seq 
	START WITH 1
	INCREMENT BY 1
	NOMINVALUE
	NOMAXVALUE
	CACHE 5
	NOORDER
;

CREATE TABLE csr.property_tab (
	app_sid			NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
	plugin_id		NUMBER(10, 0) NOT NULL,
	plugin_type_id	NUMBER(10, 0) NOT NULL,
	pos				NUMBER(10, 0) NOT NULL,
	tab_label		VARCHAR2(50),
	CONSTRAINT pk_property_tab PRIMARY KEY (app_sid, plugin_id),
	CONSTRAINT fk_property_tab_plugin FOREIGN KEY (plugin_id, plugin_type_id) REFERENCES csr.plugin(plugin_id, plugin_type_id),
	CONSTRAINT chk_property_tab_plugin_type CHECK (plugin_type_id=1)
);

CREATE TABLE CSR.PROPERTY_OPTIONS (
	APP_SID						NUMBER(10, 0) DEFAULT SYS_CONTEXT('SECURITY', 'APP') NOT NULL,
	PROPERTY_HELPER_PKG			VARCHAR(255),
	CONSTRAINT PK_PROPERTY_OPTIONS PRIMARY KEY (APP_SID)
);

INSERT INTO CSR.PROPERTY_OPTIONS (app_sid)
     SELECT DISTINCT app_sid
	   FROM csr.property;


BEGIN
	INSERT INTO csr.plugin_type (plugin_type_id, description) VALUES (1, 'Property tabs');
END;
/

BEGIN
	-- Check we have the same index expression as Live.
	FOR r IN (
		SELECT null
		  FROM all_indexes 
		 WHERE index_name = 'UK_FLOW_ST_TR_LOOKUP'
		   AND owner = 'CSR'
		   AND table_name = 'FLOW_STATE_TRANSITION'
		   AND uniqueness = 'NONUNIQUE'
	)
	LOOP
		EXECUTE IMMEDIATE 'DROP INDEX csr.UK_FLOW_ST_TR_LOOKUP';
		EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX CSR.UK_FLOW_ST_TR_LOOKUP ON CSR.FLOW_STATE_TRANSITION(APP_SID, FROM_STATE_ID, NVL(UPPER(LOOKUP_KEY),''FLST''||TO_CHAR(FLOW_STATE_TRANSITION_ID)))';
	END LOOP;
END;
/

UPDATE csr.std_alert_type_param
   SET description = 'Issue URL'
 WHERE description = 'Issue url'
   AND std_alert_type_id IN (17, 18, 47);
   
UPDATE csr.std_alert_type_param
   SET description = 'Parent object URL'
 WHERE description = 'Parent object url'
   AND std_alert_type_id IN (17, 18, 47);
   
UPDATE csr.std_alert_type_param
   SET description = 'Sheet URL'
 WHERE description = 'Sheet url'
   AND std_alert_type_id IN (17, 18, 47);
   
UPDATE csr.std_alert_type_param
   SET description = 'Issue ID',
       help_text = 'The issue ID'
 WHERE description = 'Issue id'
   AND std_alert_type_id IN (18, 47);
   
   
UPDATE csr.std_alert_type_param
   SET description = 'The issue ID string'
 WHERE description = 'The issue id string'
   AND std_alert_type_id = 17;
   
   
-- CBRE stuff 
CREATE SEQUENCE CSR.FUND_MGR_CONTACT_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE SEQUENCE CSR.TENANT_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE SEQUENCE CSR.FUND_TYPE_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;

CREATE SEQUENCE CSR.LEASE_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;


CREATE SEQUENCE CSR.MGMT_COMPANY_CONTACT_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMINVALUE
    NOMAXVALUE
    CACHE 20
    NOORDER;
 
 
CREATE TABLE CSR.CURRENCY(
    APP_SID          NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    CURRENCY_CODE    VARCHAR2(10)     NOT NULL,
    CONSTRAINT PK_CURRENCY PRIMARY KEY (APP_SID, CURRENCY_CODE)
);

 
ALTER TABLE CSR.FUND ADD (
    YEAR_OF_INCEPTION          NUMBER(10, 0),
    FUND_TYPE_ID               NUMBER(10, 0),
    FUND_MANAGER_CONTACT_ID    NUMBER(10, 0),
    DEFAULT_MGMT_COMPANY_ID    NUMBER(10, 0)
);
 
CREATE TABLE CSR.FUND_MGR_CONTACT(
    APP_SID                NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    FUND_MGR_CONTACT_ID    NUMBER(10, 0)    NOT NULL,
    NAME                   VARCHAR2(255)    NOT NULL,
    EMAIL                  VARCHAR2(255),
    PHONE                  VARCHAR2(255),
    CONSTRAINT PK_FUND_MGR_CONTACT PRIMARY KEY (APP_SID, FUND_MGR_CONTACT_ID)
);

CREATE TABLE CSR.FUND_TYPE(
    APP_SID         NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    FUND_TYPE_ID    NUMBER(10, 0)    NOT NULL,
    LABEL           VARCHAR2(255),
    CONSTRAINT PK_FUND_TYPE PRIMARY KEY (APP_SID, FUND_TYPE_ID)
);


CREATE TABLE CSR.LEASE(
    APP_SID                NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    LEASE_ID               NUMBER(10, 0)    NOT NULL,
    START_DTM              DATE             NOT NULL,
    END_DTM                DATE,
    NEXT_BREAK_DTM         DATE,
    CURRENT_RENT           NUMBER(16, 2),
    NORMALISED_RENT        NUMBER(16, 2)    NOT NULL,
    NEXT_RENT_REVIEW       DATE,
    TENANT_ID              NUMBER(10, 0)    NOT NULL,
    CURRENCY_CODE          VARCHAR2(10)     NOT NULL,     
    SPACE_REGION_SID       NUMBER(10, 0),
    PROPERTY_REGION_SID    NUMBER(10, 0),
    CONSTRAINT CHK_LEASE CHECK ((SPACE_REGION_SID IS NULL AND PROPERTY_REGION_SID IS NOT NULL) OR (SPACE_REGION_SID IS NOT NULL AND PROPERTY_REGION_SID IS NULL)),
    CONSTRAINT PK_LEASE PRIMARY KEY (APP_SID, LEASE_ID)
);

CREATE TABLE CSR.LEASE_SPACE (
    APP_SID                NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    LEASE_ID               NUMBER(10, 0)    NOT NULL,
    SPACE_REGION_SID       NUMBER(10, 0)	NOT NULL,
	CONSTRAINT PK_LEASE_SPACE PRIMARY KEY (APP_SID, LEASE_ID, SPACE_REGION_SID)
);

CREATE TABLE CSR.LEASE_PROPERTY (
    APP_SID                NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    LEASE_ID               NUMBER(10, 0)    NOT NULL,
    PROPERTY_REGION_SID    NUMBER(10, 0)	NOT NULL,
	CONSTRAINT PK_LEASE_PROPERTY PRIMARY KEY (APP_SID, LEASE_ID, PROPERTY_REGION_SID)
);

CREATE TABLE CSR.LEASE_POSTIT(
    APP_SID      NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    LEASE_ID     NUMBER(10, 0)    NOT NULL,
    POSTIT_ID    NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_LEASE_POSTIT PRIMARY KEY (LEASE_ID, POSTIT_ID, APP_SID)
);

CREATE TABLE CSR.MGMT_COMPANY_CONTACT(
    APP_SID                    NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    MGMT_COMPANY_CONTACT_ID    NUMBER(10, 0)    NOT NULL,
    NAME                       VARCHAR2(255)    NOT NULL,
    EMAIL                      VARCHAR2(255),
    PHONE                      VARCHAR2(255),
    MGMT_COMPANY_ID            NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_MGMT_COMPANY_CONTACT PRIMARY KEY (APP_SID, MGMT_COMPANY_CONTACT_ID)
);

CREATE TABLE CSR.MGMT_COMPANY_FUND_CONTACT(
    APP_SID                    NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    FUND_ID                    NUMBER(10, 0)    NOT NULL,
    MGMT_COMPANY_CONTACT_ID    NUMBER(10, 0)    NOT NULL,
    MGMT_COMPANY_ID            NUMBER(10, 0)    NOT NULL,
    CONSTRAINT PK_MGMT_COMP_FUND_CONT PRIMARY KEY (APP_SID, FUND_ID, MGMT_COMPANY_CONTACT_ID, MGMT_COMPANY_ID)
);


 
ALTER TABLE CSR.PROPERTY ADD (
    CURRENT_LEASE_ID        NUMBER(10, 0)
);

 
ALTER TABLE CSR.SPACE ADD (
    CURRENT_LEASE_ID       NUMBER(10, 0)
);
 
 
CREATE TABLE CSR.STD_CURRENCY(
    CURRENCY_CODE    VARCHAR2(10)     NOT NULL,
    LABEL            VARCHAR2(255)    NOT NULL,
    CONSTRAINT PK_STD_CURRENCY PRIMARY KEY (CURRENCY_CODE)
);


CREATE TABLE CSR.TENANT(
    APP_SID      NUMBER(10, 0)    DEFAULT SYS_CONTEXT('SECURITY','APP') NOT NULL,
    TENANT_ID    NUMBER(10, 0)    NOT NULL,
    NAME         VARCHAR2(255)    NOT NULL,
    CONSTRAINT PK_TENANT PRIMARY KEY (APP_SID, TENANT_ID)
);



ALTER TABLE CSR.FUND ADD (CONSTRAINT UK_FUND  UNIQUE (APP_SID, FUND_ID, DEFAULT_MGMT_COMPANY_ID));

ALTER TABLE CSR.LEASE ADD (CONSTRAINT UK_SPACE_LEASE UNIQUE (APP_SID, LEASE_ID, SPACE_REGION_SID));

ALTER TABLE CSR.LEASE ADD (CONSTRAINT UK_PROPERTY_LEASE UNIQUE (APP_SID, LEASE_ID, PROPERTY_REGION_SID));

ALTER TABLE CSR.MGMT_COMPANY_CONTACT ADD (CONSTRAINT UK_MGMT_COMPANY_CONTACT UNIQUE (APP_SID, MGMT_COMPANY_CONTACT_ID, MGMT_COMPANY_ID));

ALTER TABLE CSR.SPACE ADD (CONSTRAINT UK_SPACE UNIQUE (APP_SID, REGION_SID, PROPERTY_REGION_SID));

 
 
 
ALTER TABLE CSR.CURRENCY ADD CONSTRAINT FK_STD_CURRENCY_CURRENCY 
    FOREIGN KEY (CURRENCY_CODE)
    REFERENCES CSR.STD_CURRENCY(CURRENCY_CODE);
 
ALTER TABLE CSR.FUND ADD CONSTRAINT FK_MGMT_COMPANY_FUND 
    FOREIGN KEY (APP_SID, DEFAULT_MGMT_COMPANY_ID)
    REFERENCES CSR.MGMT_COMPANY(APP_SID, MGMT_COMPANY_ID);

ALTER TABLE CSR.FUND ADD CONSTRAINT FK_FUND_MGR_CONTACT_FUND 
    FOREIGN KEY (APP_SID, FUND_MANAGER_CONTACT_ID)
    REFERENCES CSR.FUND_MGR_CONTACT(APP_SID, FUND_MGR_CONTACT_ID);

ALTER TABLE CSR.FUND ADD CONSTRAINT FK_FUND_TYPE_FUND 
    FOREIGN KEY (APP_SID, FUND_TYPE_ID)
    REFERENCES CSR.FUND_TYPE(APP_SID, FUND_TYPE_ID);


ALTER TABLE CSR.LEASE ADD CONSTRAINT FK_CURRENCY_LEASE 
    FOREIGN KEY (APP_SID, CURRENCY_CODE)
    REFERENCES CSR.CURRENCY(APP_SID, CURRENCY_CODE);

ALTER TABLE CSR.LEASE ADD CONSTRAINT FK_PROPERTY_LEASE 
    FOREIGN KEY (APP_SID, PROPERTY_REGION_SID)
    REFERENCES CSR.PROPERTY(APP_SID, REGION_SID);

ALTER TABLE CSR.LEASE ADD CONSTRAINT FK_SPACE_LEASE 
    FOREIGN KEY (APP_SID, SPACE_REGION_SID)
    REFERENCES CSR.SPACE(APP_SID, REGION_SID);

ALTER TABLE CSR.LEASE_PROPERTY ADD CONSTRAINT FK_PROPERTY_LEASE_PROPERTY
    FOREIGN KEY (APP_SID, PROPERTY_REGION_SID)
    REFERENCES CSR.PROPERTY(APP_SID, REGION_SID);

ALTER TABLE CSR.LEASE_SPACE ADD CONSTRAINT FK_SPACE_LEASE_SPACE
    FOREIGN KEY (APP_SID, SPACE_REGION_SID)
    REFERENCES CSR.SPACE(APP_SID, REGION_SID);

ALTER TABLE CSR.LEASE ADD CONSTRAINT FK_TENANT_LEASE
    FOREIGN KEY (APP_SID, TENANT_ID)
    REFERENCES CSR.TENANT(APP_SID, TENANT_ID);
    
ALTER TABLE CSR.LEASE_POSTIT ADD CONSTRAINT FK_LEASE_LEASE_POSTIT 
    FOREIGN KEY (APP_SID, LEASE_ID)
    REFERENCES CSR.LEASE(APP_SID, LEASE_ID);

ALTER TABLE CSR.LEASE_POSTIT ADD CONSTRAINT FK_POSTIT_LEASE 
    FOREIGN KEY (APP_SID, POSTIT_ID)
    REFERENCES CSR.POSTIT(APP_SID, POSTIT_ID) ON DELETE CASCADE;


ALTER TABLE CSR.MGMT_COMPANY_CONTACT ADD CONSTRAINT FK_MGMT_COMPANY_CONTACT 
    FOREIGN KEY (APP_SID, MGMT_COMPANY_ID)
    REFERENCES CSR.MGMT_COMPANY(APP_SID, MGMT_COMPANY_ID);


ALTER TABLE CSR.MGMT_COMPANY_FUND_CONTACT ADD CONSTRAINT FK_FUND_MGMT_CO_FND_CT 
    FOREIGN KEY (APP_SID, FUND_ID, MGMT_COMPANY_ID)
    REFERENCES CSR.FUND(APP_SID, FUND_ID, DEFAULT_MGMT_COMPANY_ID);

ALTER TABLE CSR.MGMT_COMPANY_FUND_CONTACT ADD CONSTRAINT FK_MGMT_CO_CON_FUND_CO 
    FOREIGN KEY (APP_SID, MGMT_COMPANY_CONTACT_ID, MGMT_COMPANY_ID)
    REFERENCES CSR.MGMT_COMPANY_CONTACT(APP_SID, MGMT_COMPANY_CONTACT_ID, MGMT_COMPANY_ID);
 
ALTER TABLE CSR.PROPERTY ADD CONSTRAINT FK_LEASE_PROPERTY 
    FOREIGN KEY (APP_SID, CURRENT_LEASE_ID, REGION_SID)
    REFERENCES CSR.LEASE(APP_SID, LEASE_ID, PROPERTY_REGION_SID)  DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE CSR.SPACE ADD CONSTRAINT FK_LEASE_SPACE 
    FOREIGN KEY (APP_SID, CURRENT_LEASE_ID, REGION_SID)
    REFERENCES CSR.LEASE(APP_SID, LEASE_ID, SPACE_REGION_SID)  DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE CSR.PROPERTY ADD CONSTRAINT FK_LEASE_PROPERTY_PROPERTY 
    FOREIGN KEY (APP_SID, CURRENT_LEASE_ID, REGION_SID)
    REFERENCES CSR.LEASE_PROPERTY(APP_SID, LEASE_ID, PROPERTY_REGION_SID)  DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE CSR.SPACE ADD CONSTRAINT FK_LEASE_SPACE_SPACE 
    FOREIGN KEY (APP_SID, CURRENT_LEASE_ID, REGION_SID)
    REFERENCES CSR.LEASE_SPACE(APP_SID, LEASE_ID, SPACE_REGION_SID)  DEFERRABLE INITIALLY DEFERRED;

-- ISO4217 currencies
BEGIN
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('AED', 'UAE Dirham');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('AFN', 'Afghani');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ALL', 'Lek');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('AMD', 'Armenian Dram');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ANG', 'Netherlands Antillean Guilder');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('AOA', 'Kwanza');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ARS', 'Argentine Peso');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('AUD', 'Australian Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('AWG', 'Aruban Florin');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('AZN', 'Azerbaijanian Manat');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BAM', 'Convertible Mark');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BBD', 'Barbados Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BDT', 'Taka');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BGN', 'Bulgarian Lev');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BHD', 'Bahraini Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BIF', 'Burundi Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BMD', 'Bermudian Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BND', 'Brunei Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BOB', 'Boliviano');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BOV', 'Mvdol');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BRL', 'Brazilian Real');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BSD', 'Bahamian Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BTN', 'Ngultrum');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BWP', 'Pula');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BYR', 'Belarussian Ruble');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('BZD', 'Belize Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CAD', 'Canadian Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CDF', 'Congolese Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CHE', 'WIR Euro');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CHF', 'Swiss Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CHW', 'WIR Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CLF', 'Unidades de fomento');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CLP', 'Chilean Peso');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CNY', 'Yuan Renminbi');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('COP', 'Colombian Peso');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('COU', 'Unidad de Valor Real');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CRC', 'Costa Rican Colon');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CUP', 'Cuban Peso');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CVE', 'Cape Verde Escudo');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('CZK', 'Czech Koruna');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('DJF', 'Djibouti Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('DKK', 'Danish Krone');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('DOP', 'Dominican Peso');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('DZD', 'Algerian Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('EGP', 'Egyptian Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ERN', 'Nakfa');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ETB', 'Ethiopian Birr');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('EUR', 'Euro');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('FJD', 'Fiji Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('FKP', 'Falkland Islands Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GBP', 'Pound Sterling');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GEL', 'Lari');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GHS', 'Ghana Cedi');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GIP', 'Gibraltar Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GMD', 'Dalasi');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GNF', 'Guinea Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GTQ', 'Quetzal');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('GYD', 'Guyana Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('HKD', 'Hong Kong Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('HNL', 'Lempira');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('HRK', 'Croatian Kuna');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('HTG', 'Gourde');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('HUF', 'Forint');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('IDR', 'Rupiah');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ILS', 'New Israeli Sheqel');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('INR', 'Indian Rupee');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('IQD', 'Iraqi Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('IRR', 'Iranian Rial');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ISK', 'Iceland Krona');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('JMD', 'Jamaican Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('JOD', 'Jordanian Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('JPY', 'Yen');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KES', 'Kenyan Shilling');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KGS', 'Som');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KHR', 'Riel');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KMF', 'Comoro Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KPW', 'North Korean Won');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KRW', 'Won');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KWD', 'Kuwaiti Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KYD', 'Cayman Islands Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('KZT', 'Tenge');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LAK', 'Kip');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LBP', 'Lebanese Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LKR', 'Sri Lanka Rupee');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LRD', 'Liberian Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LSL', 'Loti');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LTL', 'Lithuanian Litas');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LVL', 'Latvian Lats');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('LYD', 'Libyan Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MAD', 'Moroccan Dirham');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MDL', 'Moldovan Leu');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MGA', 'Malagasy Ariary');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MKD', 'Denar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MMK', 'Kyat');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MNT', 'Tugrik');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MOP', 'Pataca');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MRO', 'Ouguiya');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MUR', 'Mauritius Rupee');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MVR', 'Rufiyaa');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MWK', 'Kwacha');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MXN', 'Mexican Peso');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MYR', 'Malaysian Ringgit');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('MZN', 'Mozambique Metical');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('NAD', 'Namibia Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('NGN', 'Naira');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('NIO', 'Cordoba Oro');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('NOK', 'Norwegian Krone');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('NPR', 'Nepalese Rupee');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('NZD', 'New Zealand Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('OMR', 'Rial Omani');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('PAB', 'Balboa');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('PEN', 'Nuevo Sol');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('PGK', 'Kina');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('PHP', 'Philippine Peso');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('PKR', 'Pakistan Rupee');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('PLN', 'Zloty');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('PYG', 'Guarani');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('QAR', 'Qatari Rial');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('RON', 'New Romanian Leu');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('RSD', 'Serbian Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('RUB', 'Russian Ruble');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('RWF', 'Rwanda Franc');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SAR', 'Saudi Riyal');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SBD', 'Solomon Islands Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SCR', 'Seychelles Rupee');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SDG', 'Sudanese Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SEK', 'Swedish Krona');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SGD', 'Singapore Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SHP', 'Saint Helena Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SLL', 'Leone');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SOS', 'Somali Shilling');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SRD', 'Surinam Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SSP', 'South Sudanese Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('STD', 'Dobra');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SVC', 'El Salvador Colon');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SYP', 'Syrian Pound');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('SZL', 'Lilangeni');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('THB', 'Baht');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TJS', 'Somoni');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TMT', 'Turkmenistan New Manat');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TND', 'Tunisian Dinar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TOP', 'Pa''anga');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TRY', 'Turkish Lira');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TTD', 'Trinidad and Tobago Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TWD', 'New Taiwan Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('TZS', 'Tanzanian Shilling');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('UAH', 'Hryvnia');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('UGX', 'Uganda Shilling');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('USD', 'US Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('UYU', 'Peso Uruguayo');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('UZS', 'Uzbekistan Sum');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('VEF', 'Bolivar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('VND', 'Dong');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('VUV', 'Vatu');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('WST', 'Tala');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('XCD', 'East Caribbean Dollar');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('XSU', 'Sucre');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('YER', 'Yemeni Rial');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ZAR', 'Rand');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ZMW', 'Zambian Kwacha');
INSERT INTO CSR.STD_CURRENCY (CURRENCY_CODE, LABEL) VALUES ('ZWL', 'Zimbabwe Dollar');
END;
/
  
CREATE OR REPLACE VIEW csr.v$space AS
    SELECT s.region_sid, r.description, r.parent_sid, s.space_type_id, st.label space_type_label, s.current_lease_id
      FROM space s
        JOIN v$region r on s.region_sid = r.region_sid
        JOIN space_type st ON s.space_type_Id = st.space_type_id;

create or replace package csr.currency_pkg as
procedure dummy;
end;
/
create or replace package body csr.currency_pkg as
procedure dummy
as
begin
	null;
end;
end;
/


grant execute on csr.currency_pkg to web_user;

alter table csr.lease drop constraint CHK_LEASE;
alter table csr.lease drop constraint fk_space_lease;
alter table csr.lease drop constraint fk_property_lease;
alter table csr.property drop constraint fk_lease_property;
alter table csr.space drop constraint fk_lease_space;
alter table csr.lease drop constraint uk_property_lease;
alter table csr.lease drop constraint uk_space_lease;
alter table csr.lease drop column space_region_sid;
alter table csr.lease drop column property_region_sid;

-- FK indexes
create index csr.ix_std_currency_currency on csr.currency (currency_code);
create index csr.ix_fund_type_fund on csr.fund (app_sid, fund_type_id);
create index csr.ix_fund_mgr_contact_fund on csr.fund (app_sid, fund_manager_contact_id);
create index csr.ix_mgmt_company_fund on csr.fund (app_sid, default_mgmt_company_id);
create index csr.ix_currency_lease on csr.lease (app_sid, currency_code);
create index csr.ix_tenant_lease on csr.lease (app_sid, tenant_id);
create index csr.ix_postit_lease on csr.lease_postit (app_sid, postit_id);
create index csr.ix_lease_lease_postit on csr.lease_postit (app_sid, lease_id);
create index csr.ix_property_lease_property on csr.lease_property (app_sid, property_region_sid);
create index csr.ix_space_lease_space on csr.lease_space (app_sid, space_region_sid);
create index csr.ix_mgmt_company_contact on csr.mgmt_company_contact (app_sid, mgmt_company_id);
create index csr.ix_fund_mgmt_co_fnd_ct on csr.mgmt_company_fund_contact (app_sid, fund_id, mgmt_company_id);
create index csr.ix_mgmt_co_con_fund_co on csr.mgmt_company_fund_contact (app_sid, mgmt_company_contact_id, mgmt_company_id);
create index csr.ix_plugin_plugin_type on csr.plugin (plugin_type_id);
create index csr.ix_lease_property on csr.property (app_sid, current_lease_id, region_sid);
create index csr.ix_property_tab_plugin on csr.property_tab (plugin_id, plugin_type_id);
create index csr.ix_lease_space on csr.space (app_sid, current_lease_id, region_sid);



declare
	policy_already_exists exception;
	pragma exception_init(policy_already_exists, -28101);

	type t_tabs is table of varchar2(30);
	v_list t_tabs;
	v_null_list t_tabs;
	v_found number;
begin   
	v_list := t_tabs(
		'PROPERTY_TAB',
		'PROPERTY_OPTIONS',
		'CURRENCY',
		'FUND_MGR_CONTACT',
		'FUND_TYPE',
		'LEASE',
		'LEASE_SPACE',
		'LEASE_PROPERTY',
		'LEASE_POSTIT',
		'MGMT_COMPANY_CONTACT',
		'MGMT_COMPANY_FUND_CONTACT',
		'TENANT'
	);
	for i in 1 .. v_list.count loop
		declare
			v_name varchar2(30);
			v_i pls_integer default 1;
		begin
			begin               
				v_name := SUBSTR(v_list(i), 1, 23)||'_POLICY';
				
				dbms_output.put_line('doing '||v_name);
				dbms_rls.add_policy(
					object_schema   => 'CSR',
					object_name     => v_list(i),
					policy_name     => v_name,
					function_schema => 'CSR',
					policy_function => 'appSidCheck',
					statement_types => 'select, insert, update, delete',
					update_check    => true,
					policy_type     => dbms_rls.context_sensitive );
			exception
				when policy_already_exists then
					NULL;
			end;
			
		end;
	end loop;
end;
/

@../csr_data_pkg
@../property_pkg
@../currency_pkg
@../../../aspen2/cms/db/tab_pkg

@../property_body
@../currency_body
@../../../aspen2/cms/db/tab_body

@update_tail


