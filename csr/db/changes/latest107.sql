-- Please update version.sql too -- this keeps clean builds in sync
define version=107
@update_header

VARIABLE version NUMBER
BEGIN :version := 107; END; -- CHANGE THIS TO MATCH VERSION NUMBER
/

WHENEVER SQLERROR EXIT SQL.SQLCODE
DECLARE
	v_version	version.db_version%TYPE;
BEGIN
	SELECT db_version INTO v_version FROM version;
	IF v_version >= :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' HAS ALREADY BEEN APPLIED =======');
	END IF;
	IF v_version + 1 <> :version THEN
		RAISE_APPLICATION_ERROR(-20001, '========= UPDATE '||:version||' CANNOT BE APPLIED TO A DATABASE OF VERSION '||v_version||' =======');
	END IF;
END;
/


ALTER TABLE PENDING_IND ADD (AGGREGATE VARCHAR2(24) DEFAULT 'SUM' NOT NULL);

UPDATE PENDING_IND SET AGGREGATE = NVL((SELECT AGGREGATE FROM IND WHERE IND.IND_SID = PENDING_IND.MAPS_TO_IND_SID),'SUM');


--
-- 
-- TABLE: PENDING_AGGREGATE 
--

CREATE TABLE PENDING_AGGREGATE(
    PENDING_IND_ID       NUMBER(10, 0)     NOT NULL,
    PENDING_REGION_ID    NUMBER(10, 0)     NOT NULL,
    PENDING_PERIOD_ID    NUMBER(10, 0)     NOT NULL,
    VAL_NUMBER           NUMBER(24, 10),
    CONSTRAINT PK320 PRIMARY KEY (PENDING_IND_ID, PENDING_REGION_ID, PENDING_PERIOD_ID)
)
;




-- 
-- TABLE: UNAPPROVED_VAL 
--

CREATE TABLE UNAPPROVED_VAL(
    IND_SID       NUMBER(10, 0)     NOT NULL,
    REGION_SID    NUMBER(10, 0)     NOT NULL,
    START_DTM     DATE              NOT NULL,
    END_DTM       DATE              NOT NULL,
    VAL_NUMBER    NUMBER(24, 10),
    CONSTRAINT PK353 PRIMARY KEY (IND_SID, REGION_SID, START_DTM, END_DTM)
)
;



-- 
-- TABLE: PENDING_AGGREGATE 
--

ALTER TABLE PENDING_AGGREGATE ADD CONSTRAINT RefPENDING_REGION576 
    FOREIGN KEY (PENDING_REGION_ID)
    REFERENCES PENDING_REGION(PENDING_REGION_ID)
;

ALTER TABLE PENDING_AGGREGATE ADD CONSTRAINT RefPENDING_PERIOD577 
    FOREIGN KEY (PENDING_PERIOD_ID)
    REFERENCES PENDING_PERIOD(PENDING_PERIOD_ID)
;

ALTER TABLE PENDING_AGGREGATE ADD CONSTRAINT RefPENDING_IND578 
    FOREIGN KEY (PENDING_IND_ID)
    REFERENCES PENDING_IND(PENDING_IND_ID)
;



-- 
-- TABLE: UNAPPROVED_VAL 
--

ALTER TABLE UNAPPROVED_VAL ADD CONSTRAINT RefREGION639 
    FOREIGN KEY (REGION_SID)
    REFERENCES REGION(REGION_SID)
;

ALTER TABLE UNAPPROVED_VAL ADD CONSTRAINT RefIND640 
    FOREIGN KEY (IND_SID)
    REFERENCES IND(IND_SID)
;




UPDATE csr.version SET db_version = :version;
COMMIT;

PROMPT
PROMPT ================== UPDATED OK ========================
EXIT



@update_tail
